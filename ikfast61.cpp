/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-08-03 17:21:43.596650
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.099784)*x1);
x13=((1.0)*x6);
x14=((1.0)*x11);
x15=((0.425485)*x1);
x16=((0.09958224)*x5);
x17=((1.0)*x1);
x18=((0.09958224)*x6);
x19=((1.0)*x9);
x20=((1.0)*x0);
x21=((1.0)*x5);
x22=(x10*x9);
x23=(x10*x2);
x24=(x0*x9);
x25=(x3*x4);
x26=(x0*x4);
x27=(x2*x3);
x28=(x1*x4);
x29=((0.099784)*x10*x4);
x30=((0.099784)*x0*x3);
x31=(x0*x1*x2);
x32=(x20*x25);
x33=((1.0)*x10*x25);
x34=(((x1*x2))+(((-1.0)*x25)));
x35=(x27+x28);
x36=(x35*x5);
x37=((((-1.0)*x32))+x31);
x38=((((-1.0)*x33))+((x1*x23)));
x39=((((-1.0)*x17*x26))+(((-1.0)*x20*x27)));
x40=((((-1.0)*x23*x3))+(((-1.0)*x10*x17*x4)));
x41=(x37*x5);
x42=(x38*x5);
x43=(((x6*(((((-1.0)*x27))+(((-1.0)*x17*x4))))))+((x34*x5)));
x44=((((-1.0)*x21*x35))+(((-1.0)*x13*x34)));
x45=(x41+((x39*x6)));
x46=(x42+((x40*x6)));
x47=(((x6*(((((-1.0)*x0*x17*x2))+x32))))+((x39*x5)));
x48=(((x40*x5))+((x6*(((((-1.0)*x17*x23))+x33)))));
x49=(x45*x9);
eerot[0]=(((x47*x8))+((x7*((x49+((x10*x11)))))));
eerot[1]=(((x8*(((((-1.0)*x19*x45))+(((-1.0)*x10*x14))))))+((x47*x7)));
eerot[2]=(((x11*(((((-1.0)*x21*x37))+(((-1.0)*x13*x39))))))+x22);
IkReal x50=((0.099784)*x0);
eetrans[0]=(((x11*(((((-1.0)*x18*x39))+(((-1.0)*x16*x37))))))+(((0.39276097)*x0*x25))+(((-1.0)*x0*x15))+(((-0.39276097)*x31))+(((0.1323165)*x10))+((x5*((((x27*x50))+((x12*x26))))))+((x6*(((((-1.0)*x25*x50))+((x0*x12*x2))))))+(((0.09958224)*x22)));
eerot[3]=(((x48*x8))+((x7*(((((-1.0)*x0*x11))+((x46*x9)))))));
eerot[4]=(((x8*((((x0*x14))+(((-1.0)*x19*x46))))))+((x48*x7)));
eerot[5]=((((-1.0)*x0*x19))+((x11*(((((-1.0)*x21*x38))+(((-1.0)*x13*x40)))))));
IkReal x51=(x10*x25);
eetrans[1]=((((0.39276097)*x51))+((x6*(((((-0.099784)*x51))+((x12*x23))))))+(((-0.39276097)*x1*x23))+(((-0.1323165)*x0))+(((-0.09958224)*x24))+((x11*(((((-1.0)*x18*x40))+(((-1.0)*x16*x38))))))+(((-1.0)*x10*x15))+((x5*(((((0.099784)*x23*x3))+((x10*x12*x4)))))));
eerot[6]=(((x7*x9*((((x34*x6))+x36))))+((x43*x8)));
eerot[7]=(((x44*x8*x9))+((x43*x7)));
eerot[8]=(x11*x44);
eetrans[2]=((0.162607)+(((-0.39276097)*x28))+(((-0.39276097)*x27))+((x5*(((((-1.0)*x12*x2))+(((0.099784)*x25))))))+((x11*(((((-1.0)*x18*x34))+(((-1.0)*x16*x35))))))+((x6*(((((0.099784)*x27))+((x12*x4))))))+(((-0.425485)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.09958224)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.09958224)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.162607)+pz+(((-0.09958224)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.199568)*npx);
IkReal x56=((0.199568)*npy);
IkReal x57=((0.099784)*r22);
IkReal x58=((0.099784)*r02);
IkReal x59=((0.099784)*r21);
IkReal x60=((0.099784)*r01);
IkReal x61=((0.199568)*rxp0_2);
IkReal x62=((2.0)*pz);
IkReal x63=((-0.099784)*r20);
IkReal x64=((-0.099784)*r21);
IkReal x65=((-0.199568)*rxp2_2);
IkReal x66=((-1.0)*npy);
IkReal x67=((-1.0)*r01);
IkReal x68=((-1.0)*rxp1_2);
IkReal x69=((-1.0)*rxp1_0);
IkReal x70=((-1.0)*r20);
IkReal x71=((-1.0)*r22);
IkReal x72=((-0.199568)*rxp1_2);
IkReal x73=((-0.099784)*r00);
IkReal x74=(((pp*r20))+(((-1.0)*npx*x62))+(((0.009956846656)*r20)));
IkReal x75=(((pp*r22))+(((0.009956846656)*r22))+(((-1.0)*npz*x62)));
IkReal x76=(((npy*x62))+(((-1.0)*pp*r21))+(((-0.009956846656)*r21)));
matrixinvcoeffs[0]=x63;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x63;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x64;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x64;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=x57;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x65;
matrixinvcoeffs[77]=x58;
matrixinvcoeffs[78]=((-0.099784)*r12);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x57;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=((0.099784)*r12);
matrixinvcoeffs[94]=x58;
matrixinvcoeffs[95]=x65;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x66;
matrixinvcoeffs[101]=r21;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=x68;
matrixinvcoeffs[105]=x67;
matrixinvcoeffs[106]=r11;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x76;
matrixinvcoeffs[109]=x69;
matrixinvcoeffs[110]=rxp1_1;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x66;
matrixinvcoeffs[119]=r21;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=((-1.0)*r11);
matrixinvcoeffs[122]=x67;
matrixinvcoeffs[123]=x68;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=((-1.0)*rxp1_1);
matrixinvcoeffs[126]=x69;
matrixinvcoeffs[127]=x76;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=npx;
matrixinvcoeffs[133]=x70;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=rxp0_2;
matrixinvcoeffs[137]=r00;
matrixinvcoeffs[138]=((-1.0)*r10);
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x74;
matrixinvcoeffs[141]=rxp0_0;
matrixinvcoeffs[142]=((-1.0)*rxp0_1);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=npx;
matrixinvcoeffs[151]=x70;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=r10;
matrixinvcoeffs[154]=r00;
matrixinvcoeffs[155]=rxp0_2;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_1;
matrixinvcoeffs[158]=rxp0_0;
matrixinvcoeffs[159]=x74;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=npz;
matrixinvcoeffs[165]=x71;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=rxp2_2;
matrixinvcoeffs[169]=r02;
matrixinvcoeffs[170]=((-1.0)*r12);
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x75;
matrixinvcoeffs[173]=rxp2_0;
matrixinvcoeffs[174]=((-1.0)*rxp2_1);
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=npz;
matrixinvcoeffs[183]=x71;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=r12;
matrixinvcoeffs[186]=r02;
matrixinvcoeffs[187]=rxp2_2;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_1;
matrixinvcoeffs[190]=rxp2_0;
matrixinvcoeffs[191]=x75;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x59;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x72;
matrixinvcoeffs[205]=x60;
matrixinvcoeffs[206]=((-0.099784)*r11);
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x59;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=((0.099784)*r11);
matrixinvcoeffs[222]=x60;
matrixinvcoeffs[223]=x72;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=x73;
matrixinvcoeffs[238]=((0.099784)*r10);
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x63;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=((-0.099784)*r10);
matrixinvcoeffs[254]=x73;
matrixinvcoeffs[255]=x61;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_6=matrixinvcoeffs[100], gclwh4_7=matrixinvcoeffs[116], gclwh4_8=matrixinvcoeffs[132], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh4_13=matrixinvcoeffs[212], gclwh4_14=matrixinvcoeffs[228], gclwh4_15=matrixinvcoeffs[244], gclwh5_4=matrixinvcoeffs[69], gclwh5_5=matrixinvcoeffs[85], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_8=matrixinvcoeffs[133], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_11=matrixinvcoeffs[181], gclwh5_12=matrixinvcoeffs[197], gclwh5_13=matrixinvcoeffs[213], gclwh5_14=matrixinvcoeffs[229], gclwh5_15=matrixinvcoeffs[245], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_6=matrixinvcoeffs[102], gclwh6_7=matrixinvcoeffs[118], gclwh6_8=matrixinvcoeffs[134], gclwh6_9=matrixinvcoeffs[150], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_13=matrixinvcoeffs[214], gclwh6_14=matrixinvcoeffs[230], gclwh6_15=matrixinvcoeffs[246], gclwh7_4=matrixinvcoeffs[71], gclwh7_5=matrixinvcoeffs[87], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_15=matrixinvcoeffs[247], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_6=matrixinvcoeffs[104], gclwh8_7=matrixinvcoeffs[120], gclwh8_8=matrixinvcoeffs[136], gclwh8_9=matrixinvcoeffs[152], gclwh8_10=matrixinvcoeffs[168], gclwh9_4=matrixinvcoeffs[73], gclwh9_5=matrixinvcoeffs[89], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_6=matrixinvcoeffs[106], gclwh10_7=matrixinvcoeffs[122], gclwh10_8=matrixinvcoeffs[138], gclwh10_9=matrixinvcoeffs[154], gclwh10_10=matrixinvcoeffs[170], gclwh11_4=matrixinvcoeffs[75], gclwh11_5=matrixinvcoeffs[91], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_6=matrixinvcoeffs[108], gclwh12_7=matrixinvcoeffs[124], gclwh12_8=matrixinvcoeffs[140], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh12_13=matrixinvcoeffs[220], gclwh12_14=matrixinvcoeffs[236], gclwh12_15=matrixinvcoeffs[252], gclwh13_4=matrixinvcoeffs[77], gclwh13_5=matrixinvcoeffs[93], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_8=matrixinvcoeffs[141], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_11=matrixinvcoeffs[189], gclwh13_12=matrixinvcoeffs[205], gclwh13_13=matrixinvcoeffs[221], gclwh13_14=matrixinvcoeffs[237], gclwh13_15=matrixinvcoeffs[253], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_6=matrixinvcoeffs[110], gclwh14_7=matrixinvcoeffs[126], gclwh14_8=matrixinvcoeffs[142], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh14_13=matrixinvcoeffs[222], gclwh14_14=matrixinvcoeffs[238], gclwh14_15=matrixinvcoeffs[254], gclwh15_4=matrixinvcoeffs[79], gclwh15_5=matrixinvcoeffs[95], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_8=matrixinvcoeffs[143], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_11=matrixinvcoeffs[191], gclwh15_12=matrixinvcoeffs[207], gclwh15_13=matrixinvcoeffs[223], gclwh15_14=matrixinvcoeffs[239], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x77=((1.0)*py);
IkReal x78=((0.03272403)+px);
IkReal x79=((-0.81824597)+px);
IkReal x80=((0.81824597)+px);
IkReal x81=((-0.03272403)+px);
IkReal x82=(npy*py);
IkReal x83=((1.63649194)*gclwh6_8);
IkReal x84=(gclwh10_9*r12);
IkReal x85=((0.00653066921904)*rxp2_0);
IkReal x86=(pp*r11);
IkReal x87=((0.78552194)*gclwh6_13);
IkReal x88=(pp*r01);
IkReal x89=((0.20787502754802)*gclwh6_15);
IkReal x90=(gclwh6_8*r11);
IkReal x91=((0.00653066921904)*gclwh13_11);
IkReal x92=(gclwh3_3*r11);
IkReal x93=((0.15676504252192)*rxp0_0);
IkReal x94=((0.199568)*rxp2_0);
IkReal x95=((0.026406139272)*gclwh13_4);
IkReal x96=(gclwh3_3*r01);
IkReal x97=((0.026406139272)*rxp0_1);
IkReal x98=((0.099784)*gclwh3_3);
IkReal x99=(gclwh0_1*r10);
IkReal x100=((0.026406139272)*gclwh4_6);
IkReal x101=((0.264633)*gclwh7_4);
IkReal x102=(gclwh5_14*rxp2_0);
IkReal x103=((1.0)*pp);
IkReal x104=(gclwh11_8*r02);
IkReal x105=((0.32659142348192)*rxp1_0);
IkReal x106=((0.009956846656)*r01);
IkReal x107=(gclwh8_10*r10);
IkReal x108=((0.32659142348192)*rxp2_1);
IkReal x109=((0.03272403)*pp);
IkReal x110=((1.57104388)*gclwh7_8);
IkReal x111=(npy*px);
IkReal x112=((3.27298388)*gclwh6_13);
IkReal x113=((0.01306133843808)*rxp0_1);
IkReal x114=((2.0)*gclwh6_9);
IkReal x115=((0.0414852034977033)*rxp2_0);
IkReal x116=((0.264633)*px);
IkReal x117=(gclwh11_4*npz);
IkReal x118=((0.264633)*gclwh7_6);
IkReal x119=(gclwh9_9*r00);
IkReal x120=(gclwh1_2*r00);
IkReal x121=((0.009956846656)*r02);
IkReal x122=((0.00206977977290741)*gclwh7_15);
IkReal x123=((0.1323165)*pp);
IkReal x124=(gclwh9_4*r00);
IkReal x125=((0.03463943292396)*gclwh6_15);
IkReal x126=((0.000172449760937334)*r01);
IkReal x127=((0.01306133843808)*rxp2_1);
IkReal x128=(gclwh12_12*rxp1_0);
IkReal x129=((0.00345646117488442)*rxp1_1);
IkReal x130=((0.00131745510055862)*r00);
IkReal x131=(gclwh8_4*r10);
IkReal x132=(gclwh12_12*rxp1_1);
IkReal x133=(gclwh11_10*r12);
IkReal x134=((0.026406139272)*rxp1_1);
IkReal x135=((0.026406139272)*rxp0_0);
IkReal x136=((0.199568)*rxp0_0);
IkReal x137=((0.16329571174096)*rxp0_1);
IkReal x138=(gclwh11_8*r12);
IkReal x139=((0.31353008504384)*rxp0_1);
IkReal x140=((0.199568)*rxp1_1);
IkReal x141=((0.16329571174096)*gclwh12_8);
IkReal x142=((0.16329571174096)*rxp2_1);
IkReal x143=((0.13089612)*gclwh6_13);
IkReal x144=((0.00345646117488442)*rxp0_1);
IkReal x145=((1.63649194)*px);
IkReal x146=(gclwh8_8*npx);
IkReal x147=((0.03463943292396)*gclwh6_12);
IkReal x148=((1.57104388)*gclwh6_14);
IkReal x149=((0.43306977155802)*gclwh6_15);
IkReal x150=((0.06544806)*gclwh6_8);
IkReal x151=((0.00653066921904)*rxp0_1);
IkReal x152=(gclwh5_8*rxp2_0);
IkReal x153=(gclwh10_8*r12);
IkReal x154=(gclwh8_4*npx);
IkReal x155=((2.0)*gclwh6_10);
IkReal x156=((0.03272403)*gclwh7_8);
IkReal x157=(gclwh12_13*rxp1_1);
IkReal x158=((0.00345646117488442)*rxp2_0);
IkReal x159=((0.199568)*rxp2_1);
IkReal x160=((0.41575005509604)*gclwh6_12);
IkReal x161=(npz*px);
IkReal x162=((3.14208776)*gclwh7_8);
IkReal x163=(gclwh10_8*npz);
IkReal x164=((0.03272403)*gclwh6_8);
IkReal x165=(gclwh7_8*r11);
IkReal x166=((0.0864268681702909)*rxp1_1);
IkReal x167=(gclwh14_14*rxp0_0);
IkReal x168=((0.199568)*rxp0_1);
IkReal x169=((0.15676504252192)*gclwh13_13);
IkReal x170=(gclwh2_1*r11);
IkReal x171=(gclwh8_8*r10);
IkReal x172=((0.06544806)*px);
IkReal x173=(npx*px);
IkReal x174=((3.14208776)*gclwh9_8);
IkReal x175=((0.099784)*pz);
IkReal x176=(gclwh3_2*r11);
IkReal x177=((0.41575005509604)*gclwh6_15);
IkReal x178=((0.026406139272)*gclwh5_6);
IkReal x179=((2.0)*gclwh8_9);
IkReal x180=((2.0)*gclwh7_10);
IkReal x181=((1.0)*gclwh7_10);
IkReal x182=((0.00431200930675216)*r01);
IkReal x183=((0.06544806)*py);
IkReal x184=((0.43306977155802)*gclwh7_15);
IkReal x185=((2.0)*gclwh9_10);
IkReal x186=(gclwh13_14*rxp1_1);
IkReal x187=((0.06544806)*gclwh6_14);
IkReal x188=((1.0)*gclwh7_9);
IkReal x189=(gclwh11_4*r02);
IkReal x190=(gclwh9_8*r10);
IkReal x191=(gclwh2_0*r01);
IkReal x192=((0.16329571174096)*rxp0_0);
IkReal x193=(gclwh0_0*r10);
IkReal x194=((0.0864268681702909)*gclwh4_15);
IkReal x195=((0.78552194)*gclwh6_14);
IkReal x196=((0.15676504252192)*rxp2_1);
IkReal x197=(gclwh13_8*rxp1_1);
IkReal x198=((0.0414852034977033)*gclwh13_12);
IkReal x199=((1.57104388)*gclwh6_8);
IkReal x200=(gclwh11_6*r12);
IkReal x201=((3.14208776)*gclwh6_8);
IkReal x202=(gclwh0_0*r00);
IkReal x203=(pp*r02);
IkReal x204=(gclwh13_8*rxp1_0);
IkReal x205=((3.14208776)*py);
IkReal x206=((0.06544806)*gclwh7_8);
IkReal x207=((0.31353008504384)*rxp2_1);
IkReal x208=((0.86613954311604)*gclwh6_15);
IkReal x209=(gclwh6_13*r11);
IkReal x210=((0.01306133843808)*rxp1_0);
IkReal x211=((0.15676504252192)*gclwh12_14);
IkReal x212=((0.000325828148676344)*r01);
IkReal x213=((0.00431200930675216)*r11);
IkReal x214=((1.57104388)*pp);
IkReal x215=((0.1323165)*gclwh7_6);
IkReal x216=((0.264633)*gclwh6_4);
IkReal x217=(pp*r10);
IkReal x218=((0.099784)*gclwh1_3);
IkReal x219=((0.32659142348192)*rxp2_0);
IkReal x220=((0.81824597)*gclwh7_8);
IkReal x221=(gclwh3_2*r01);
IkReal x222=((0.1323165)*gclwh6_4);
IkReal x223=((1.63649194)*gclwh6_14);
IkReal x224=((0.00131745510055862)*gclwh6_6);
IkReal x225=(gclwh10_6*npz);
IkReal x226=((0.026406139272)*rxp2_1);
IkReal x227=((0.009956846656)*r10);
IkReal x228=((0.0414852034977033)*rxp0_1);
IkReal x229=((0.81824597)*gclwh6_8);
IkReal x230=(gclwh8_8*r00);
IkReal x231=((0.00345646117488442)*rxp0_0);
IkReal x232=(gclwh10_10*r12);
IkReal x233=((0.0864268681702909)*rxp1_0);
IkReal x234=((0.01306133843808)*rxp2_0);
IkReal x235=((3.27298388)*gclwh6_14);
IkReal x236=((0.0864268681702909)*rxp0_1);
IkReal x237=((0.01629429930036)*r01);
IkReal x238=((0.81824597)*pp);
IkReal x239=((1.63649194)*py);
IkReal x240=(gclwh9_8*npx);
IkReal x241=((0.00345646117488442)*rxp1_0);
IkReal x242=((0.00653066921904)*rxp0_0);
IkReal x243=((0.20787502754802)*gclwh6_12);
IkReal x244=((0.01731971646198)*gclwh6_15);
IkReal x245=(gclwh15_14*rxp0_1);
IkReal x246=((0.32659142348192)*rxp0_0);
IkReal x247=(gclwh13_13*rxp1_1);
IkReal x248=((0.16329571174096)*gclwh13_11);
IkReal x249=((2.0)*gclwh7_9);
IkReal x250=((0.00206977977290741)*r01);
IkReal x251=((0.20787502754802)*gclwh7_15);
IkReal x252=((0.16329571174096)*rxp2_0);
IkReal x253=((1.63649194)*gclwh6_13);
IkReal x254=(gclwh9_8*r00);
IkReal x255=(gclwh10_8*r02);
IkReal x256=(gclwh0_1*r00);
IkReal x257=((0.86613954311604)*gclwh6_12);
IkReal x258=(gclwh8_6*r10);
IkReal x259=((0.009956846656)*r11);
IkReal x260=(gclwh1_3*r00);
IkReal x261=(gclwh9_6*npx);
IkReal x262=((0.06544806)*gclwh6_13);
IkReal x263=(gclwh11_6*npz);
IkReal x264=(gclwh1_3*r10);
IkReal x265=((0.0414852034977033)*rxp2_1);
IkReal x266=(gclwh15_15*rxp0_0);
IkReal x267=((0.15676504252192)*rxp2_0);
IkReal x268=((0.1323165)*gclwh6_6);
IkReal x269=((0.264633)*gclwh6_6);
IkReal x270=(gclwh9_6*r10);
IkReal x271=(gclwh9_4*r10);
IkReal x272=(gclwh2_1*r01);
IkReal x273=(gclwh8_6*npx);
IkReal x274=((0.00653066921904)*rxp2_1);
IkReal x275=((0.009956846656)*r00);
IkReal x276=((0.264633)*py);
IkReal x277=(gclwh10_4*npz);
IkReal x278=(gclwh15_13*rxp0_1);
IkReal x279=(gclwh2_0*r11);
IkReal x280=((0.0414852034977033)*rxp0_0);
IkReal x281=((0.199568)*rxp1_0);
IkReal x282=(npx*py);
IkReal x283=((0.026406139272)*rxp1_0);
IkReal x284=((0.00131745510055862)*r12);
IkReal x285=((0.13089612)*gclwh6_14);
IkReal x286=((1.63649194)*gclwh7_8);
IkReal x287=((0.15676504252192)*rxp0_1);
IkReal x288=((0.026406139272)*rxp2_0);
IkReal x289=((0.00131745510055862)*r01);
IkReal x290=((0.000651656297352687)*r01);
IkReal x291=((0.41575005509604)*gclwh7_15);
IkReal x292=((0.00345646117488442)*rxp2_1);
IkReal x293=((0.099784)*pp);
IkReal x294=((0.0864268681702909)*gclwh5_12);
IkReal x295=(gclwh6_15*r11);
IkReal x296=((0.01306133843808)*rxp0_0);
IkReal x297=((0.31353008504384)*rxp2_0);
IkReal x298=((0.1323165)*gclwh7_4);
IkReal x299=(pp*r00);
IkReal x300=((0.15676504252192)*rxp1_0);
IkReal x301=(gclwh6_14*r11);
IkReal x302=(gclwh10_4*r02);
IkReal x303=(gclwh1_2*r10);
IkReal x304=(gclwh11_9*r12);
IkReal x305=((0.01731971646198)*gclwh7_15);
IkReal x306=((0.86613954311604)*gclwh7_15);
IkReal x307=(gclwh9_4*npx);
IkReal x308=(gclwh6_12*r11);
IkReal x309=((0.03463943292396)*gclwh7_15);
IkReal x310=((0.0864268681702909)*rxp2_0);
IkReal x311=((0.31353008504384)*rxp1_0);
IkReal x312=(gclwh11_6*r02);
IkReal x313=((0.099784)*gclwh2_1);
IkReal x314=((0.31353008504384)*rxp0_0);
IkReal x315=((0.0414852034977033)*gclwh13_15);
IkReal x316=((0.0864268681702909)*rxp0_0);
IkReal x317=(gclwh12_14*rxp1_1);
IkReal x318=((0.31353008504384)*rxp1_1);
IkReal x319=((0.00131745510055862)*r11);
IkReal x320=((1.57104388)*gclwh6_13);
IkReal x321=((0.00782132150150363)*r01);
IkReal x322=(gclwh6_8*r01);
IkReal x323=((0.00653066921904)*gclwh12_8);
IkReal x324=(gclwh10_6*r02);
IkReal x325=((0.43306977155802)*gclwh6_12);
IkReal x326=((0.01731971646198)*gclwh6_12);
IkReal x327=((0.0414852034977033)*gclwh12_15);
IkReal x328=(gclwh7_8*r01);
IkReal x329=((0.32659142348192)*rxp0_1);
IkReal x330=((0.0864268681702909)*rxp2_1);
IkReal x331=(gclwh15_10*x168);
IkReal x332=(gclwh9_10*x227);
IkReal x333=(gclwh8_10*x299);
IkReal x334=(gclwh11_4*x284);
IkReal x335=((0.009956846656)*x133);
IkReal x336=(gclwh9_10*x217);
IkReal x337=(gclwh15_4*x97);
IkReal x338=(gclwh10_10*x121);
IkReal x339=(gclwh14_10*x136);
IkReal x340=((0.00131745510055862)*x302);
IkReal x341=(pp*x133);
IkReal x342=(gclwh10_10*x203);
IkReal x343=(gclwh8_10*x275);
IkReal x344=((0.00131745510055862)*x271);
IkReal x345=(gclwh8_4*x130);
IkReal x346=(gclwh14_4*x135);
IkReal x347=(gclwh4_10*x94);
IkReal x348=(gclwh6_4*x289);
IkReal x349=(gclwh7_10*x259);
IkReal x350=(gclwh5_10*x159);
IkReal x351=(gclwh13_10*x140);
IkReal x352=(gclwh6_10*x106);
IkReal x353=(gclwh12_10*x281);
IkReal x354=(gclwh4_4*x288);
IkReal x355=(gclwh7_4*x319);
IkReal x356=(rxp1_1*x95);
IkReal x357=(gclwh12_4*x283);
IkReal x358=(gclwh5_4*x226);
IkReal x359=(pp*x304);
IkReal x360=(gclwh10_9*x121);
IkReal x361=(gclwh10_9*x203);
IkReal x362=(gclwh8_9*x275);
IkReal x363=(gclwh15_6*x97);
IkReal x364=(gclwh8_6*x130);
IkReal x365=((0.00131745510055862)*x324);
IkReal x366=((0.00131745510055862)*x270);
IkReal x367=(gclwh14_6*x135);
IkReal x368=(gclwh9_9*x217);
IkReal x369=(gclwh8_9*x299);
IkReal x370=((0.00131745510055862)*x200);
IkReal x371=(gclwh9_9*x227);
IkReal x372=(gclwh15_9*x168);
IkReal x373=((0.009956846656)*x304);
IkReal x374=(gclwh14_9*x136);
IkReal x375=(gclwh7_9*x259);
IkReal x376=(rxp2_1*x178);
IkReal x377=(gclwh7_6*x319);
IkReal x378=(gclwh4_9*x94);
IkReal x379=(gclwh6_9*x106);
IkReal x380=(gclwh13_9*x140);
IkReal x381=(gclwh12_9*x281);
IkReal x382=(gclwh12_6*x283);
IkReal x383=(rxp2_0*x100);
IkReal x384=(gclwh13_6*x134);
IkReal x385=(gclwh5_9*x159);
IkReal x386=(r01*x224);
IkReal x387=(gclwh15_10*x136);
IkReal x388=(gclwh4_10*x159);
IkReal x389=((0.00131745510055862)*x189);
IkReal x390=(gclwh9_10*x275);
IkReal x391=(gclwh11_10*x121);
IkReal x392=(gclwh9_10*x299);
IkReal x393=(gclwh15_4*x135);
IkReal x394=(gclwh6_10*x259);
IkReal x395=(gclwh12_10*x140);
IkReal x396=(gclwh4_4*x226);
IkReal x397=(gclwh11_10*x203);
IkReal x398=(gclwh12_4*x134);
IkReal x399=(gclwh6_10*x86);
IkReal x400=((0.00131745510055862)*x124);
IkReal x401=(gclwh6_4*x319);
IkReal x402=(gclwh7_10*x106);
IkReal x403=(gclwh5_10*x94);
IkReal x404=((0.009956846656)*x232);
IkReal x405=(gclwh13_10*x281);
IkReal x406=(gclwh14_10*x168);
IkReal x407=(gclwh7_4*x289);
IkReal x408=(rxp1_0*x95);
IkReal x409=(gclwh10_4*x284);
IkReal x410=((0.00131745510055862)*x131);
IkReal x411=((0.009956846656)*x107);
IkReal x412=(gclwh14_4*x97);
IkReal x413=(gclwh5_4*x288);
IkReal x414=(gclwh15_6*x135);
IkReal x415=(gclwh4_9*x159);
IkReal x416=(gclwh9_6*x130);
IkReal x417=(gclwh12_9*x140);
IkReal x418=(gclwh12_6*x134);
IkReal x419=(gclwh6_9*x86);
IkReal x420=(gclwh6_9*x259);
IkReal x421=(rxp2_1*x100);
IkReal x422=((0.009956846656)*x119);
IkReal x423=(pp*x119);
IkReal x424=((0.00131745510055862)*x312);
IkReal x425=(gclwh11_9*x121);
IkReal x426=(gclwh15_9*x136);
IkReal x427=(r11*x224);
IkReal x428=(gclwh11_9*x203);
IkReal x429=(rxp2_0*x178);
IkReal x430=(gclwh7_9*x106);
IkReal x431=(gclwh8_9*x227);
IkReal x432=(gclwh7_6*x289);
IkReal x433=(gclwh10_6*x284);
IkReal x434=((0.00131745510055862)*x258);
IkReal x435=(gclwh14_6*x97);
IkReal x436=(gclwh13_9*x281);
IkReal x437=(gclwh13_6*x283);
IkReal x438=(gclwh5_9*x94);
IkReal x439=(gclwh14_9*x168);
IkReal x440=((0.009956846656)*x84);
IkReal x441=((0.0675614790019306)*x272);
IkReal x442=((0.0675614790019306)*x256);
IkReal x443=((0.000860304884491461)*x272);
IkReal x444=((0.000860304884491461)*x256);
IkReal x445=((0.0675614790019306)*x260);
IkReal x446=((0.0675614790019306)*x96);
IkReal x447=((0.000860304884491461)*x260);
IkReal x448=((0.000860304884491461)*x96);
IkReal x449=(gclwh15_8*x137);
IkReal x450=(gclwh14_8*x192);
IkReal x451=((0.00814714965017998)*x190);
IkReal x452=((0.00814714965017998)*x255);
IkReal x453=((0.00814714965017998)*x138);
IkReal x454=((0.00814714965017998)*x230);
IkReal x455=(rxp1_0*x141);
IkReal x456=((0.00814714965017998)*x165);
IkReal x457=((0.16329571174096)*x197);
IkReal x458=((0.00814714965017998)*x322);
IkReal x459=(gclwh4_8*x252);
IkReal x460=(gclwh5_8*x142);
IkReal x461=((2.0)*npz*py);
IkReal x462=(gclwh11_8*npz*py);
IkReal x463=(r10*x175);
IkReal x464=((2.0)*x282);
IkReal x465=(x175*x202);
IkReal x466=(x175*x191);
IkReal x467=(x175*x303);
IkReal x468=(x175*x176);
IkReal x469=(x175*x193);
IkReal x470=(x175*x279);
IkReal x471=(x175*x221);
IkReal x472=(x120*x175);
IkReal x473=(x111*x155);
IkReal x474=(x123*x271);
IkReal x475=(x123*x302);
IkReal x476=(x101*x82);
IkReal x477=(x111*x216);
IkReal x478=(gclwh11_4*r12*x123);
IkReal x479=(gclwh8_4*r00*x123);
IkReal x480=(x180*x82);
IkReal x481=((1.0)*gclwh6_10*x88);
IkReal x482=(gclwh11_10*x461);
IkReal x483=(x185*x282);
IkReal x484=(x117*x276);
IkReal x485=((2.0)*gclwh8_10*x173);
IkReal x486=((2.0)*gclwh10_10*x161);
IkReal x487=(x116*x277);
IkReal x488=(x116*x154);
IkReal x489=(x181*x86);
IkReal x490=(x298*x86);
IkReal x491=(x276*x307);
IkReal x492=(x222*x88);
IkReal x493=(x123*x270);
IkReal x494=(x111*x114);
IkReal x495=(x118*x82);
IkReal x496=(x111*x269);
IkReal x497=(x123*x324);
IkReal x498=(x249*x82);
IkReal x499=(gclwh8_6*r00*x123);
IkReal x500=(x123*x200);
IkReal x501=(x263*x276);
IkReal x502=(x173*x179);
IkReal x503=((1.0)*gclwh6_9*x88);
IkReal x504=(x268*x88);
IkReal x505=(gclwh9_9*x464);
IkReal x506=(x261*x276);
IkReal x507=(x188*x86);
IkReal x508=((2.0)*gclwh10_9*x161);
IkReal x509=(gclwh11_9*x461);
IkReal x510=(x116*x273);
IkReal x511=(x215*x86);
IkReal x512=(x116*x225);
IkReal x513=(x123*x124);
IkReal x514=(gclwh8_10*x464);
IkReal x515=(gclwh10_10*x461);
IkReal x516=(x101*x111);
IkReal x517=(x276*x277);
IkReal x518=(x154*x276);
IkReal x519=(x123*x189);
IkReal x520=(x111*x180);
IkReal x521=(x222*x86);
IkReal x522=((2.0)*gclwh11_10*x161);
IkReal x523=(x173*x185);
IkReal x524=(x103*x107);
IkReal x525=(x155*x82);
IkReal x526=(x116*x117);
IkReal x527=(gclwh10_4*r12*x123);
IkReal x528=(x103*x232);
IkReal x529=(x216*x82);
IkReal x530=(x298*x88);
IkReal x531=(x116*x307);
IkReal x532=(x123*x131);
IkReal x533=(x181*x88);
IkReal x534=(x123*x312);
IkReal x535=(x179*x282);
IkReal x536=(x268*x86);
IkReal x537=(gclwh9_6*r00*x123);
IkReal x538=(x111*x118);
IkReal x539=(gclwh10_9*x461);
IkReal x540=(x111*x249);
IkReal x541=(x273*x276);
IkReal x542=(x225*x276);
IkReal x543=(x116*x263);
IkReal x544=((2.0)*gclwh9_9*x173);
IkReal x545=(x116*x261);
IkReal x546=(x114*x82);
IkReal x547=(gclwh8_9*r10*x103);
IkReal x548=(x188*x88);
IkReal x549=(gclwh10_6*r12*x123);
IkReal x550=(x269*x82);
IkReal x551=(x123*x258);
IkReal x552=((2.0)*gclwh11_9*x161);
IkReal x553=(x215*x88);
IkReal x554=(x103*x84);
IkReal x555=(x190*x238);
IkReal x556=((0.81824597)*gclwh10_8*x203);
IkReal x557=(x138*x238);
IkReal x558=(x286*x82);
IkReal x559=(x111*x83);
IkReal x560=(x230*x238);
IkReal x561=(gclwh11_8*npz*x239);
IkReal x562=(x220*x86);
IkReal x563=(x145*x146);
IkReal x564=(x239*x240);
IkReal x565=(x229*x88);
IkReal x566=(x145*x163);
IkReal x567=((((0.07838252126096)*x202))+(((0.07838252126096)*x191)));
IkReal x568=((((0.07838252126096)*x303))+(((0.07838252126096)*x176)));
IkReal x569=((((0.07838252126096)*x193))+(((0.07838252126096)*x279)));
IkReal x570=((((0.07838252126096)*x120))+(((0.07838252126096)*x221)));
IkReal x571=(x444+x443);
IkReal x572=(x448+x447);
IkReal x573=(x441+x442);
IkReal x574=(x445+x446);
IkReal x575=(((x256*x293))+((x313*x88)));
IkReal x576=(((x86*x98))+((x217*x218)));
IkReal x577=(((x218*x299))+((x88*x98)));
IkReal x578=(x466+x465);
IkReal x579=(x471+x472);
IkReal x580=((-0.1323165)+((x313*x86))+((x293*x99)));
IkReal x581=(x469+x470+x77);
IkReal x582=((-0.1323165)+x468+x467+py);
IkReal x583=((((0.0675614790019306)*x92))+(((-1.0)*x576))+x582+(((0.0675614790019306)*x264)));
IkReal x584=((((0.000860304884491461)*x264))+(((0.000860304884491461)*x92))+(((-1.0)*x576))+x582);
IkReal x585=((((-0.0675614790019306)*x99))+(((-0.0675614790019306)*x170))+x580+(((-1.0)*x581)));
IkReal x586=((((-0.000860304884491461)*x170))+x580+(((-0.000860304884491461)*x99))+(((-1.0)*x581)));
IkReal x587=(x458+x459+x456+x457+x455+x460+x566+x564+x565+x562+x563+x561);
IkReal x588=(x449+x454+x452+x453+x450+x451+x559+x558+x557+x556+x555+x560);
IkReal x589=(x339+x338+x333+x332+x331+x337+x336+x335+x334+x342+x343+x340+x341+x346+x344+x345+x480+x474+x475+x476+x477+x473+x478+x479);
IkReal x590=(x359+x374+x373+x372+x371+x370+x368+x369+x360+x361+x362+x363+x364+x365+x366+x367+x498+x499+x493+x496+x497+x494+x495+x500);
IkReal x591=(x387+x388+x389+x395+x394+x397+x396+x391+x390+x393+x392+x399+x398+x401+x400+x520+x521+x519+x518+x517+x516+x515+x514+x513);
IkReal x592=(x416+x417+x414+x415+x418+x419+x428+x427+x426+x425+x424+x423+x422+x421+x420+x540+x541+x542+x535+x534+x537+x536+x539+x538);
IkReal x593=(x386+x384+x385+x382+x383+x380+x381+x379+x378+x377+x376+x375+x508+x509+x501+x502+x503+x504+x505+x506+x507+x512+x511+x510);
IkReal x594=(x403+x402+x405+x404+x407+x406+x409+x408+x412+x413+x410+x411+x531+x530+x533+x532+x522+x523+x526+x527+x524+x525+x528+x529);
IkReal x595=(x351+x350+x353+x352+x355+x354+x357+x356+x358+x347+x348+x349+x489+x488+x481+x483+x482+x485+x484+x487+x486+x492+x490+x491);
IkReal x596=(x429+x438+x439+x430+x431+x432+x433+x434+x435+x436+x437+x440+x553+x552+x551+x550+x554+x544+x545+x546+x547+x543+x548+x549);
op[0]=(x80+(((-1.0)*x575))+x578+x573);
op[1]=x583;
op[2]=x567;
op[3]=x568;
op[4]=(x78+(((-1.0)*x575))+x578+x571);
op[5]=x584;
op[6]=x585;
op[7]=(x79+(((-1.0)*x577))+x579+x574);
op[8]=((-1.0)*x569);
op[9]=x570;
op[10]=x586;
op[11]=(x81+(((-1.0)*x577))+x579+x572);
op[12]=((-0.21653488577901)+(((-1.0)*x595))+x587+x589+(((-1.0)*x588)));
op[13]=((-0.652018811248991)+((rxp1_1*x248))+(((-1.0)*gclwh14_11*x192))+(((-1.0)*x593))+((gclwh5_11*x142))+x590+(((-1.0)*gclwh15_11*x137))+((gclwh4_11*x252)));
op[14]=(((gclwh15_12*x228))+(((-1.0)*gclwh12_13*x300))+((gclwh14_12*x280))+(((-1.0)*gclwh6_12*x250))+((x111*x160))+(((-1.0)*gclwh5_12*x265))+(((-1.0)*gclwh4_12*x115))+(((-1.0)*gclwh5_13*x196))+(((-1.0)*gclwh6_13*x321))+(((-1.0)*x87*x88))+(((0.15676504252192)*x278))+((x111*x320))+(((-1.0)*x243*x88))+(((-0.0414852034977033)*x128))+(((-1.0)*rxp1_1*x169))+(((-1.0)*rxp1_1*x198))+((gclwh14_13*x93))+(((-1.0)*gclwh4_13*x267)));
op[15]=(((gclwh5_14*x196))+(((-1.0)*x251*x86))+((x111*x177))+(((-1.0)*r11*x122))+(((-1.0)*gclwh14_14*x93))+(((-1.0)*gclwh6_15*x250))+((gclwh4_14*x267))+((x195*x88))+((x291*x82))+((rxp1_0*x211))+((gclwh6_14*x321))+((gclwh15_15*x228))+(((-1.0)*gclwh5_15*x265))+(((-1.0)*rxp1_0*x327))+(((0.15676504252192)*x186))+(((-1.0)*gclwh4_15*x115))+(((-1.0)*x88*x89))+(((-1.0)*x111*x148))+(((-1.0)*rxp1_1*x315))+((gclwh14_15*x280))+(((-0.15676504252192)*x245)));
op[16]=((-0.00865985823099)+(((-1.0)*x206*x82))+((gclwh5_8*x274))+((rxp1_0*x323))+((x183*x240))+(((-1.0)*x109*x190))+((gclwh6_8*x212))+(((0.000325828148676344)*x165))+(((-0.000325828148676344)*x190))+(((-0.000325828148676344)*x230))+(((-1.0)*gclwh14_8*x242))+(((-1.0)*x109*x255))+((gclwh11_8*npz*x183))+(((-0.000325828148676344)*x138))+(((-1.0)*x595))+((x146*x172))+((x164*x88))+(((-1.0)*gclwh15_8*x151))+x589+(((0.06544806)*gclwh10_8*x161))+((gclwh4_8*x85))+(((-1.0)*x109*x230))+(((-1.0)*x109*x138))+((x156*x86))+(((-1.0)*x111*x150))+(((0.00653066921904)*x197))+(((-0.000325828148676344)*x255)));
op[17]=((0.0164367940328091)+((gclwh5_11*x274))+(((-1.0)*gclwh15_11*x151))+((gclwh4_11*x85))+((rxp1_1*x91))+(((-1.0)*x593))+(((-1.0)*gclwh14_11*x242))+x590);
op[18]=((-0.652018811248991)+((gclwh11_8*npz*x145))+((x220*x88))+(((-1.0)*x104*x238))+(((-1.0)*gclwh4_8*x142))+((x171*x238))+((x82*x83))+(((0.16329571174096)*x152))+(((-1.0)*x229*x86))+((gclwh14_8*x137))+(((0.00814714965017998)*x328))+(((0.00814714965017998)*x171))+((x145*x240))+(((0.16329571174096)*x204))+(((0.00814714965017998)*x153))+(((-1.0)*x594))+((x153*x238))+(((-0.00814714965017998)*x254))+(((-1.0)*rxp1_1*x141))+(((-1.0)*x238*x254))+(((-1.0)*gclwh15_8*x192))+(((-1.0)*x146*x239))+x591+(((-0.00814714965017998)*x90))+(((-1.0)*x163*x239))+(((-0.00814714965017998)*x104))+(((-1.0)*x111*x286)));
op[19]=((0.21653488577901)+(((-1.0)*x596))+(((-1.0)*gclwh4_11*x142))+((gclwh14_11*x137))+((gclwh5_11*x252))+x592+(((-1.0)*gclwh15_11*x192))+((rxp1_0*x248)));
op[20]=((((-1.0)*rxp1_0*x198))+(((-1.0)*x160*x82))+((gclwh15_13*x93))+(((-1.0)*gclwh14_12*x228))+(((-1.0)*gclwh14_13*x287))+((gclwh15_12*x280))+(((-1.0)*x320*x82))+((x243*x86))+(((0.00206977977290741)*x308))+((x86*x87))+(((-1.0)*gclwh5_13*x267))+(((0.15676504252192)*x157))+(((0.0414852034977033)*x132))+((gclwh4_13*x196))+(((-1.0)*gclwh5_12*x115))+(((0.00782132150150363)*x209))+(((-1.0)*rxp1_0*x169))+((gclwh4_12*x265)));
op[21]=(((rxp1_1*x327))+(((-1.0)*gclwh15_14*x93))+(((0.00206977977290741)*x295))+(((-1.0)*x251*x88))+(((0.15676504252192)*x102))+((x148*x82))+(((-1.0)*gclwh14_15*x228))+((x86*x89))+(((-1.0)*gclwh4_14*x196))+(((-1.0)*rxp1_0*x315))+(((-1.0)*x177*x82))+(((0.0414852034977033)*x266))+(((-1.0)*gclwh5_15*x115))+(((-1.0)*x195*x86))+(((-0.00782132150150363)*x301))+((gclwh14_14*x287))+((x111*x291))+(((-1.0)*rxp1_1*x211))+((gclwh13_14*x300))+(((-1.0)*r01*x122))+((gclwh4_15*x265)));
op[22]=((0.0164367940328091)+(((-1.0)*x104*x109))+(((-1.0)*gclwh4_8*x274))+(((-1.0)*x163*x183))+((x150*x82))+(((-0.000325828148676344)*x90))+(((-0.000325828148676344)*x104))+(((-1.0)*x164*x86))+(((-1.0)*gclwh15_8*x242))+(((-1.0)*x146*x183))+(((0.000325828148676344)*x171))+(((-1.0)*x109*x254))+(((0.000325828148676344)*x153))+(((-1.0)*x594))+(((-1.0)*rxp1_1*x323))+(((-1.0)*x111*x206))+((x172*x240))+x591+((x109*x153))+((gclwh5_8*x85))+((gclwh14_8*x151))+((gclwh7_8*x212))+((x156*x88))+(((0.06544806)*gclwh11_8*x161))+((x109*x171))+(((0.00653066921904)*x204))+(((-0.000325828148676344)*x254)));
op[23]=((0.00865985823099)+((rxp1_0*x91))+((gclwh5_11*x85))+(((-1.0)*x596))+x592+(((-1.0)*gclwh4_11*x274))+(((-1.0)*gclwh15_11*x242))+((gclwh14_11*x151)));
op[24]=((((0.16329571174096)*x202))+(((0.16329571174096)*x191)));
op[25]=((((0.16329571174096)*x176))+(((0.16329571174096)*x303)));
op[26]=-1.57104388;
op[27]=0;
op[28]=((((0.00653066921904)*x191))+(((0.00653066921904)*x202)));
op[29]=((((0.00653066921904)*x303))+(((0.00653066921904)*x176)));
op[30]=((((-0.16329571174096)*x193))+(((-0.16329571174096)*x279)));
op[31]=((((0.16329571174096)*x120))+(((0.16329571174096)*x221)));
op[32]=0;
op[33]=1.57104388;
op[34]=((((-0.00653066921904)*x193))+(((-0.00653066921904)*x279)));
op[35]=((((0.00653066921904)*x120))+(((0.00653066921904)*x221)));
op[36]=((((-1.0)*x325*x88))+((x111*x257))+(((-1.0)*gclwh12_13*x105))+(((-1.0)*gclwh4_13*x219))+(((-1.0)*gclwh6_12*x182))+((x111*x112))+((gclwh14_13*x246))+(((-1.0)*x253*x88))+((gclwh14_12*x316))+(((-1.0)*gclwh6_13*x237))+(((-0.32659142348192)*x247))+(((-1.0)*rxp2_1*x294))+(((-1.0)*gclwh4_12*x310))+((gclwh15_12*x236))+(((-1.0)*gclwh13_12*x166))+(((0.32659142348192)*x278))+(((-1.0)*gclwh5_13*x108))+(((-0.0864268681702909)*x128)));
op[37]=((((-1.0)*gclwh7_15*x213))+((gclwh12_14*x105))+((gclwh6_14*x237))+((gclwh15_15*x236))+((x306*x82))+(((-1.0)*gclwh6_15*x182))+(((-1.0)*x184*x86))+(((-1.0)*x111*x235))+(((-1.0)*gclwh5_15*x330))+(((-0.32659142348192)*x245))+(((-1.0)*gclwh13_15*x166))+((x223*x88))+((x111*x208))+((gclwh4_14*x219))+(((-0.32659142348192)*x167))+((gclwh14_15*x316))+((gclwh5_14*x108))+(((-1.0)*gclwh12_15*x233))+(((-1.0)*x149*x88))+(((0.32659142348192)*x186))+(((-1.0)*rxp2_0*x194)));
op[38]=((0.41575005509604)+((x190*x214))+((x162*x82))+(((-3.14208776)*gclwh10_8*x161))+(((0.0156426430030073)*x138))+(((0.0156426430030073)*x255))+(((-1.0)*gclwh11_8*npz*x205))+((x138*x214))+(((-0.31353008504384)*x197))+(((0.0156426430030073)*x190))+(((-1.0)*gclwh12_8*x311))+(((-1.0)*gclwh4_8*x297))+(((-3.14208776)*px*x146))+(((-1.0)*x110*x86))+(((-1.0)*x199*x88))+((x111*x201))+((x214*x230))+(((1.57104388)*gclwh10_8*x203))+(((-1.0)*x174*x282))+(((-0.0156426430030073)*x165))+(((-0.0156426430030073)*x322))+((gclwh14_8*x314))+(((0.0156426430030073)*x230))+(((-1.0)*gclwh5_8*x207))+((gclwh15_8*x139)));
op[39]=(((gclwh15_11*x139))+(((-1.0)*gclwh5_11*x207))+(((-1.0)*gclwh13_11*x318))+(((-1.0)*gclwh4_11*x297))+((gclwh14_11*x314)));
op[40]=((((-1.0)*gclwh13_12*x129))+((gclwh15_12*x144))+(((-0.01306133843808)*x247))+(((-1.0)*gclwh12_13*x210))+(((-1.0)*x262*x88))+(((-1.0)*gclwh6_12*x126))+((x111*x143))+((x111*x147))+(((-1.0)*gclwh5_12*x292))+(((-1.0)*gclwh4_13*x234))+(((-1.0)*gclwh6_13*x290))+(((-1.0)*gclwh4_12*x158))+((gclwh14_13*x296))+((gclwh15_13*x113))+(((-1.0)*gclwh5_13*x127))+((gclwh14_12*x231))+(((-0.00345646117488442)*x128))+(((-1.0)*x326*x88)));
op[41]=(((x111*x125))+((x187*x88))+((gclwh4_14*x234))+(((-1.0)*x244*x88))+((gclwh6_14*x290))+(((-1.0)*gclwh6_15*x126))+(((-0.01306133843808)*x167))+((gclwh14_15*x231))+(((-1.0)*gclwh4_15*x158))+((gclwh12_14*x210))+(((-1.0)*x305*x86))+(((-0.000172449760937334)*gclwh7_15*r11))+(((-1.0)*gclwh12_15*x241))+((gclwh15_15*x144))+(((-1.0)*gclwh5_15*x292))+(((-1.0)*gclwh13_15*x129))+(((0.01306133843808)*x186))+((gclwh5_14*x127))+(((-1.0)*gclwh15_14*x113))+((x309*x82))+(((-1.0)*x111*x285)));
op[42]=((((0.32659142348192)*x157))+(((-1.0)*gclwh13_12*x233))+(((-1.0)*rxp2_0*x294))+(((-1.0)*gclwh5_13*x219))+((gclwh4_13*x108))+((gclwh15_12*x316))+(((-1.0)*x112*x82))+((gclwh15_13*x246))+(((-1.0)*gclwh13_13*x105))+(((-1.0)*gclwh14_13*x329))+(((-1.0)*x257*x82))+(((-1.0)*gclwh14_12*x236))+((x253*x86))+((gclwh4_12*x330))+(((0.0864268681702909)*x132))+((gclwh6_12*x213))+((x325*x86))+(((0.01629429930036)*x209)));
op[43]=(((x111*x306))+(((-1.0)*x208*x82))+(((-0.01629429930036)*x301))+((x235*x82))+((gclwh12_15*x166))+((gclwh13_14*x105))+(((-1.0)*x184*x88))+((rxp2_1*x194))+((gclwh14_14*x329))+(((-1.0)*x223*x86))+(((0.32659142348192)*x102))+(((-1.0)*gclwh5_15*x310))+(((-1.0)*gclwh4_14*x108))+((x149*x86))+(((-1.0)*gclwh15_14*x246))+(((-1.0)*gclwh14_15*x236))+(((-0.32659142348192)*x317))+((gclwh6_15*x213))+(((-1.0)*gclwh7_15*x182))+(((0.0864268681702909)*x266))+(((-1.0)*gclwh13_15*x233)));
op[44]=((((-1.0)*gclwh14_8*x139))+((gclwh4_8*x207))+((x199*x86))+(((0.0156426430030073)*x254))+(((0.0156426430030073)*x104))+(((-1.0)*x153*x214))+((x111*x162))+((x214*x254))+((gclwh15_8*x314))+(((-1.0)*x171*x214))+(((0.0156426430030073)*x90))+(((-1.0)*x110*x88))+(((-1.0)*x201*x82))+(((-0.31353008504384)*x152))+(((-0.31353008504384)*x204))+(((-0.0156426430030073)*x153))+(((-3.14208776)*gclwh11_8*x161))+(((-0.0156426430030073)*x328))+((x146*x205))+((x104*x214))+((gclwh12_8*x318))+(((-0.0156426430030073)*x171))+(((-1.0)*x173*x174))+((x163*x205)));
op[45]=((-0.41575005509604)+(((-1.0)*gclwh14_11*x139))+(((-1.0)*gclwh5_11*x297))+((gclwh15_11*x314))+((gclwh4_11*x207))+(((-1.0)*gclwh13_11*x311)));
op[46]=((((-1.0)*x147*x82))+(((0.01306133843808)*x157))+(((-1.0)*gclwh5_12*x158))+(((-1.0)*gclwh14_13*x113))+(((-1.0)*gclwh13_12*x241))+(((-1.0)*x143*x82))+((gclwh4_12*x292))+(((-1.0)*gclwh14_12*x144))+((gclwh15_13*x296))+((gclwh15_12*x231))+((gclwh12_12*x129))+(((-1.0)*gclwh5_13*x234))+((x326*x86))+(((0.000651656297352687)*x209))+(((-1.0)*gclwh13_13*x210))+(((0.000172449760937334)*x308))+((gclwh4_13*x127))+((x262*x86)));
op[47]=(((x111*x309))+(((-1.0)*gclwh7_15*x126))+(((-1.0)*gclwh5_15*x158))+(((-1.0)*x125*x82))+(((-0.01306133843808)*x317))+((gclwh4_15*x292))+((gclwh15_15*x231))+(((-1.0)*gclwh13_15*x241))+((gclwh14_14*x113))+(((0.01306133843808)*x102))+(((-1.0)*gclwh15_14*x296))+((gclwh12_15*x129))+(((-1.0)*x305*x88))+((x285*x82))+(((0.000172449760937334)*x295))+(((-1.0)*gclwh4_14*x127))+(((-1.0)*x187*x86))+((x244*x86))+(((-1.0)*gclwh14_15*x144))+(((-0.000651656297352687)*x301))+((gclwh13_14*x210)));
op[48]=(x79+(((-1.0)*x575))+x578+x573);
op[49]=x583;
op[50]=((-1.0)*x567);
op[51]=((-1.0)*x568);
op[52]=(x81+(((-1.0)*x575))+x578+x571);
op[53]=x584;
op[54]=x585;
op[55]=(x80+(((-1.0)*x577))+x579+x574);
op[56]=x569;
op[57]=((-1.0)*x570);
op[58]=x586;
op[59]=(x78+(((-1.0)*x577))+x579+x572);
op[60]=((0.21653488577901)+(((-1.0)*x595))+x588+x589+(((-1.0)*x587)));
IkReal x597=(npy*py);
IkReal x598=(gclwh10_9*r12);
IkReal x599=((0.009956846656)*r01);
IkReal x600=((0.00653066921904)*rxp2_0);
IkReal x601=(pp*r11);
IkReal x602=((0.78552194)*gclwh6_13);
IkReal x603=(pp*r01);
IkReal x604=((0.20787502754802)*gclwh6_15);
IkReal x605=(gclwh13_11*rxp1_1);
IkReal x606=((0.15676504252192)*rxp0_0);
IkReal x607=((0.199568)*rxp2_0);
IkReal x608=((0.026406139272)*gclwh13_4);
IkReal x609=((0.026406139272)*rxp0_1);
IkReal x610=(npz*py);
IkReal x611=((2.0)*gclwh10_9);
IkReal x612=((0.026406139272)*gclwh4_6);
IkReal x613=((0.264633)*gclwh7_4);
IkReal x614=((1.0)*pp);
IkReal x615=(gclwh11_8*r02);
IkReal x616=(gclwh8_10*r10);
IkReal x617=((0.03272403)*pp);
IkReal x618=((2.0)*gclwh6_9);
IkReal x619=(npy*px);
IkReal x620=((0.0414852034977033)*rxp2_0);
IkReal x621=((0.264633)*px);
IkReal x622=((0.264633)*gclwh7_6);
IkReal x623=(gclwh9_9*r00);
IkReal x624=(gclwh10_9*r02);
IkReal x625=((0.00206977977290741)*gclwh7_15);
IkReal x626=((0.1323165)*pp);
IkReal x627=(gclwh9_4*r00);
IkReal x628=(gclwh11_8*r12);
IkReal x629=((0.0414852034977033)*rxp1_1);
IkReal x630=(gclwh11_10*r12);
IkReal x631=((0.026406139272)*rxp1_1);
IkReal x632=(gclwh10_8*r12);
IkReal x633=((0.199568)*rxp0_0);
IkReal x634=((0.16329571174096)*rxp0_1);
IkReal x635=((0.199568)*rxp1_1);
IkReal x636=(gclwh12_8*rxp1_1);
IkReal x637=((1.57104388)*gclwh6_14);
IkReal x638=((0.06544806)*gclwh6_8);
IkReal x639=((0.00653066921904)*rxp0_1);
IkReal x640=(gclwh8_4*npx);
IkReal x641=((2.0)*gclwh6_10);
IkReal x642=((0.03272403)*gclwh7_8);
IkReal x643=((0.026406139272)*rxp0_0);
IkReal x644=((0.199568)*rxp2_1);
IkReal x645=((0.41575005509604)*gclwh6_12);
IkReal x646=((0.00131745510055862)*r00);
IkReal x647=((0.03272403)*gclwh6_8);
IkReal x648=((0.15676504252192)*gclwh13_13);
IkReal x649=(gclwh8_8*r10);
IkReal x650=(npx*px);
IkReal x651=((0.06544806)*gclwh8_8);
IkReal x652=((0.41575005509604)*gclwh6_15);
IkReal x653=((0.026406139272)*gclwh5_6);
IkReal x654=((2.0)*gclwh8_9);
IkReal x655=((2.0)*gclwh7_10);
IkReal x656=((0.15676504252192)*rxp1_1);
IkReal x657=((0.15676504252192)*gclwh5_14);
IkReal x658=((1.0)*gclwh7_10);
IkReal x659=((0.06544806)*gclwh10_8);
IkReal x660=((2.0)*gclwh9_10);
IkReal x661=((1.0)*gclwh7_9);
IkReal x662=(gclwh11_4*r02);
IkReal x663=((0.199568)*rxp0_1);
IkReal x664=((0.16329571174096)*rxp0_0);
IkReal x665=((0.78552194)*gclwh6_14);
IkReal x666=(npz*px);
IkReal x667=((0.0414852034977033)*rxp1_0);
IkReal x668=(gclwh11_6*r12);
IkReal x669=(pp*r02);
IkReal x670=((0.16329571174096)*rxp2_0);
IkReal x671=((0.00653066921904)*rxp1_0);
IkReal x672=((0.06544806)*gclwh7_8);
IkReal x673=((0.00782132150150363)*gclwh6_13);
IkReal x674=((0.15676504252192)*rxp2_1);
IkReal x675=((0.000325828148676344)*gclwh7_8);
IkReal x676=((0.06544806)*gclwh11_8);
IkReal x677=((0.1323165)*gclwh7_6);
IkReal x678=((0.264633)*gclwh6_4);
IkReal x679=((0.1323165)*gclwh6_4);
IkReal x680=((0.00131745510055862)*gclwh6_6);
IkReal x681=((0.026406139272)*rxp2_1);
IkReal x682=((0.009956846656)*r10);
IkReal x683=((0.0414852034977033)*rxp0_1);
IkReal x684=(gclwh6_8*r11);
IkReal x685=(gclwh8_8*r00);
IkReal x686=((0.009956846656)*gclwh10_10);
IkReal x687=(gclwh9_10*pp);
IkReal x688=(npx*py);
IkReal x689=((0.81824597)*pp);
IkReal x690=((0.009956846656)*r02);
IkReal x691=((0.00653066921904)*rxp0_0);
IkReal x692=((0.20787502754802)*gclwh6_12);
IkReal x693=((0.15676504252192)*rxp0_1);
IkReal x694=((2.0)*gclwh7_9);
IkReal x695=((0.00206977977290741)*r01);
IkReal x696=((0.20787502754802)*gclwh7_15);
IkReal x697=((0.000325828148676344)*gclwh9_8);
IkReal x698=(gclwh8_4*r10);
IkReal x699=(gclwh9_8*r00);
IkReal x700=(gclwh10_8*r02);
IkReal x701=(gclwh8_6*r10);
IkReal x702=((0.009956846656)*r11);
IkReal x703=((0.1323165)*gclwh6_6);
IkReal x704=((0.0414852034977033)*rxp2_1);
IkReal x705=((0.0414852034977033)*rxp0_0);
IkReal x706=((0.15676504252192)*rxp2_0);
IkReal x707=((0.264633)*gclwh6_6);
IkReal x708=(gclwh9_6*r10);
IkReal x709=(gclwh9_4*r10);
IkReal x710=(gclwh4_11*rxp2_1);
IkReal x711=((0.009956846656)*r00);
IkReal x712=((0.16329571174096)*rxp2_1);
IkReal x713=((0.199568)*rxp1_0);
IkReal x714=((0.026406139272)*rxp1_0);
IkReal x715=((0.00131745510055862)*r12);
IkReal x716=((0.00206977977290741)*r11);
IkReal x717=((0.026406139272)*rxp2_0);
IkReal x718=((0.00131745510055862)*r01);
IkReal x719=((0.41575005509604)*gclwh7_15);
IkReal x720=((0.1323165)*gclwh7_4);
IkReal x721=((0.15676504252192)*rxp1_0);
IkReal x722=(pp*r00);
IkReal x723=(gclwh10_4*r02);
IkReal x724=(gclwh11_9*r12);
IkReal x725=((0.16329571174096)*rxp1_0);
IkReal x726=(gclwh11_6*r02);
IkReal x727=((0.06544806)*gclwh9_8);
IkReal x728=((0.00131745510055862)*r11);
IkReal x729=((1.57104388)*gclwh6_13);
IkReal x730=(gclwh10_6*r02);
IkReal x731=((0.00782132150150363)*gclwh6_14);
IkReal x732=((0.00653066921904)*rxp2_1);
IkReal x733=(pp*x724);
IkReal x734=((0.009956846656)*x624);
IkReal x735=(pp*x624);
IkReal x736=(gclwh8_9*x711);
IkReal x737=(gclwh15_6*x609);
IkReal x738=(gclwh8_6*x646);
IkReal x739=((0.00131745510055862)*x730);
IkReal x740=((0.00131745510055862)*x708);
IkReal x741=(gclwh14_6*x643);
IkReal x742=(gclwh9_9*pp*r10);
IkReal x743=(gclwh8_9*x722);
IkReal x744=((0.00131745510055862)*x668);
IkReal x745=(gclwh9_9*x682);
IkReal x746=(gclwh15_9*x663);
IkReal x747=((0.009956846656)*x724);
IkReal x748=(gclwh14_9*x633);
IkReal x749=(gclwh7_9*x702);
IkReal x750=(rxp2_1*x653);
IkReal x751=(gclwh7_6*x728);
IkReal x752=(gclwh4_9*x607);
IkReal x753=(gclwh6_9*x599);
IkReal x754=(gclwh13_9*x635);
IkReal x755=(gclwh12_9*x713);
IkReal x756=(gclwh12_6*x714);
IkReal x757=(rxp2_0*x612);
IkReal x758=(gclwh13_6*x631);
IkReal x759=(gclwh5_9*x644);
IkReal x760=(r01*x680);
IkReal x761=(gclwh15_10*x633);
IkReal x762=(gclwh4_10*x644);
IkReal x763=((0.00131745510055862)*x662);
IkReal x764=(gclwh9_10*x711);
IkReal x765=(gclwh11_10*x690);
IkReal x766=(r00*x687);
IkReal x767=(gclwh15_4*x643);
IkReal x768=(gclwh6_10*x702);
IkReal x769=(gclwh12_10*x635);
IkReal x770=(gclwh4_4*x681);
IkReal x771=(gclwh11_10*x669);
IkReal x772=(gclwh12_4*x631);
IkReal x773=(gclwh6_10*x601);
IkReal x774=((0.00131745510055862)*x627);
IkReal x775=(gclwh6_4*x728);
IkReal x776=(gclwh7_10*x599);
IkReal x777=(gclwh5_10*x607);
IkReal x778=(r12*x686);
IkReal x779=(gclwh13_10*x713);
IkReal x780=(gclwh14_10*x663);
IkReal x781=(gclwh7_4*x718);
IkReal x782=(rxp1_0*x608);
IkReal x783=(gclwh10_4*x715);
IkReal x784=((0.00131745510055862)*x698);
IkReal x785=((0.009956846656)*x616);
IkReal x786=(gclwh14_4*x609);
IkReal x787=(gclwh5_4*x717);
IkReal x788=(gclwh15_6*x643);
IkReal x789=(gclwh4_9*x644);
IkReal x790=(gclwh9_6*x646);
IkReal x791=(gclwh12_9*x635);
IkReal x792=(gclwh12_6*x631);
IkReal x793=(gclwh6_9*x601);
IkReal x794=(gclwh6_9*x702);
IkReal x795=(rxp2_1*x612);
IkReal x796=((0.009956846656)*x623);
IkReal x797=(pp*x623);
IkReal x798=((0.00131745510055862)*x726);
IkReal x799=(gclwh11_9*x690);
IkReal x800=(gclwh15_9*x633);
IkReal x801=(r11*x680);
IkReal x802=(gclwh11_9*x669);
IkReal x803=(rxp2_0*x653);
IkReal x804=(gclwh7_9*x599);
IkReal x805=(gclwh8_9*x682);
IkReal x806=(gclwh7_6*x718);
IkReal x807=(gclwh10_6*x715);
IkReal x808=((0.00131745510055862)*x701);
IkReal x809=(gclwh14_6*x609);
IkReal x810=(gclwh13_9*x713);
IkReal x811=(gclwh13_6*x714);
IkReal x812=(gclwh5_9*x607);
IkReal x813=(gclwh14_9*x663);
IkReal x814=((0.009956846656)*x598);
IkReal x815=((2.0)*x666);
IkReal x816=((2.0)*x688);
IkReal x817=(x626*x708);
IkReal x818=(x618*x619);
IkReal x819=(x597*x622);
IkReal x820=(x619*x707);
IkReal x821=(x626*x730);
IkReal x822=(x597*x694);
IkReal x823=(gclwh8_6*r00*x626);
IkReal x824=(x626*x668);
IkReal x825=((0.264633)*gclwh11_6*x610);
IkReal x826=(x650*x654);
IkReal x827=((1.0)*gclwh6_9*x603);
IkReal x828=(x603*x703);
IkReal x829=(gclwh9_9*x816);
IkReal x830=((0.264633)*gclwh9_6*x688);
IkReal x831=(x601*x661);
IkReal x832=(x611*x666);
IkReal x833=((2.0)*gclwh11_9*x610);
IkReal x834=(gclwh8_6*npx*x621);
IkReal x835=(x601*x677);
IkReal x836=(gclwh10_6*npz*x621);
IkReal x837=(x626*x627);
IkReal x838=(gclwh8_10*x816);
IkReal x839=((2.0)*gclwh10_10*x610);
IkReal x840=(x613*x619);
IkReal x841=((0.264633)*gclwh10_4*x610);
IkReal x842=((0.264633)*py*x640);
IkReal x843=(x626*x662);
IkReal x844=(x619*x655);
IkReal x845=(x601*x679);
IkReal x846=(gclwh11_10*x815);
IkReal x847=(x650*x660);
IkReal x848=(x614*x616);
IkReal x849=(x597*x641);
IkReal x850=(gclwh11_4*npz*x621);
IkReal x851=(gclwh10_4*r12*x626);
IkReal x852=(gclwh10_10*r12*x614);
IkReal x853=(x597*x678);
IkReal x854=(x603*x720);
IkReal x855=(gclwh9_4*npx*x621);
IkReal x856=(x626*x698);
IkReal x857=(x603*x658);
IkReal x858=(x626*x726);
IkReal x859=(x654*x688);
IkReal x860=(x601*x703);
IkReal x861=(gclwh9_6*r00*x626);
IkReal x862=(x619*x622);
IkReal x863=(x610*x611);
IkReal x864=(x619*x694);
IkReal x865=((0.264633)*gclwh8_6*x688);
IkReal x866=((0.264633)*gclwh10_6*x610);
IkReal x867=(gclwh11_6*npz*x621);
IkReal x868=((2.0)*gclwh9_9*x650);
IkReal x869=(gclwh9_6*npx*x621);
IkReal x870=(x597*x618);
IkReal x871=(gclwh8_9*r10*x614);
IkReal x872=(x603*x661);
IkReal x873=(gclwh10_6*r12*x626);
IkReal x874=(x597*x707);
IkReal x875=(x626*x701);
IkReal x876=(gclwh11_9*x815);
IkReal x877=(x603*x677);
IkReal x878=(x598*x614);
IkReal x879=(x737+x736+x735+x734+x733+x739+x738+x746+x747+x744+x745+x742+x743+x740+x741+x748+x818+x819+x817+x823+x822+x821+x820+x824);
IkReal x880=(x791+x790+x793+x792+x795+x794+x797+x796+x799+x798+x788+x789+x858+x859+x866+x865+x864+x863+x862+x861+x860+x801+x800+x802);
IkReal x881=(x773+x772+x771+x770+x775+x774+x768+x769+x764+x765+x766+x767+x761+x762+x763+x837+x838+x839+x841+x840+x843+x842+x845+x844);
IkReal x882=(x777+x776+x779+x778+x782+x783+x780+x781+x786+x787+x784+x785+x852+x853+x850+x851+x856+x857+x854+x855+x847+x846+x849+x848);
IkReal x883=(x869+x868+x867+x878+x870+x871+x872+x873+x874+x875+x876+x877+x814+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806+x803);
IkReal x884=(x755+x754+x757+x756+x751+x750+x753+x752+x759+x758+x749+x760+x829+x828+x827+x826+x825+x834+x835+x836+x830+x831+x832+x833);
op[61]=((-0.652018811248991)+(((-1.0)*gclwh5_11*x712))+(((-0.16329571174096)*x605))+(((-1.0)*gclwh4_11*x670))+((gclwh15_11*x634))+(((-1.0)*x884))+x879+((gclwh14_11*x664)));
op[62]=(((r01*x673))+((gclwh4_12*x620))+(((-1.0)*x619*x645))+(((-1.0)*gclwh15_12*x683))+((gclwh4_13*x706))+((gclwh6_12*x695))+((gclwh5_13*x674))+((rxp1_1*x648))+((gclwh12_13*x721))+(((-1.0)*gclwh14_13*x606))+(((-1.0)*gclwh14_12*x705))+(((-1.0)*gclwh15_13*x693))+((gclwh13_12*x629))+(((-1.0)*x619*x729))+((x602*x603))+((gclwh5_12*x704))+((x603*x692))+((gclwh12_12*x667)));
op[63]=(((x601*x696))+(((-1.0)*r01*x731))+(((-1.0)*x619*x652))+(((-1.0)*gclwh4_14*x706))+((gclwh14_14*x606))+((gclwh12_15*x667))+((gclwh6_15*x695))+((x619*x637))+((gclwh15_14*x693))+(((-1.0)*gclwh14_15*x705))+(((-1.0)*gclwh12_14*x721))+((gclwh13_15*x629))+(((-1.0)*gclwh15_15*x683))+(((-1.0)*rxp2_1*x657))+((x603*x604))+(((-1.0)*x597*x719))+(((-1.0)*gclwh13_14*x656))+((gclwh4_15*x620))+(((-1.0)*x603*x665))+((gclwh5_15*x704))+((r11*x625)));
op[64]=((0.00865985823099)+(((-1.0)*gclwh10_4*npz*x621))+((x617*x685))+(((-1.0)*gclwh5_8*x732))+(((-1.0)*gclwh7_10*x702))+(((0.00131745510055862)*x723))+((gclwh14_10*x633))+((x626*x723))+((x617*x628))+(((-2.0)*gclwh8_10*x650))+(((-1.0)*x603*x647))+(((-1.0)*gclwh13_10*x635))+(((-1.0)*x601*x658))+(((-1.0)*x659*x666))+((x597*x655))+(((0.00131745510055862)*x709))+((gclwh8_4*x646))+((gclwh9_10*x682))+(((-1.0)*gclwh6_4*x718))+(((-1.0)*gclwh10_10*x815))+(((-1.0)*gclwh5_4*x681))+((x619*x638))+(((-1.0)*gclwh4_4*x717))+(((0.000325828148676344)*x628))+(((-1.0)*x601*x642))+(((-1.0)*gclwh7_4*x728))+(((-1.0)*gclwh5_10*x644))+((pp*x630))+(((-1.0)*gclwh12_10*x713))+((x597*x613))+(((-1.0)*gclwh12_4*x714))+((x617*x700))+(((0.000325828148676344)*x685))+((gclwh14_8*x691))+((x619*x678))+((gclwh8_10*x722))+(((-0.264633)*gclwh11_4*x610))+((gclwh15_8*x639))+(((-0.000325828148676344)*gclwh6_8*r01))+(((-1.0)*gclwh4_8*x600))+(((-1.0)*x660*x688))+((r10*x687))+((gclwh15_10*x663))+(((-1.0)*gclwh12_8*x671))+((gclwh8_10*x711))+(((-1.0)*x621*x640))+(((-0.00653066921904)*gclwh13_8*rxp1_1))+(((-1.0)*gclwh4_10*x607))+((gclwh14_4*x643))+((r10*x697))+(((-1.0)*rxp1_1*x608))+((gclwh9_8*r10*x617))+((gclwh10_10*x669))+(((-1.0)*x650*x651))+(((0.000325828148676344)*x700))+((gclwh15_4*x609))+((x597*x672))+(((-1.0)*x688*x727))+(((-1.0)*x603*x679))+(((-1.0)*x601*x720))+(((-1.0)*x610*x676))+(((-2.0)*gclwh11_10*x610))+(((-1.0)*gclwh6_10*x599))+((gclwh8_4*r00*x626))+(((-1.0)*r11*x675))+(((-1.0)*gclwh6_10*x603))+((gclwh11_4*r12*x626))+((gclwh11_4*x715))+((x619*x641))+((r02*x686))+(((0.009956846656)*x630))+((x626*x709))+(((-0.264633)*gclwh9_4*x688)));
op[65]=((0.0164367940328091)+(((-0.00653066921904)*x605))+((gclwh15_11*x639))+(((-1.0)*x884))+(((-1.0)*gclwh4_11*x600))+x879+((gclwh14_11*x691))+(((-1.0)*gclwh5_11*x732)));
op[66]=((-0.652018811248991)+(((0.00814714965017998)*x684))+(((1.63649194)*gclwh8_8*x688))+((gclwh15_8*x664))+((x615*x689))+(((-0.81824597)*gclwh7_8*x603))+(((-1.0)*x649*x689))+(((0.16329571174096)*x636))+(((-1.0)*gclwh5_8*x670))+(((-1.0)*gclwh13_8*x725))+((gclwh4_8*x712))+((x689*x699))+(((-1.0)*x882))+(((-0.00814714965017998)*x632))+(((0.00814714965017998)*x615))+(((1.63649194)*gclwh10_8*x610))+(((0.00814714965017998)*x699))+(((1.63649194)*gclwh7_8*x619))+(((-1.63649194)*gclwh11_8*x666))+(((-1.63649194)*gclwh6_8*x597))+(((-0.00814714965017998)*gclwh7_8*r01))+x881+(((-0.00814714965017998)*x649))+(((-1.0)*gclwh14_8*x634))+(((-1.0)*x632*x689))+(((0.81824597)*gclwh6_8*x601))+(((-1.63649194)*gclwh9_8*x650)));
op[67]=((-0.21653488577901)+((gclwh15_11*x664))+(((0.16329571174096)*x710))+(((-1.0)*gclwh5_11*x670))+(((-1.0)*gclwh13_11*x725))+(((-1.0)*x883))+x880+(((-1.0)*gclwh14_11*x634)));
op[68]=((((-1.0)*gclwh12_13*x656))+((gclwh5_12*x620))+((gclwh13_12*x667))+(((-1.0)*x601*x692))+((x597*x645))+((gclwh14_13*x693))+(((-1.0)*gclwh4_12*x704))+(((-1.0)*gclwh12_12*x629))+(((-1.0)*gclwh4_13*x674))+(((-1.0)*gclwh15_13*x606))+(((-1.0)*gclwh15_12*x705))+((gclwh5_13*x706))+((gclwh14_12*x683))+(((-1.0)*gclwh6_12*x716))+(((-1.0)*r11*x673))+((x597*x729))+(((-1.0)*x601*x602))+((rxp1_0*x648)));
op[69]=(((gclwh5_15*x620))+((gclwh13_15*x667))+((x597*x652))+(((-1.0)*gclwh4_15*x704))+(((-1.0)*gclwh14_14*x693))+((x601*x665))+((gclwh15_14*x606))+(((-1.0)*gclwh15_15*x705))+((gclwh14_15*x683))+((gclwh12_14*x656))+((gclwh4_14*x674))+(((-1.0)*gclwh13_14*x721))+((r01*x625))+(((-1.0)*rxp2_0*x657))+(((-1.0)*gclwh12_15*x629))+((r11*x731))+(((-1.0)*gclwh6_15*x716))+((x603*x696))+(((-1.0)*x597*x637))+(((-1.0)*x619*x719))+(((-1.0)*x601*x604)));
op[70]=((0.0164367940328091)+(((-1.0)*gclwh13_8*x671))+(((-1.0)*x617*x649))+((x601*x647))+((x610*x659))+(((-1.0)*x603*x642))+((gclwh4_8*x732))+((gclwh15_8*x691))+(((-1.0)*x650*x727))+(((-1.0)*x882))+(((0.000325828148676344)*x684))+(((-0.000325828148676344)*x632))+((x617*x699))+((x619*x672))+(((-1.0)*x617*x632))+(((-1.0)*gclwh5_8*x600))+(((-1.0)*x666*x676))+(((-0.000325828148676344)*x649))+((x615*x617))+x881+(((-1.0)*r01*x675))+((r00*x697))+((x651*x688))+(((-1.0)*gclwh14_8*x639))+(((0.00653066921904)*x636))+(((0.000325828148676344)*x615))+(((-1.0)*x597*x638)));
op[71]=((-0.00865985823099)+((gclwh15_11*x691))+(((0.00653066921904)*x710))+(((-1.0)*x883))+(((-1.0)*gclwh5_11*x600))+(((-1.0)*gclwh13_11*x671))+x880+(((-1.0)*gclwh14_11*x639)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj0 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj0)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x885=htj1*htj1;
CheckValue<IkReal> x886=IKPowWithIntegerCheck(((1.0)+x885),-1);
if(!x886.valid){
continue;
}
cj1array[numsolutions]=((x886.value)*(((1.0)+(((-1.0)*x885)))));
CheckValue<IkReal> x887=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x887.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x887.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x888=htj2*htj2;
CheckValue<IkReal> x889=IKPowWithIntegerCheck(((1.0)+x888),-1);
if(!x889.valid){
continue;
}
cj2array[numsolutions]=((x889.value)*(((1.0)+(((-1.0)*x888)))));
CheckValue<IkReal> x890=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x890.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x890.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x891=htj0*htj0;
CheckValue<IkReal> x892=IKPowWithIntegerCheck(((1.0)+x891),-1);
if(!x892.valid){
continue;
}
cj0array[numsolutions]=((x892.value)*(((1.0)+(((-1.0)*x891)))));
CheckValue<IkReal> x893=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x893.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x893.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj0 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij1]-cj0array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij1]-sj0array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij0[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j0 = j0array[ij1]; cj0 = cj0array[ij1]; sj0 = sj0array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
IkReal x894=(cj0*r02);
IkReal x895=(r12*sj0);
j5eval[0]=(x894+x895);
j5eval[1]=IKsign(((((12473.0)*x895))+(((12473.0)*x894))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x896=(cj0*r12);
IkReal x897=(r02*sj0);
j5eval[0]=((((-1.0)*x896))+x897);
j5eval[1]=IKsign(((((-1244.605832)*x896))+(((1244.605832)*x897))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x899 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x899)==0){
continue;
}
IkReal x898=pow(x899,-0.5);
CheckValue<IkReal> x900 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x900.valid){
continue;
}
IkReal gconst0=((-1.0)*(x900.value));
IkReal gconst1=(r12*x898);
IkReal gconst2=(r02*x898);
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x901.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x902=(gconst1*r01);
IkReal x903=(gconst2*r10);
IkReal x904=(gconst2*r11);
IkReal x905=((53185.625)*sj1);
IkReal x906=(gconst1*r00);
IkReal x907=((125000.0)*pz);
IkReal x908=((49095.12125)*cj1*sj2);
IkReal x909=((49095.12125)*cj2*sj1);
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(((((-1.0)*x902*x905))+(((-1.0)*x902*x909))+(((-1.0)*x902*x908))+(((-1.0)*x902*x907))+((x904*x905))+((x904*x907))+((x904*x909))+((x904*x908)))),IkReal(((((-1.0)*x903*x905))+(((-1.0)*x903*x907))+(((-1.0)*x903*x909))+(((-1.0)*x903*x908))+((x905*x906))+((x906*x909))+((x906*x908))+((x906*x907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(IKsign(((((12473.0)*gconst2*r02))+(((12473.0)*gconst1*r12)))),-1);
if(!x911.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x910.value)+(((1.5707963267949)*(x911.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x912=IKsin(j5);
IkReal x913=IKcos(j5);
IkReal x914=((1.0)*gconst2);
IkReal x915=((0.39276097)*sj2);
IkReal x916=((0.099784)*gconst2);
IkReal x917=((0.39276097)*cj2);
IkReal x918=((0.099784)*gconst1);
IkReal x919=((1.0)*gconst1);
IkReal x920=(r00*x912);
IkReal x921=(r11*x913);
IkReal x922=(r10*x912);
IkReal x923=(gconst1*r01*x913);
evalcond[0]=(((gconst1*x920))+(((-1.0)*x914*x922))+(((-1.0)*x914*x921))+x923);
evalcond[1]=((((-0.099784)*r20*x912))+(((-0.425485)*sj1))+(((-1.0)*pz))+(((-1.0)*sj1*x917))+(((-1.0)*cj1*x915))+(((-0.099784)*r21*x913)));
evalcond[2]=((0.1323165)+((gconst2*py))+((x916*x921))+((x916*x922))+(((-1.0)*r01*x913*x918))+(((-1.0)*px*x919))+(((-1.0)*x918*x920)));
evalcond[3]=((((-1.0)*r01*x913*x916))+(((-1.0)*px*x914))+(((-1.0)*py*x919))+(((-0.425485)*cj1))+(((-1.0)*x918*x922))+(((-1.0)*x918*x921))+(((-1.0)*x916*x920))+(((-1.0)*cj1*x917))+((sj1*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x924=(cj1*sj2);
IkReal x925=(cj2*sj1);
IkReal x926=((1.0)*cj5);
IkReal x927=(gconst1*r11);
IkReal x928=(gconst2*r01);
IkReal x929=(cj1*cj2);
IkReal x930=(gconst2*r00);
IkReal x931=(r20*sj5);
IkReal x932=(gconst1*r10);
IkReal x933=((1.0)*sj5);
IkReal x934=(r21*x926);
IkReal x935=(cj5*sj1*sj2);
IkReal x936=(sj1*sj2*sj5);
if( IKabs(((((-1.0)*x925*x931))+(((-1.0)*x925*x934))+(((-1.0)*x926*x928*x929))+((x927*x935))+((x928*x935))+(((-1.0)*x924*x934))+((x930*x936))+(((-1.0)*x929*x932*x933))+(((-1.0)*x926*x927*x929))+(((-1.0)*x924*x931))+((x932*x936))+(((-1.0)*x929*x930*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x925*x926*x928))+(((-1.0)*x925*x926*x927))+(((-1.0)*x924*x926*x928))+(((-1.0)*x924*x926*x927))+(((-1.0)*x924*x932*x933))+(((-1.0)*x925*x930*x933))+(((-1.0)*x924*x930*x933))+((cj5*r21*x929))+(((-1.0)*sj1*sj2*x931))+(((-1.0)*sj1*sj2*x934))+(((-1.0)*x925*x932*x933))+((x929*x931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x925*x931))+(((-1.0)*x925*x934))+(((-1.0)*x926*x928*x929))+((x927*x935))+((x928*x935))+(((-1.0)*x924*x934))+((x930*x936))+(((-1.0)*x929*x932*x933))+(((-1.0)*x926*x927*x929))+(((-1.0)*x924*x931))+((x932*x936))+(((-1.0)*x929*x930*x933))))+IKsqr(((((-1.0)*x925*x926*x928))+(((-1.0)*x925*x926*x927))+(((-1.0)*x924*x926*x928))+(((-1.0)*x924*x926*x927))+(((-1.0)*x924*x932*x933))+(((-1.0)*x925*x930*x933))+(((-1.0)*x924*x930*x933))+((cj5*r21*x929))+(((-1.0)*sj1*sj2*x931))+(((-1.0)*sj1*sj2*x934))+(((-1.0)*x925*x932*x933))+((x929*x931))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x925*x931))+(((-1.0)*x925*x934))+(((-1.0)*x926*x928*x929))+((x927*x935))+((x928*x935))+(((-1.0)*x924*x934))+((x930*x936))+(((-1.0)*x929*x932*x933))+(((-1.0)*x926*x927*x929))+(((-1.0)*x924*x931))+((x932*x936))+(((-1.0)*x929*x930*x933))), ((((-1.0)*x925*x926*x928))+(((-1.0)*x925*x926*x927))+(((-1.0)*x924*x926*x928))+(((-1.0)*x924*x926*x927))+(((-1.0)*x924*x932*x933))+(((-1.0)*x925*x930*x933))+(((-1.0)*x924*x930*x933))+((cj5*r21*x929))+(((-1.0)*sj1*sj2*x931))+(((-1.0)*sj1*sj2*x934))+(((-1.0)*x925*x932*x933))+((x929*x931))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x937=IKsin(j3);
IkReal x938=IKcos(j3);
IkReal x939=(cj1*sj2);
IkReal x940=(cj1*cj2);
IkReal x941=(sj1*x937);
IkReal x942=(sj1*x938);
evalcond[0]=(((cj5*r21))+((sj2*x942))+((x937*x939))+(((-1.0)*x938*x940))+((cj2*x941))+((r20*sj5)));
evalcond[1]=(((x937*x940))+((cj2*x942))+((gconst2*r00*sj5))+((cj5*gconst1*r11))+((x938*x939))+((gconst1*r10*sj5))+((cj5*gconst2*r01))+(((-1.0)*sj2*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x945 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x945.valid){
continue;
}
IkReal x943=((-1.0)*(x945.value));
IkReal x944=x898;
sj0=gconst1;
cj0=gconst2;
j0=x943;
IkReal gconst0=x943;
IkReal gconst1=(r12*x944);
IkReal gconst2=(r02*x944);
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
IkReal x946=((-1.0)*(x948.value));
IkReal x947=x898;
sj0=gconst1;
cj0=gconst2;
j0=x946;
IkReal gconst0=x946;
IkReal gconst1=(r12*x947);
IkReal gconst2=(r02*x947);
IkReal x949=r21*r21;
IkReal x950=cj5*cj5;
IkReal x951=((((2.0)*cj5*r20*r21*sj5))+((x949*x950))+(((-1.0)*x949))+(((-1.0)*(r22*r22)))+(((-1.0)*x950*(r20*r20))));
j4eval[0]=x951;
j4eval[1]=IKsign(x951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x952=(cj5*r10);
IkReal x953=((1.0)*sj5);
IkReal x954=(gconst1*sj3);
IkReal x955=(cj5*r00);
IkReal x956=(sj1*sj2);
IkReal x957=(gconst2*sj5);
IkReal x958=(cj3*gconst2);
IkReal x959=(cj1*sj2);
IkReal x960=(cj2*sj1);
IkReal x961=(r01*sj5);
IkReal x962=(cj3*gconst1);
IkReal x963=((1.0)*cj1*cj2);
IkReal x964=((1.0)*gconst2*sj3);
IkReal x965=((1.0)*x962);
IkReal x966=(cj1*cj2*gconst2*sj3);
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal((((x952*x966))+((r11*sj3*x956*x957))+((x960*x961*x962))+(((-1.0)*r11*x953*x966))+(((-1.0)*r01*x953*x954*x956))+(((-1.0)*r11*x953*x958*x960))+(((-1.0)*x952*x956*x964))+(((-1.0)*r11*x953*x958*x959))+((x954*x955*x956))+(((-1.0)*x955*x959*x965))+(((-1.0)*x955*x960*x965))+((x959*x961*x962))+(((-1.0)*x954*x955*x963))+((x952*x958*x960))+((x952*x958*x959))+((cj1*cj2*x954*x961)))),IkReal((((r12*x958*x959))+((r02*x954*x956))+((r12*x958*x960))+(((-1.0)*r02*x954*x963))+(((-1.0)*r12*x956*x964))+(((-1.0)*r02*x959*x965))+((r12*x966))+(((-1.0)*r02*x960*x965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
CheckValue<IkReal> x968=IKPowWithIntegerCheck(IKsign((((cj5*gconst1*r11))+((r00*x957))+((gconst1*r10*sj5))+((cj5*gconst2*r01)))),-1);
if(!x968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x967.value)+(((1.5707963267949)*(x968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x969=IKsin(j4);
IkReal x970=IKcos(j4);
IkReal x971=(cj5*r00);
IkReal x972=(gconst1*r01);
IkReal x973=(gconst2*r12);
IkReal x974=(cj5*r10);
IkReal x975=(cj2*cj3);
IkReal x976=(gconst1*r11);
IkReal x977=(cj1*sj3);
IkReal x978=(cj5*r20);
IkReal x979=((1.0)*x970);
IkReal x980=(sj5*x970);
IkReal x981=((1.0)*x969);
IkReal x982=(gconst2*x969);
IkReal x983=(sj5*x969);
IkReal x984=((1.0)*sj1*sj2);
IkReal x985=(gconst1*x969);
IkReal x986=(gconst2*r11*sj5);
evalcond[0]=(((r21*x983))+(((-1.0)*x978*x981))+(((-1.0)*r22*x979)));
evalcond[1]=(((cj1*cj3*sj2))+((r21*x980))+((sj1*x975))+(((-1.0)*x978*x979))+(((-1.0)*sj3*x984))+((cj2*x977))+((r22*x969)));
evalcond[2]=(((x972*x980))+((gconst2*x970*x974))+(((-1.0)*gconst1*x971*x979))+(((-1.0)*x979*x986))+((r02*x985))+(((-1.0)*x973*x981)));
evalcond[3]=(((r01*sj5*x982))+(((-1.0)*gconst2*x971*x981))+((x976*x983))+(((-1.0)*gconst1*x974*x981))+(((-1.0)*gconst1*r12*x979))+(((-1.0)*gconst2*r02*x979)));
evalcond[4]=((1.0)+((x972*x983))+((x974*x982))+(((-1.0)*gconst1*r02*x979))+(((-1.0)*x981*x986))+((x970*x973))+(((-1.0)*gconst1*x971*x981)));
evalcond[5]=((((-1.0)*gconst2*x971*x979))+(((-1.0)*gconst1*x974*x979))+((cj1*x975))+(((-1.0)*cj3*x984))+((x976*x980))+(((-1.0)*cj2*sj1*sj3))+((r12*x985))+((r02*x982))+(((-1.0)*sj2*x977))+((gconst2*r01*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x987=r21*r21;
IkReal x988=cj5*cj5;
IkReal x989=(cj5*r20);
IkReal x990=(cj3*sj2);
IkReal x991=(cj2*sj3);
IkReal x992=(r21*sj5);
IkReal x993=(cj1*r22);
IkReal x994=((1.0)*cj1);
IkReal x995=(cj2*cj3*sj1);
IkReal x996=(cj1*x992);
IkReal x997=(sj1*sj2*sj3);
CheckValue<IkReal> x998=IKPowWithIntegerCheck(IKsign(((((-1.0)*x987))+(((-1.0)*x988*(r20*r20)))+(((2.0)*x989*x992))+(((-1.0)*(r22*r22)))+((x987*x988)))),-1);
if(!x998.valid){
continue;
}
CheckValue<IkReal> x999 = IKatan2WithCheck(IkReal((((x991*x993))+((x990*x993))+(((-1.0)*r22*x997))+((r22*x995)))),IkReal((((x989*x997))+((x991*x996))+(((-1.0)*x989*x991*x994))+((x992*x995))+(((-1.0)*x989*x995))+(((-1.0)*x992*x997))+((x990*x996))+(((-1.0)*x989*x990*x994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x998.value)))+(x999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1000=IKsin(j4);
IkReal x1001=IKcos(j4);
IkReal x1002=(cj5*r00);
IkReal x1003=(gconst1*r01);
IkReal x1004=(gconst2*r12);
IkReal x1005=(cj5*r10);
IkReal x1006=(cj2*cj3);
IkReal x1007=(gconst1*r11);
IkReal x1008=(cj1*sj3);
IkReal x1009=(cj5*r20);
IkReal x1010=((1.0)*x1001);
IkReal x1011=(sj5*x1001);
IkReal x1012=((1.0)*x1000);
IkReal x1013=(gconst2*x1000);
IkReal x1014=(sj5*x1000);
IkReal x1015=((1.0)*sj1*sj2);
IkReal x1016=(gconst1*x1000);
IkReal x1017=(gconst2*r11*sj5);
evalcond[0]=((((-1.0)*r22*x1010))+(((-1.0)*x1009*x1012))+((r21*x1014)));
evalcond[1]=(((cj2*x1008))+(((-1.0)*x1009*x1010))+((cj1*cj3*sj2))+((sj1*x1006))+((r21*x1011))+(((-1.0)*sj3*x1015))+((r22*x1000)));
evalcond[2]=((((-1.0)*x1010*x1017))+((x1003*x1011))+(((-1.0)*x1004*x1012))+((r02*x1016))+(((-1.0)*gconst1*x1002*x1010))+((gconst2*x1001*x1005)));
evalcond[3]=(((r01*sj5*x1013))+(((-1.0)*gconst2*r02*x1010))+(((-1.0)*gconst1*x1005*x1012))+(((-1.0)*gconst1*r12*x1010))+((x1007*x1014))+(((-1.0)*gconst2*x1002*x1012)));
evalcond[4]=((1.0)+(((-1.0)*x1012*x1017))+((x1003*x1014))+((x1005*x1013))+(((-1.0)*gconst1*x1002*x1012))+(((-1.0)*gconst1*r02*x1010))+((x1001*x1004)));
evalcond[5]=((((-1.0)*gconst1*x1005*x1010))+((r02*x1013))+(((-1.0)*cj2*sj1*sj3))+((r12*x1016))+(((-1.0)*cj3*x1015))+((cj1*x1006))+((x1007*x1011))+(((-1.0)*sj2*x1008))+(((-1.0)*gconst2*x1002*x1010))+((gconst2*r01*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(IKsign((((gconst2*r00*sj5))+((cj5*gconst1*r11))+((gconst1*r10*sj5))+((cj5*gconst2*r01)))),-1);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1018.value)))+(x1019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1020=IKsin(j4);
IkReal x1021=IKcos(j4);
IkReal x1022=(cj5*r00);
IkReal x1023=(gconst1*r01);
IkReal x1024=(gconst2*r12);
IkReal x1025=(cj5*r10);
IkReal x1026=(cj2*cj3);
IkReal x1027=(gconst1*r11);
IkReal x1028=(cj1*sj3);
IkReal x1029=(cj5*r20);
IkReal x1030=((1.0)*x1021);
IkReal x1031=(sj5*x1021);
IkReal x1032=((1.0)*x1020);
IkReal x1033=(gconst2*x1020);
IkReal x1034=(sj5*x1020);
IkReal x1035=((1.0)*sj1*sj2);
IkReal x1036=(gconst1*x1020);
IkReal x1037=(gconst2*r11*sj5);
evalcond[0]=((((-1.0)*x1029*x1032))+((r21*x1034))+(((-1.0)*r22*x1030)));
evalcond[1]=(((cj2*x1028))+((sj1*x1026))+((cj1*cj3*sj2))+(((-1.0)*x1029*x1030))+((r22*x1020))+((r21*x1031))+(((-1.0)*sj3*x1035)));
evalcond[2]=((((-1.0)*x1024*x1032))+((r02*x1036))+((gconst2*x1021*x1025))+(((-1.0)*gconst1*x1022*x1030))+((x1023*x1031))+(((-1.0)*x1030*x1037)));
evalcond[3]=((((-1.0)*gconst1*x1025*x1032))+((r01*sj5*x1033))+(((-1.0)*gconst2*r02*x1030))+(((-1.0)*gconst1*r12*x1030))+((x1027*x1034))+(((-1.0)*gconst2*x1022*x1032)));
evalcond[4]=((1.0)+(((-1.0)*x1032*x1037))+((x1021*x1024))+(((-1.0)*gconst1*x1022*x1032))+((x1023*x1034))+((x1025*x1033))+(((-1.0)*gconst1*r02*x1030)));
evalcond[5]=((((-1.0)*gconst1*x1025*x1030))+((r02*x1033))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj3*x1035))+((x1027*x1031))+((r12*x1036))+((gconst2*r01*x1031))+(((-1.0)*gconst2*x1022*x1030))+(((-1.0)*sj2*x1028))+((cj1*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1040 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1040)==0){
continue;
}
IkReal x1038=pow(x1040,-0.5);
IkReal x1039=((-1.0)*x1038);
CheckValue<IkReal> x1041 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1041.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1041.value))));
IkReal gconst4=(r12*x1039);
IkReal gconst5=(r02*x1039);
CheckValue<IkReal> x1042 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1042.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1043=((49095.12125)*gconst4);
IkReal x1044=(cj2*sj1);
IkReal x1045=(gconst5*r11);
IkReal x1046=((53185.625)*sj1);
IkReal x1047=(cj1*sj2);
IkReal x1048=((125000.0)*pz);
IkReal x1049=(gconst5*r10);
IkReal x1050=(gconst4*r01);
IkReal x1051=(gconst4*r00);
CheckValue<IkReal> x1052=IKPowWithIntegerCheck(IKsign(((((12473.0)*gconst4*r12))+(((12473.0)*gconst5*r02)))),-1);
if(!x1052.valid){
continue;
}
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(((((-1.0)*x1046*x1050))+(((49095.12125)*x1044*x1045))+(((49095.12125)*x1045*x1047))+(((-1.0)*x1048*x1050))+((x1045*x1046))+((x1045*x1048))+(((-1.0)*r01*x1043*x1044))+(((-1.0)*r01*x1043*x1047)))),IkReal(((((-1.0)*x1046*x1049))+(((-49095.12125)*x1047*x1049))+(((-49095.12125)*x1044*x1049))+((r00*x1043*x1044))+((r00*x1043*x1047))+((x1048*x1051))+(((-1.0)*x1048*x1049))+((x1046*x1051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1052.value)))+(x1053.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1054=IKcos(j5);
IkReal x1055=IKsin(j5);
IkReal x1056=((1.0)*px);
IkReal x1057=((0.099784)*gconst5);
IkReal x1058=((0.39276097)*sj1);
IkReal x1059=((0.39276097)*cj1);
IkReal x1060=((1.0)*gconst5);
IkReal x1061=((0.099784)*gconst4);
IkReal x1062=(r01*x1054);
IkReal x1063=(r11*x1054);
IkReal x1064=(r10*x1055);
IkReal x1065=(gconst4*r00*x1055);
evalcond[0]=((((-1.0)*x1060*x1064))+(((-1.0)*x1060*x1063))+x1065+((gconst4*x1062)));
evalcond[1]=((((-1.0)*cj2*x1058))+(((-0.099784)*r21*x1054))+(((-0.425485)*sj1))+(((-1.0)*sj2*x1059))+(((-1.0)*pz))+(((-0.099784)*r20*x1055)));
evalcond[2]=((0.1323165)+(((-1.0)*r00*x1055*x1061))+(((-1.0)*gconst4*x1056))+((x1057*x1063))+((x1057*x1064))+(((-1.0)*x1061*x1062))+((gconst5*py)));
evalcond[3]=((((-1.0)*cj2*x1059))+(((-1.0)*gconst5*x1056))+((sj2*x1058))+(((-1.0)*r00*x1055*x1057))+(((-1.0)*x1057*x1062))+(((-0.425485)*cj1))+(((-1.0)*x1061*x1063))+(((-1.0)*x1061*x1064))+(((-1.0)*gconst4*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1066=(cj5*r21);
IkReal x1067=(sj1*sj2);
IkReal x1068=(r20*sj5);
IkReal x1069=(cj1*cj2);
IkReal x1070=((1.0)*cj1*sj2);
IkReal x1071=(gconst4*r10*sj5);
IkReal x1072=((1.0)*cj2*sj1);
IkReal x1073=(cj5*gconst4*r11);
IkReal x1074=(gconst5*r00*sj5);
IkReal x1075=((1.0)*x1069);
IkReal x1076=(cj5*gconst5*r01);
if( IKabs(((((-1.0)*x1075*x1076))+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1071*x1075))+((x1067*x1071))+((x1067*x1073))+((x1067*x1074))+((x1067*x1076))+(((-1.0)*x1068*x1070))+(((-1.0)*x1068*x1072))+(((-1.0)*x1066*x1070))+(((-1.0)*x1066*x1072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1068*x1069))+(((-1.0)*x1067*x1068))+(((-1.0)*x1070*x1076))+(((-1.0)*x1070*x1074))+(((-1.0)*x1070*x1073))+(((-1.0)*x1070*x1071))+(((-1.0)*x1071*x1072))+(((-1.0)*x1066*x1067))+((x1066*x1069))+(((-1.0)*x1072*x1073))+(((-1.0)*x1072*x1076))+(((-1.0)*x1072*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1075*x1076))+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1071*x1075))+((x1067*x1071))+((x1067*x1073))+((x1067*x1074))+((x1067*x1076))+(((-1.0)*x1068*x1070))+(((-1.0)*x1068*x1072))+(((-1.0)*x1066*x1070))+(((-1.0)*x1066*x1072))))+IKsqr((((x1068*x1069))+(((-1.0)*x1067*x1068))+(((-1.0)*x1070*x1076))+(((-1.0)*x1070*x1074))+(((-1.0)*x1070*x1073))+(((-1.0)*x1070*x1071))+(((-1.0)*x1071*x1072))+(((-1.0)*x1066*x1067))+((x1066*x1069))+(((-1.0)*x1072*x1073))+(((-1.0)*x1072*x1076))+(((-1.0)*x1072*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1075*x1076))+(((-1.0)*x1074*x1075))+(((-1.0)*x1073*x1075))+(((-1.0)*x1071*x1075))+((x1067*x1071))+((x1067*x1073))+((x1067*x1074))+((x1067*x1076))+(((-1.0)*x1068*x1070))+(((-1.0)*x1068*x1072))+(((-1.0)*x1066*x1070))+(((-1.0)*x1066*x1072))), (((x1068*x1069))+(((-1.0)*x1067*x1068))+(((-1.0)*x1070*x1076))+(((-1.0)*x1070*x1074))+(((-1.0)*x1070*x1073))+(((-1.0)*x1070*x1071))+(((-1.0)*x1071*x1072))+(((-1.0)*x1066*x1067))+((x1066*x1069))+(((-1.0)*x1072*x1073))+(((-1.0)*x1072*x1076))+(((-1.0)*x1072*x1074))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1077=IKsin(j3);
IkReal x1078=IKcos(j3);
IkReal x1079=(cj1*sj2);
IkReal x1080=(cj1*cj2);
IkReal x1081=(sj1*x1077);
IkReal x1082=(sj1*x1078);
evalcond[0]=((((-1.0)*x1078*x1080))+((x1077*x1079))+((cj5*r21))+((sj2*x1082))+((cj2*x1081))+((r20*sj5)));
evalcond[1]=(((gconst5*r00*sj5))+((gconst4*r10*sj5))+(((-1.0)*sj2*x1081))+((x1078*x1079))+((cj5*gconst5*r01))+((x1077*x1080))+((cj5*gconst4*r11))+((cj2*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x1086 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1086.valid){
continue;
}
IkReal x1083=((1.0)*(x1086.value));
IkReal x1084=x1038;
IkReal x1085=((-1.0)*x1084);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1083)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1083)));
IkReal gconst4=(r12*x1085);
IkReal gconst5=(r02*x1085);
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1090 = IKatan2WithCheck(IkReal(((-1.0)*r12)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1090.valid){
continue;
}
IkReal x1087=((1.0)*(x1090.value));
IkReal x1088=x1038;
IkReal x1089=((-1.0)*x1088);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1087)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1087)));
IkReal gconst4=(r12*x1089);
IkReal gconst5=(r02*x1089);
IkReal x1091=r21*r21;
IkReal x1092=cj5*cj5;
IkReal x1093=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1092*(r20*r20)))+(((-1.0)*x1091))+(((-1.0)*(r22*r22)))+((x1091*x1092)));
j4eval[0]=x1093;
j4eval[1]=IKsign(x1093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1094=(cj3*gconst5);
IkReal x1095=(cj2*cj5);
IkReal x1096=(r10*sj1);
IkReal x1097=((1.0)*cj1);
IkReal x1098=(sj2*sj5);
IkReal x1099=(gconst4*sj5);
IkReal x1100=(gconst4*sj3);
IkReal x1101=(sj1*sj2);
IkReal x1102=(cj3*gconst4);
IkReal x1103=(cj1*r01);
IkReal x1104=((1.0)*sj1);
IkReal x1105=(cj1*sj2);
IkReal x1106=(gconst5*sj3);
IkReal x1107=(cj2*r02);
IkReal x1108=(cj5*sj2);
IkReal x1109=(cj2*sj1);
IkReal x1110=(r12*x1106);
IkReal x1111=(cj2*r11*sj5);
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1094*x1097*x1098))+((cj1*r10*x1095*x1106))+((r11*sj1*x1098*x1106))+(((-1.0)*r00*x1095*x1102*x1104))+(((-1.0)*r00*x1095*x1097*x1100))+(((-1.0)*x1096*x1106*x1108))+((x1094*x1095*x1096))+((x1098*x1102*x1103))+((cj5*r10*x1094*x1105))+(((-1.0)*x1097*x1106*x1111))+((cj2*sj3*x1099*x1103))+((cj5*r00*x1100*x1101))+((cj3*r01*x1099*x1109))+(((-1.0)*x1094*x1104*x1111))+(((-1.0)*r00*x1097*x1102*x1108))+(((-1.0)*r01*x1098*x1100*x1104)))),IkReal((((cj1*cj2*x1110))+((r12*x1094*x1109))+((r12*x1094*x1105))+(((-1.0)*x1097*x1100*x1107))+(((-1.0)*x1102*x1104*x1107))+(((-1.0)*x1101*x1110))+(((-1.0)*r02*sj2*x1097*x1102))+((r02*x1100*x1101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(IKsign((((gconst5*r00*sj5))+((r10*x1099))+((cj5*gconst5*r01))+((cj5*gconst4*r11)))),-1);
if(!x1113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1112.value)+(((1.5707963267949)*(x1113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1114=IKsin(j4);
IkReal x1115=IKcos(j4);
IkReal x1116=(gconst5*r01);
IkReal x1117=(cj5*r10);
IkReal x1118=(cj5*r00);
IkReal x1119=(cj2*cj3);
IkReal x1120=(r11*sj5);
IkReal x1121=(cj2*sj3);
IkReal x1122=((1.0)*sj1);
IkReal x1123=(cj3*sj2);
IkReal x1124=(cj5*r20);
IkReal x1125=((1.0)*x1115);
IkReal x1126=(sj5*x1115);
IkReal x1127=(gconst5*x1115);
IkReal x1128=(gconst4*x1114);
IkReal x1129=(gconst5*x1114);
IkReal x1130=(sj5*x1114);
IkReal x1131=((1.0)*sj2*sj3);
evalcond[0]=(((r21*x1130))+(((-1.0)*x1114*x1124))+(((-1.0)*r22*x1125)));
evalcond[1]=(((r21*x1126))+((r22*x1114))+((cj1*x1121))+((cj1*x1123))+(((-1.0)*sj2*sj3*x1122))+((sj1*x1119))+(((-1.0)*x1124*x1125)));
evalcond[2]=((((-1.0)*gconst5*x1120*x1125))+((gconst4*r01*x1126))+((x1117*x1127))+((r02*x1128))+(((-1.0)*gconst4*x1118*x1125))+(((-1.0)*r12*x1129)));
evalcond[3]=(((x1120*x1128))+(((-1.0)*gconst4*r12*x1125))+(((-1.0)*x1118*x1129))+(((-1.0)*x1117*x1128))+((x1116*x1130))+(((-1.0)*gconst5*r02*x1125)));
evalcond[4]=((1.0)+(((-1.0)*gconst4*r02*x1125))+(((-1.0)*x1118*x1128))+((x1117*x1129))+(((-1.0)*x1120*x1129))+((r12*x1127))+((r01*sj5*x1128)));
evalcond[5]=((((-1.0)*x1121*x1122))+(((-1.0)*x1122*x1123))+((cj1*x1119))+(((-1.0)*gconst5*x1118*x1125))+(((-1.0)*cj1*x1131))+(((-1.0)*gconst4*x1117*x1125))+((gconst4*x1115*x1120))+((r12*x1128))+((x1116*x1126))+((r02*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1132=r21*r21;
IkReal x1133=cj5*cj5;
IkReal x1134=(cj5*r20);
IkReal x1135=(cj3*sj2);
IkReal x1136=(cj2*sj3);
IkReal x1137=(r21*sj5);
IkReal x1138=(cj1*r22);
IkReal x1139=((1.0)*cj1);
IkReal x1140=(cj2*cj3*sj1);
IkReal x1141=(cj1*x1137);
IkReal x1142=(sj1*sj2*sj3);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1142))+((r22*x1140))+((x1136*x1138))+((x1135*x1138)))),IkReal((((x1137*x1140))+(((-1.0)*x1134*x1140))+(((-1.0)*x1134*x1136*x1139))+((x1134*x1142))+(((-1.0)*x1137*x1142))+(((-1.0)*x1134*x1135*x1139))+((x1135*x1141))+((x1136*x1141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(IKsign(((((2.0)*x1134*x1137))+(((-1.0)*x1133*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x1132))+((x1132*x1133)))),-1);
if(!x1144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1143.value)+(((1.5707963267949)*(x1144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1145=IKsin(j4);
IkReal x1146=IKcos(j4);
IkReal x1147=(gconst5*r01);
IkReal x1148=(cj5*r10);
IkReal x1149=(cj5*r00);
IkReal x1150=(cj2*cj3);
IkReal x1151=(r11*sj5);
IkReal x1152=(cj2*sj3);
IkReal x1153=((1.0)*sj1);
IkReal x1154=(cj3*sj2);
IkReal x1155=(cj5*r20);
IkReal x1156=((1.0)*x1146);
IkReal x1157=(sj5*x1146);
IkReal x1158=(gconst5*x1146);
IkReal x1159=(gconst4*x1145);
IkReal x1160=(gconst5*x1145);
IkReal x1161=(sj5*x1145);
IkReal x1162=((1.0)*sj2*sj3);
evalcond[0]=(((r21*x1161))+(((-1.0)*x1145*x1155))+(((-1.0)*r22*x1156)));
evalcond[1]=((((-1.0)*x1155*x1156))+((r22*x1145))+(((-1.0)*sj2*sj3*x1153))+((cj1*x1154))+((cj1*x1152))+((sj1*x1150))+((r21*x1157)));
evalcond[2]=(((r02*x1159))+((gconst4*r01*x1157))+(((-1.0)*gconst4*x1149*x1156))+(((-1.0)*gconst5*x1151*x1156))+(((-1.0)*r12*x1160))+((x1148*x1158)));
evalcond[3]=((((-1.0)*x1149*x1160))+((x1147*x1161))+(((-1.0)*gconst5*r02*x1156))+(((-1.0)*x1148*x1159))+(((-1.0)*gconst4*r12*x1156))+((x1151*x1159)));
evalcond[4]=((1.0)+((r12*x1158))+(((-1.0)*gconst4*r02*x1156))+(((-1.0)*x1151*x1160))+((r01*sj5*x1159))+((x1148*x1160))+(((-1.0)*x1149*x1159)));
evalcond[5]=(((r12*x1159))+((r02*x1160))+(((-1.0)*cj1*x1162))+((x1147*x1157))+(((-1.0)*gconst4*x1148*x1156))+(((-1.0)*x1152*x1153))+((cj1*x1150))+(((-1.0)*x1153*x1154))+(((-1.0)*gconst5*x1149*x1156))+((gconst4*x1146*x1151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign((((gconst5*r00*sj5))+((gconst4*r10*sj5))+((cj5*gconst5*r01))+((cj5*gconst4*r11)))),-1);
if(!x1163.valid){
continue;
}
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1163.value)))+(x1164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1165=IKsin(j4);
IkReal x1166=IKcos(j4);
IkReal x1167=(gconst5*r01);
IkReal x1168=(cj5*r10);
IkReal x1169=(cj5*r00);
IkReal x1170=(cj2*cj3);
IkReal x1171=(r11*sj5);
IkReal x1172=(cj2*sj3);
IkReal x1173=((1.0)*sj1);
IkReal x1174=(cj3*sj2);
IkReal x1175=(cj5*r20);
IkReal x1176=((1.0)*x1166);
IkReal x1177=(sj5*x1166);
IkReal x1178=(gconst5*x1166);
IkReal x1179=(gconst4*x1165);
IkReal x1180=(gconst5*x1165);
IkReal x1181=(sj5*x1165);
IkReal x1182=((1.0)*sj2*sj3);
evalcond[0]=((((-1.0)*x1165*x1175))+(((-1.0)*r22*x1176))+((r21*x1181)));
evalcond[1]=(((cj1*x1174))+((cj1*x1172))+((sj1*x1170))+((r21*x1177))+(((-1.0)*sj2*sj3*x1173))+(((-1.0)*x1175*x1176))+((r22*x1165)));
evalcond[2]=(((r02*x1179))+(((-1.0)*r12*x1180))+((x1168*x1178))+(((-1.0)*gconst4*x1169*x1176))+(((-1.0)*gconst5*x1171*x1176))+((gconst4*r01*x1177)));
evalcond[3]=((((-1.0)*gconst4*r12*x1176))+((x1167*x1181))+(((-1.0)*x1168*x1179))+(((-1.0)*gconst5*r02*x1176))+(((-1.0)*x1169*x1180))+((x1171*x1179)));
evalcond[4]=((1.0)+(((-1.0)*x1171*x1180))+((r12*x1178))+(((-1.0)*gconst4*r02*x1176))+((r01*sj5*x1179))+((x1168*x1180))+(((-1.0)*x1169*x1179)));
evalcond[5]=((((-1.0)*gconst4*x1168*x1176))+((cj1*x1170))+(((-1.0)*x1173*x1174))+(((-1.0)*x1172*x1173))+((r12*x1179))+(((-1.0)*cj1*x1182))+(((-1.0)*gconst5*x1169*x1176))+((x1167*x1177))+((r02*x1180))+((gconst4*x1166*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1184 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1184)==0){
continue;
}
IkReal x1183=pow(x1184,-0.5);
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1185.value));
IkReal gconst7=((-1.0)*r02*x1183);
IkReal gconst8=(r12*x1183);
CheckValue<IkReal> x1186 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1186.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1186.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1187=gconst7*gconst7;
IkReal x1188=gconst8*gconst8;
IkReal x1189=(cj1*gconst8);
IkReal x1190=((0.03919126063048)*cj2);
IkReal x1191=(cj1*gconst7);
IkReal x1192=((0.03919126063048)*sj1*sj2);
IkReal x1193=(gconst7*x1192);
IkReal x1194=((((0.099784)*x1187))+(((0.099784)*x1188)));
IkReal x1195=(((gconst8*x1192))+(((0.013203069636)*gconst7)));
IkReal x1196=(((x1189*x1190))+(((0.04245659524)*x1189)));
IkReal x1197=((((0.013203069636)*gconst8))+(((0.04245659524)*x1191))+((x1190*x1191)));
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(IKsign((r22*(((((-0.009956846656)*x1188))+(((-0.009956846656)*x1187)))))),-1);
if(!x1198.valid){
continue;
}
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal((((r01*((x1193+(((-1.0)*x1197))))))+((r11*((x1196+(((-1.0)*x1195))))))+(((-1.0)*rxp1_2*x1194)))),IkReal((((r10*((x1195+(((-1.0)*x1196))))))+((r00*((x1197+(((-1.0)*x1193))))))+((rxp0_2*x1194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1198.value)))+(x1199.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1200=IKsin(j5);
IkReal x1201=IKcos(j5);
IkReal x1202=((0.099784)*gconst8);
IkReal x1203=((0.39276097)*sj2);
IkReal x1204=((1.0)*px);
IkReal x1205=((0.39276097)*cj2);
IkReal x1206=((1.0)*gconst8);
IkReal x1207=((0.099784)*gconst7);
IkReal x1208=(r00*x1200);
IkReal x1209=(r01*x1201);
IkReal x1210=(r11*x1201);
IkReal x1211=(r10*x1200);
evalcond[0]=((((-1.0)*x1206*x1210))+(((-1.0)*x1206*x1211))+((gconst7*x1209))+((gconst7*x1208)));
evalcond[1]=((((-0.099784)*r20*x1200))+(((-1.0)*sj1*x1205))+(((-0.425485)*sj1))+(((-1.0)*cj1*x1203))+(((-1.0)*pz))+(((-0.099784)*r21*x1201)));
evalcond[2]=((0.1323165)+((gconst8*py))+(((-1.0)*gconst7*x1204))+((x1202*x1210))+((x1202*x1211))+(((-1.0)*x1207*x1209))+(((-1.0)*x1207*x1208)));
evalcond[3]=((((-1.0)*gconst8*x1204))+(((-1.0)*x1207*x1210))+(((-1.0)*x1207*x1211))+(((-1.0)*cj1*x1205))+(((-1.0)*x1202*x1208))+(((-1.0)*x1202*x1209))+(((-0.425485)*cj1))+((sj1*x1203))+(((-1.0)*gconst7*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1212=(gconst8*r01);
IkReal x1213=(sj1*sj2);
IkReal x1214=(gconst7*r11);
IkReal x1215=((1.0)*cj2);
IkReal x1216=(r20*sj5);
IkReal x1217=(cj1*cj5);
IkReal x1218=(gconst8*r00*sj5);
IkReal x1219=((1.0)*cj1*sj2);
IkReal x1220=(gconst7*r10*sj5);
IkReal x1221=((1.0)*sj2*x1217);
IkReal x1222=(cj5*sj1*x1215);
IkReal x1223=((1.0)*cj1*x1220);
if( IKabs((((x1213*x1218))+(((-1.0)*x1214*x1215*x1217))+(((-1.0)*sj1*x1215*x1216))+(((-1.0)*r21*x1221))+(((-1.0)*r21*x1222))+(((-1.0)*x1216*x1219))+((cj5*x1212*x1213))+(((-1.0)*cj1*x1215*x1220))+((cj5*x1213*x1214))+(((-1.0)*x1212*x1215*x1217))+(((-1.0)*cj1*x1215*x1218))+((x1213*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1212*x1222))+(((-1.0)*x1212*x1221))+((cj2*r21*x1217))+(((-1.0)*sj1*x1215*x1218))+(((-1.0)*x1214*x1222))+(((-1.0)*x1214*x1221))+(((-1.0)*x1213*x1216))+(((-1.0)*cj5*r21*x1213))+(((-1.0)*x1218*x1219))+(((-1.0)*sj1*x1215*x1220))+((cj1*cj2*x1216))+(((-1.0)*x1219*x1220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1213*x1218))+(((-1.0)*x1214*x1215*x1217))+(((-1.0)*sj1*x1215*x1216))+(((-1.0)*r21*x1221))+(((-1.0)*r21*x1222))+(((-1.0)*x1216*x1219))+((cj5*x1212*x1213))+(((-1.0)*cj1*x1215*x1220))+((cj5*x1213*x1214))+(((-1.0)*x1212*x1215*x1217))+(((-1.0)*cj1*x1215*x1218))+((x1213*x1220))))+IKsqr(((((-1.0)*x1212*x1222))+(((-1.0)*x1212*x1221))+((cj2*r21*x1217))+(((-1.0)*sj1*x1215*x1218))+(((-1.0)*x1214*x1222))+(((-1.0)*x1214*x1221))+(((-1.0)*x1213*x1216))+(((-1.0)*cj5*r21*x1213))+(((-1.0)*x1218*x1219))+(((-1.0)*sj1*x1215*x1220))+((cj1*cj2*x1216))+(((-1.0)*x1219*x1220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x1213*x1218))+(((-1.0)*x1214*x1215*x1217))+(((-1.0)*sj1*x1215*x1216))+(((-1.0)*r21*x1221))+(((-1.0)*r21*x1222))+(((-1.0)*x1216*x1219))+((cj5*x1212*x1213))+(((-1.0)*cj1*x1215*x1220))+((cj5*x1213*x1214))+(((-1.0)*x1212*x1215*x1217))+(((-1.0)*cj1*x1215*x1218))+((x1213*x1220))), ((((-1.0)*x1212*x1222))+(((-1.0)*x1212*x1221))+((cj2*r21*x1217))+(((-1.0)*sj1*x1215*x1218))+(((-1.0)*x1214*x1222))+(((-1.0)*x1214*x1221))+(((-1.0)*x1213*x1216))+(((-1.0)*cj5*r21*x1213))+(((-1.0)*x1218*x1219))+(((-1.0)*sj1*x1215*x1220))+((cj1*cj2*x1216))+(((-1.0)*x1219*x1220))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1224=IKsin(j3);
IkReal x1225=IKcos(j3);
IkReal x1226=(cj1*sj2);
IkReal x1227=(cj1*cj2);
IkReal x1228=(sj1*x1224);
IkReal x1229=(sj1*x1225);
evalcond[0]=((((-1.0)*x1225*x1227))+((cj2*x1228))+((cj5*r21))+((sj2*x1229))+((x1224*x1226))+((r20*sj5)));
evalcond[1]=(((cj2*x1229))+((x1224*x1227))+((gconst7*r10*sj5))+((x1225*x1226))+((cj5*gconst7*r11))+((gconst8*r00*sj5))+((cj5*gconst8*r01))+(((-1.0)*sj2*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
IkReal x1230=((-1.0)*(x1232.value));
IkReal x1231=x1183;
sj0=gconst7;
cj0=gconst8;
j0=x1230;
IkReal gconst6=x1230;
IkReal gconst7=((-1.0)*r02*x1231);
IkReal gconst8=(r12*x1231);
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1235 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1235.valid){
continue;
}
IkReal x1233=((-1.0)*(x1235.value));
IkReal x1234=x1183;
sj0=gconst7;
cj0=gconst8;
j0=x1233;
IkReal gconst6=x1233;
IkReal gconst7=((-1.0)*r02*x1234);
IkReal gconst8=(r12*x1234);
IkReal x1236=r21*r21;
IkReal x1237=cj5*cj5;
IkReal x1238=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1236))+(((-1.0)*(r22*r22)))+(((-1.0)*x1237*(r20*r20)))+((x1236*x1237)));
j4eval[0]=x1238;
j4eval[1]=IKsign(x1238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1239=(cj1*gconst8);
IkReal x1240=(cj3*sj2);
IkReal x1241=(cj5*gconst8);
IkReal x1242=(cj2*gconst7);
IkReal x1243=(cj5*sj3);
IkReal x1244=(cj2*r10);
IkReal x1245=(cj5*gconst7);
IkReal x1246=((1.0)*gconst8);
IkReal x1247=(gconst7*r02);
IkReal x1248=(cj2*r11);
IkReal x1249=((1.0)*r02);
IkReal x1250=(cj1*sj3);
IkReal x1251=(cj3*sj1);
IkReal x1252=(r01*sj5);
IkReal x1253=((1.0)*sj5);
IkReal x1254=(cj2*r12);
IkReal x1255=(gconst8*sj5);
IkReal x1256=(sj5*x1251);
IkReal x1257=((1.0)*cj1*r00);
IkReal x1258=(sj1*sj2*sj3);
CheckValue<IkReal> x1259=IKPowWithIntegerCheck(IKsign((((gconst7*r10*sj5))+((r01*x1241))+((r11*x1245))+((r00*x1255)))),-1);
if(!x1259.valid){
continue;
}
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal((((r11*x1255*x1258))+((gconst7*r00*sj1*sj2*x1243))+((x1242*x1251*x1252))+((x1241*x1244*x1251))+(((-1.0)*sj3*x1239*x1248*x1253))+(((-1.0)*r10*x1241*x1258))+(((-1.0)*x1240*x1245*x1257))+(((-1.0)*cj5*r00*x1242*x1251))+((x1242*x1250*x1252))+((x1239*x1243*x1244))+((cj5*r10*x1239*x1240))+(((-1.0)*x1246*x1248*x1256))+(((-1.0)*x1242*x1243*x1257))+(((-1.0)*gconst7*x1252*x1258))+(((-1.0)*r11*x1239*x1240*x1253))+((cj1*gconst7*x1240*x1252)))),IkReal((((x1247*x1258))+((gconst8*x1251*x1254))+((r12*x1239*x1240))+((sj3*x1239*x1254))+(((-1.0)*x1242*x1249*x1250))+(((-1.0)*x1242*x1249*x1251))+(((-1.0)*cj1*x1240*x1247))+(((-1.0)*r12*x1246*x1258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1259.value)))+(x1260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1261=IKsin(j4);
IkReal x1262=IKcos(j4);
IkReal x1263=(r11*sj5);
IkReal x1264=(r21*sj5);
IkReal x1265=(cj2*cj3);
IkReal x1266=(gconst8*r02);
IkReal x1267=(r01*sj5);
IkReal x1268=(cj1*sj3);
IkReal x1269=(cj5*r10);
IkReal x1270=(cj5*r00);
IkReal x1271=(cj5*r20);
IkReal x1272=((1.0)*x1262);
IkReal x1273=(gconst7*x1262);
IkReal x1274=((1.0)*sj1*sj2);
IkReal x1275=(gconst8*x1262);
IkReal x1276=(gconst7*x1261);
IkReal x1277=(gconst8*x1261);
IkReal x1278=((1.0)*x1277);
evalcond[0]=(((x1261*x1264))+(((-1.0)*r22*x1272))+(((-1.0)*x1261*x1271)));
evalcond[1]=(((cj1*cj3*sj2))+((r22*x1261))+((sj1*x1265))+(((-1.0)*x1271*x1272))+((cj2*x1268))+(((-1.0)*sj3*x1274))+((x1262*x1264)));
evalcond[2]=(((x1269*x1275))+(((-1.0)*r12*x1278))+((r02*x1276))+((x1267*x1273))+(((-1.0)*gconst8*x1263*x1272))+(((-1.0)*gconst7*x1270*x1272)));
evalcond[3]=((((-1.0)*x1269*x1276))+(((-1.0)*x1270*x1278))+(((-1.0)*x1266*x1272))+((x1267*x1277))+((x1263*x1276))+(((-1.0)*gconst7*r12*x1272)));
evalcond[4]=((1.0)+((x1269*x1277))+((r12*x1275))+(((-1.0)*x1263*x1278))+(((-1.0)*gconst7*r02*x1272))+((x1267*x1276))+(((-1.0)*x1270*x1276)));
evalcond[5]=(((r12*x1276))+(((-1.0)*gconst7*x1269*x1272))+((x1261*x1266))+(((-1.0)*cj3*x1274))+(((-1.0)*cj2*sj1*sj3))+((x1267*x1275))+((x1263*x1273))+((cj1*x1265))+(((-1.0)*gconst8*x1270*x1272))+(((-1.0)*sj2*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1279=r21*r21;
IkReal x1280=cj5*cj5;
IkReal x1281=(cj5*r20);
IkReal x1282=(cj3*sj2);
IkReal x1283=(cj2*sj3);
IkReal x1284=(r21*sj5);
IkReal x1285=(cj1*r22);
IkReal x1286=((1.0)*cj1);
IkReal x1287=(cj2*cj3*sj1);
IkReal x1288=(cj1*x1284);
IkReal x1289=(sj1*sj2*sj3);
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign((((x1279*x1280))+(((-1.0)*x1280*(r20*r20)))+(((2.0)*x1281*x1284))+(((-1.0)*(r22*r22)))+(((-1.0)*x1279)))),-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((((r22*x1287))+(((-1.0)*r22*x1289))+((x1283*x1285))+((x1282*x1285)))),IkReal(((((-1.0)*x1281*x1287))+((x1284*x1287))+(((-1.0)*x1281*x1283*x1286))+(((-1.0)*x1281*x1282*x1286))+((x1283*x1288))+((x1282*x1288))+((x1281*x1289))+(((-1.0)*x1284*x1289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1290.value)))+(x1291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1292=IKsin(j4);
IkReal x1293=IKcos(j4);
IkReal x1294=(r11*sj5);
IkReal x1295=(r21*sj5);
IkReal x1296=(cj2*cj3);
IkReal x1297=(gconst8*r02);
IkReal x1298=(r01*sj5);
IkReal x1299=(cj1*sj3);
IkReal x1300=(cj5*r10);
IkReal x1301=(cj5*r00);
IkReal x1302=(cj5*r20);
IkReal x1303=((1.0)*x1293);
IkReal x1304=(gconst7*x1293);
IkReal x1305=((1.0)*sj1*sj2);
IkReal x1306=(gconst8*x1293);
IkReal x1307=(gconst7*x1292);
IkReal x1308=(gconst8*x1292);
IkReal x1309=((1.0)*x1308);
evalcond[0]=((((-1.0)*x1292*x1302))+(((-1.0)*r22*x1303))+((x1292*x1295)));
evalcond[1]=(((cj2*x1299))+((cj1*cj3*sj2))+((sj1*x1296))+((x1293*x1295))+(((-1.0)*sj3*x1305))+((r22*x1292))+(((-1.0)*x1302*x1303)));
evalcond[2]=((((-1.0)*gconst8*x1294*x1303))+((x1300*x1306))+(((-1.0)*gconst7*x1301*x1303))+(((-1.0)*r12*x1309))+((r02*x1307))+((x1298*x1304)));
evalcond[3]=((((-1.0)*x1297*x1303))+((x1294*x1307))+(((-1.0)*gconst7*r12*x1303))+(((-1.0)*x1300*x1307))+(((-1.0)*x1301*x1309))+((x1298*x1308)));
evalcond[4]=((1.0)+((r12*x1306))+((x1300*x1308))+(((-1.0)*x1294*x1309))+(((-1.0)*gconst7*r02*x1303))+((x1298*x1307))+(((-1.0)*x1301*x1307)));
evalcond[5]=((((-1.0)*cj3*x1305))+(((-1.0)*gconst8*x1301*x1303))+((r12*x1307))+((x1294*x1304))+(((-1.0)*cj2*sj1*sj3))+((cj1*x1296))+(((-1.0)*gconst7*x1300*x1303))+(((-1.0)*sj2*x1299))+((x1298*x1306))+((x1292*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKsign((((gconst7*r10*sj5))+((cj5*gconst7*r11))+((gconst8*r00*sj5))+((cj5*gconst8*r01)))),-1);
if(!x1310.valid){
continue;
}
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1310.value)))+(x1311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1312=IKsin(j4);
IkReal x1313=IKcos(j4);
IkReal x1314=(r11*sj5);
IkReal x1315=(r21*sj5);
IkReal x1316=(cj2*cj3);
IkReal x1317=(gconst8*r02);
IkReal x1318=(r01*sj5);
IkReal x1319=(cj1*sj3);
IkReal x1320=(cj5*r10);
IkReal x1321=(cj5*r00);
IkReal x1322=(cj5*r20);
IkReal x1323=((1.0)*x1313);
IkReal x1324=(gconst7*x1313);
IkReal x1325=((1.0)*sj1*sj2);
IkReal x1326=(gconst8*x1313);
IkReal x1327=(gconst7*x1312);
IkReal x1328=(gconst8*x1312);
IkReal x1329=((1.0)*x1328);
evalcond[0]=((((-1.0)*r22*x1323))+(((-1.0)*x1312*x1322))+((x1312*x1315)));
evalcond[1]=(((x1313*x1315))+((cj1*cj3*sj2))+(((-1.0)*x1322*x1323))+((r22*x1312))+(((-1.0)*sj3*x1325))+((cj2*x1319))+((sj1*x1316)));
evalcond[2]=(((x1320*x1326))+(((-1.0)*gconst7*x1321*x1323))+(((-1.0)*r12*x1329))+((r02*x1327))+(((-1.0)*gconst8*x1314*x1323))+((x1318*x1324)));
evalcond[3]=(((x1314*x1327))+(((-1.0)*x1320*x1327))+(((-1.0)*x1321*x1329))+(((-1.0)*gconst7*r12*x1323))+((x1318*x1328))+(((-1.0)*x1317*x1323)));
evalcond[4]=((1.0)+(((-1.0)*x1321*x1327))+((x1320*x1328))+(((-1.0)*x1314*x1329))+(((-1.0)*gconst7*r02*x1323))+((r12*x1326))+((x1318*x1327)));
evalcond[5]=((((-1.0)*cj3*x1325))+((x1314*x1324))+(((-1.0)*cj2*sj1*sj3))+((r12*x1327))+((cj1*x1316))+(((-1.0)*gconst8*x1321*x1323))+(((-1.0)*gconst7*x1320*x1323))+(((-1.0)*sj2*x1319))+((x1318*x1326))+((x1312*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1331 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1331)==0){
continue;
}
IkReal x1330=pow(x1331,-0.5);
CheckValue<IkReal> x1332 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1332.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1332.value))));
IkReal gconst10=((1.0)*r02*x1330);
IkReal gconst11=((-1.0)*r12*x1330);
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1333.value)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x1336 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1336.valid){
continue;
}
IkReal x1334=((1.0)*(x1336.value));
IkReal x1335=x1330;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1334)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1334)));
IkReal gconst10=((1.0)*r02*x1335);
IkReal gconst11=((-1.0)*r12*x1335);
j5eval[0]=0;
j5eval[1]=0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1337=((4898.90757881)*sj1);
IkReal x1338=((12473.0)*gconst11);
IkReal x1339=((4898.90757881)*cj1);
IkReal x1340=((5307.074405)*sj1);
IkReal x1341=((12473.0)*gconst10);
IkReal x1342=(sj2*x1337);
IkReal x1343=((((5307.074405)*cj1))+((cj2*x1339)));
IkReal x1344=(((gconst10*sj2*x1339))+((gconst10*x1340))+((cj2*gconst10*x1337)));
IkReal x1345=(((gconst11*sj2*x1339))+((gconst11*x1340))+((cj2*gconst11*x1337)));
CheckValue<IkReal> x1346 = IKatan2WithCheck(IkReal((((r21*((x1342+(((-1.0)*x1343))))))+((r01*x1345))+((r11*x1344))+(((-1.0)*rxp1_1*x1338))+((rxp1_0*x1341)))),IkReal((((r20*((x1343+(((-1.0)*x1342))))))+(((-1.0)*rxp0_0*x1341))+(((-1.0)*r00*x1345))+((rxp0_1*x1338))+(((-1.0)*r10*x1344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1346.valid){
continue;
}
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(IKsign(((((1244.605832)*gconst10*r02))+(((-1244.605832)*gconst11*r12)))),-1);
if(!x1347.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1346.value)+(((1.5707963267949)*(x1347.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1348=IKsin(j5);
IkReal x1349=IKcos(j5);
IkReal x1350=((0.39276097)*sj2);
IkReal x1351=((0.099784)*gconst11);
IkReal x1352=((0.39276097)*cj2);
IkReal x1353=((0.099784)*gconst10);
IkReal x1354=((1.0)*gconst10);
IkReal x1355=((1.0)*gconst11);
IkReal x1356=(r00*x1348);
IkReal x1357=(r01*x1349);
IkReal x1358=(r11*x1349);
IkReal x1359=(r10*x1348);
evalcond[0]=(((gconst10*x1356))+((gconst10*x1357))+(((-1.0)*x1355*x1358))+(((-1.0)*x1355*x1359)));
evalcond[1]=((((-1.0)*sj1*x1352))+(((-0.099784)*r20*x1348))+(((-0.425485)*sj1))+(((-0.099784)*r21*x1349))+(((-1.0)*pz))+(((-1.0)*cj1*x1350)));
evalcond[2]=((0.1323165)+(((-1.0)*px*x1354))+((x1351*x1359))+((x1351*x1358))+(((-1.0)*x1353*x1357))+(((-1.0)*x1353*x1356))+((gconst11*py)));
evalcond[3]=(((sj1*x1350))+(((-1.0)*px*x1355))+(((-0.425485)*cj1))+(((-1.0)*cj1*x1352))+(((-1.0)*x1351*x1357))+(((-1.0)*x1351*x1356))+(((-1.0)*x1353*x1358))+(((-1.0)*x1353*x1359))+(((-1.0)*py*x1354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1360=((1.0)*cj5);
IkReal x1361=(cj2*sj1);
IkReal x1362=(gconst11*r01);
IkReal x1363=(cj1*sj2);
IkReal x1364=(gconst10*r11);
IkReal x1365=((1.0)*sj5);
IkReal x1366=(gconst11*r00);
IkReal x1367=(gconst10*r10);
IkReal x1368=(cj1*cj2);
IkReal x1369=(sj1*sj2);
IkReal x1370=(cj5*x1369);
if( IKabs(((((-1.0)*r20*x1361*x1365))+(((-1.0)*x1360*x1364*x1368))+(((-1.0)*r20*x1363*x1365))+(((-1.0)*x1360*x1362*x1368))+((x1362*x1370))+(((-1.0)*x1365*x1366*x1368))+(((-1.0)*x1365*x1367*x1368))+((sj5*x1367*x1369))+((x1364*x1370))+(((-1.0)*r21*x1360*x1363))+(((-1.0)*r21*x1360*x1361))+((sj5*x1366*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x1368))+(((-1.0)*x1360*x1363*x1364))+(((-1.0)*x1360*x1361*x1364))+(((-1.0)*x1360*x1361*x1362))+(((-1.0)*r20*x1365*x1369))+(((-1.0)*x1360*x1362*x1363))+((cj5*r21*x1368))+(((-1.0)*x1361*x1365*x1366))+(((-1.0)*x1361*x1365*x1367))+(((-1.0)*x1363*x1365*x1367))+(((-1.0)*x1363*x1365*x1366))+(((-1.0)*r21*x1360*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1361*x1365))+(((-1.0)*x1360*x1364*x1368))+(((-1.0)*r20*x1363*x1365))+(((-1.0)*x1360*x1362*x1368))+((x1362*x1370))+(((-1.0)*x1365*x1366*x1368))+(((-1.0)*x1365*x1367*x1368))+((sj5*x1367*x1369))+((x1364*x1370))+(((-1.0)*r21*x1360*x1363))+(((-1.0)*r21*x1360*x1361))+((sj5*x1366*x1369))))+IKsqr((((r20*sj5*x1368))+(((-1.0)*x1360*x1363*x1364))+(((-1.0)*x1360*x1361*x1364))+(((-1.0)*x1360*x1361*x1362))+(((-1.0)*r20*x1365*x1369))+(((-1.0)*x1360*x1362*x1363))+((cj5*r21*x1368))+(((-1.0)*x1361*x1365*x1366))+(((-1.0)*x1361*x1365*x1367))+(((-1.0)*x1363*x1365*x1367))+(((-1.0)*x1363*x1365*x1366))+(((-1.0)*r21*x1360*x1369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*x1361*x1365))+(((-1.0)*x1360*x1364*x1368))+(((-1.0)*r20*x1363*x1365))+(((-1.0)*x1360*x1362*x1368))+((x1362*x1370))+(((-1.0)*x1365*x1366*x1368))+(((-1.0)*x1365*x1367*x1368))+((sj5*x1367*x1369))+((x1364*x1370))+(((-1.0)*r21*x1360*x1363))+(((-1.0)*r21*x1360*x1361))+((sj5*x1366*x1369))), (((r20*sj5*x1368))+(((-1.0)*x1360*x1363*x1364))+(((-1.0)*x1360*x1361*x1364))+(((-1.0)*x1360*x1361*x1362))+(((-1.0)*r20*x1365*x1369))+(((-1.0)*x1360*x1362*x1363))+((cj5*r21*x1368))+(((-1.0)*x1361*x1365*x1366))+(((-1.0)*x1361*x1365*x1367))+(((-1.0)*x1363*x1365*x1367))+(((-1.0)*x1363*x1365*x1366))+(((-1.0)*r21*x1360*x1369))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1371=IKsin(j3);
IkReal x1372=IKcos(j3);
IkReal x1373=(cj1*sj2);
IkReal x1374=(cj1*cj2);
IkReal x1375=(sj1*x1371);
IkReal x1376=(sj1*x1372);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1372*x1374))+((sj2*x1376))+((x1371*x1373))+((cj2*x1375))+((r20*sj5)));
evalcond[1]=(((gconst10*r10*sj5))+(((-1.0)*sj2*x1375))+((x1372*x1373))+((cj5*gconst10*r11))+((cj5*gconst11*r01))+((gconst11*r00*sj5))+((x1371*x1374))+((cj2*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
IkReal x1377=((1.0)*(x1379.value));
IkReal x1378=x1330;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1377)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1377)));
IkReal gconst10=((1.0)*r02*x1378);
IkReal gconst11=((-1.0)*r12*x1378);
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
IkReal x1380=((1.0)*(x1382.value));
IkReal x1381=x1330;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1380)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1380)));
IkReal gconst10=((1.0)*r02*x1381);
IkReal gconst11=((-1.0)*r12*x1381);
IkReal x1383=r21*r21;
IkReal x1384=cj5*cj5;
IkReal x1385=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1384*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x1383))+((x1383*x1384)));
j4eval[0]=x1385;
j4eval[1]=IKsign(x1385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1386=(cj3*gconst11);
IkReal x1387=(cj2*sj1);
IkReal x1388=(cj5*sj2);
IkReal x1389=(cj1*r10);
IkReal x1390=(r02*sj2);
IkReal x1391=(cj5*gconst11);
IkReal x1392=(gconst10*sj5);
IkReal x1393=(cj1*cj3);
IkReal x1394=(r01*sj2);
IkReal x1395=((1.0)*sj5);
IkReal x1396=(r11*sj2);
IkReal x1397=(gconst11*sj5);
IkReal x1398=(sj1*sj3);
IkReal x1399=((1.0)*gconst10);
IkReal x1400=(gconst11*r12);
IkReal x1401=(gconst10*x1398);
IkReal x1402=(r00*x1399);
IkReal x1403=(cj1*cj2*sj3);
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((((cj2*sj3*x1389*x1391))+(((-1.0)*gconst11*r11*x1395*x1403))+(((-1.0)*x1392*x1394*x1398))+((x1392*x1393*x1394))+((cj5*r10*x1386*x1387))+(((-1.0)*x1388*x1393*x1402))+((x1396*x1397*x1398))+(((-1.0)*gconst11*r10*x1388*x1398))+((r01*x1392*x1403))+(((-1.0)*cj3*cj5*x1387*x1402))+(((-1.0)*cj5*x1402*x1403))+((r00*x1388*x1401))+(((-1.0)*r11*x1386*x1387*x1395))+((x1386*x1388*x1389))+(((-1.0)*cj1*x1386*x1395*x1396))+((cj3*r01*x1387*x1392)))),IkReal(((((-1.0)*x1390*x1393*x1399))+((cj1*r12*sj2*x1386))+(((-1.0)*cj3*r02*x1387*x1399))+(((-1.0)*r02*x1399*x1403))+(((-1.0)*sj2*x1398*x1400))+((r12*x1386*x1387))+((x1400*x1403))+((x1390*x1401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign((((cj5*gconst10*r11))+((r10*x1392))+((r01*x1391))+((r00*x1397)))),-1);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=(gconst10*r00);
IkReal x1409=(r21*sj5);
IkReal x1410=(r01*sj5);
IkReal x1411=(gconst10*r02);
IkReal x1412=(gconst11*r10);
IkReal x1413=(cj2*cj3);
IkReal x1414=(r11*sj5);
IkReal x1415=(gconst11*r00);
IkReal x1416=(cj1*sj3);
IkReal x1417=(gconst10*r10);
IkReal x1418=((1.0)*x1407);
IkReal x1419=(cj5*x1406);
IkReal x1420=(gconst11*x1406);
IkReal x1421=(gconst11*x1407);
IkReal x1422=((1.0)*sj1*sj2);
IkReal x1423=(gconst10*x1407);
IkReal x1424=(gconst10*x1406);
evalcond[0]=((((-1.0)*r22*x1418))+(((-1.0)*r20*x1419))+((x1406*x1409)));
evalcond[1]=(((cj2*x1416))+((cj1*cj3*sj2))+(((-1.0)*cj5*r20*x1418))+(((-1.0)*sj3*x1422))+((sj1*x1413))+((r22*x1406))+((x1407*x1409)));
evalcond[2]=(((x1410*x1423))+(((-1.0)*r12*x1420))+(((-1.0)*gconst11*x1414*x1418))+((x1406*x1411))+((cj5*x1407*x1412))+(((-1.0)*cj5*x1408*x1418)));
evalcond[3]=((((-1.0)*gconst11*r02*x1418))+(((-1.0)*x1415*x1419))+((x1410*x1420))+(((-1.0)*gconst10*r12*x1418))+((x1414*x1424))+(((-1.0)*x1417*x1419)));
evalcond[4]=((1.0)+(((-1.0)*x1414*x1420))+((x1410*x1424))+((x1412*x1419))+(((-1.0)*x1411*x1418))+((r12*x1421))+(((-1.0)*x1408*x1419)));
evalcond[5]=((((-1.0)*sj2*x1416))+((x1410*x1421))+((x1414*x1423))+(((-1.0)*cj5*x1417*x1418))+(((-1.0)*cj2*sj1*sj3))+((r02*x1420))+((cj1*x1413))+(((-1.0)*cj3*x1422))+(((-1.0)*cj5*x1415*x1418))+((r12*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1425=r21*r21;
IkReal x1426=cj5*cj5;
IkReal x1427=(cj5*r20);
IkReal x1428=(cj3*sj2);
IkReal x1429=(cj2*sj3);
IkReal x1430=(r21*sj5);
IkReal x1431=(cj1*r22);
IkReal x1432=((1.0)*cj1);
IkReal x1433=(cj2*cj3*sj1);
IkReal x1434=(cj1*x1430);
IkReal x1435=(sj1*sj2*sj3);
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign((((x1425*x1426))+(((-1.0)*x1426*(r20*r20)))+(((-1.0)*x1425))+(((-1.0)*(r22*r22)))+(((2.0)*x1427*x1430)))),-1);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal((((x1429*x1431))+((x1428*x1431))+(((-1.0)*r22*x1435))+((r22*x1433)))),IkReal((((x1429*x1434))+((x1428*x1434))+((x1430*x1433))+((x1427*x1435))+(((-1.0)*x1430*x1435))+(((-1.0)*x1427*x1433))+(((-1.0)*x1427*x1429*x1432))+(((-1.0)*x1427*x1428*x1432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1436.value)))+(x1437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1438=IKsin(j4);
IkReal x1439=IKcos(j4);
IkReal x1440=(gconst10*r00);
IkReal x1441=(r21*sj5);
IkReal x1442=(r01*sj5);
IkReal x1443=(gconst10*r02);
IkReal x1444=(gconst11*r10);
IkReal x1445=(cj2*cj3);
IkReal x1446=(r11*sj5);
IkReal x1447=(gconst11*r00);
IkReal x1448=(cj1*sj3);
IkReal x1449=(gconst10*r10);
IkReal x1450=((1.0)*x1439);
IkReal x1451=(cj5*x1438);
IkReal x1452=(gconst11*x1438);
IkReal x1453=(gconst11*x1439);
IkReal x1454=((1.0)*sj1*sj2);
IkReal x1455=(gconst10*x1439);
IkReal x1456=(gconst10*x1438);
evalcond[0]=(((x1438*x1441))+(((-1.0)*r22*x1450))+(((-1.0)*r20*x1451)));
evalcond[1]=(((x1439*x1441))+((cj1*cj3*sj2))+(((-1.0)*cj5*r20*x1450))+((sj1*x1445))+((cj2*x1448))+(((-1.0)*sj3*x1454))+((r22*x1438)));
evalcond[2]=(((x1438*x1443))+(((-1.0)*cj5*x1440*x1450))+((cj5*x1439*x1444))+(((-1.0)*r12*x1452))+((x1442*x1455))+(((-1.0)*gconst11*x1446*x1450)));
evalcond[3]=((((-1.0)*x1447*x1451))+((x1446*x1456))+(((-1.0)*gconst10*r12*x1450))+(((-1.0)*gconst11*r02*x1450))+(((-1.0)*x1449*x1451))+((x1442*x1452)));
evalcond[4]=((1.0)+(((-1.0)*x1440*x1451))+((r12*x1453))+(((-1.0)*x1446*x1452))+(((-1.0)*x1443*x1450))+((x1442*x1456))+((x1444*x1451)));
evalcond[5]=(((x1446*x1455))+((cj1*x1445))+(((-1.0)*cj3*x1454))+(((-1.0)*cj5*x1447*x1450))+((r12*x1456))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj5*x1449*x1450))+(((-1.0)*sj2*x1448))+((x1442*x1453))+((r02*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign((((gconst10*r10*sj5))+((cj5*gconst10*r11))+((cj5*gconst11*r01))+((gconst11*r00*sj5)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1459=IKsin(j4);
IkReal x1460=IKcos(j4);
IkReal x1461=(gconst10*r00);
IkReal x1462=(r21*sj5);
IkReal x1463=(r01*sj5);
IkReal x1464=(gconst10*r02);
IkReal x1465=(gconst11*r10);
IkReal x1466=(cj2*cj3);
IkReal x1467=(r11*sj5);
IkReal x1468=(gconst11*r00);
IkReal x1469=(cj1*sj3);
IkReal x1470=(gconst10*r10);
IkReal x1471=((1.0)*x1460);
IkReal x1472=(cj5*x1459);
IkReal x1473=(gconst11*x1459);
IkReal x1474=(gconst11*x1460);
IkReal x1475=((1.0)*sj1*sj2);
IkReal x1476=(gconst10*x1460);
IkReal x1477=(gconst10*x1459);
evalcond[0]=((((-1.0)*r22*x1471))+(((-1.0)*r20*x1472))+((x1459*x1462)));
evalcond[1]=(((cj2*x1469))+((cj1*cj3*sj2))+(((-1.0)*sj3*x1475))+(((-1.0)*cj5*r20*x1471))+((x1460*x1462))+((sj1*x1466))+((r22*x1459)));
evalcond[2]=(((x1459*x1464))+(((-1.0)*r12*x1473))+(((-1.0)*cj5*x1461*x1471))+((x1463*x1476))+((cj5*x1460*x1465))+(((-1.0)*gconst11*x1467*x1471)));
evalcond[3]=((((-1.0)*gconst11*r02*x1471))+(((-1.0)*gconst10*r12*x1471))+((x1467*x1477))+((x1463*x1473))+(((-1.0)*x1470*x1472))+(((-1.0)*x1468*x1472)));
evalcond[4]=((1.0)+((r12*x1474))+(((-1.0)*x1467*x1473))+(((-1.0)*x1461*x1472))+((x1463*x1477))+((x1465*x1472))+(((-1.0)*x1464*x1471)));
evalcond[5]=((((-1.0)*cj3*x1475))+((r12*x1477))+(((-1.0)*sj2*x1469))+((r02*x1473))+((x1467*x1476))+(((-1.0)*cj5*x1470*x1471))+(((-1.0)*cj2*sj1*sj3))+((x1463*x1474))+((cj1*x1466))+(((-1.0)*cj5*x1468*x1471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1478=((53185.625)*sj1);
IkReal x1479=(gconst10*r01);
IkReal x1480=(gconst10*r00);
IkReal x1481=((125000.0)*pz);
IkReal x1482=(gconst11*r10);
IkReal x1483=(gconst11*r11);
IkReal x1484=((49095.12125)*cj1*sj2);
IkReal x1485=((49095.12125)*cj2*sj1);
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign(((((12473.0)*gconst11*r02))+(((12473.0)*gconst10*r12)))),-1);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal(((((-1.0)*x1478*x1479))+(((-1.0)*x1479*x1484))+(((-1.0)*x1479*x1485))+(((-1.0)*x1479*x1481))+((x1481*x1483))+((x1483*x1485))+((x1483*x1484))+((x1478*x1483)))),IkReal(((((-1.0)*x1482*x1485))+(((-1.0)*x1482*x1484))+(((-1.0)*x1481*x1482))+((x1480*x1481))+((x1480*x1485))+((x1480*x1484))+((x1478*x1480))+(((-1.0)*x1478*x1482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1486.value)))+(x1487.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1488=IKsin(j5);
IkReal x1489=IKcos(j5);
IkReal x1490=((0.39276097)*sj2);
IkReal x1491=((0.099784)*gconst11);
IkReal x1492=((0.39276097)*cj2);
IkReal x1493=((0.099784)*gconst10);
IkReal x1494=((1.0)*gconst10);
IkReal x1495=((1.0)*gconst11);
IkReal x1496=(r00*x1488);
IkReal x1497=(r01*x1489);
IkReal x1498=(r11*x1489);
IkReal x1499=(r10*x1488);
evalcond[0]=((((-1.0)*x1495*x1498))+(((-1.0)*x1495*x1499))+((gconst10*x1497))+((gconst10*x1496)));
evalcond[1]=((((-0.099784)*r21*x1489))+(((-1.0)*cj1*x1490))+(((-0.425485)*sj1))+(((-1.0)*pz))+(((-1.0)*sj1*x1492))+(((-0.099784)*r20*x1488)));
evalcond[2]=((0.1323165)+(((-1.0)*px*x1494))+(((-1.0)*x1493*x1496))+(((-1.0)*x1493*x1497))+((x1491*x1498))+((x1491*x1499))+((gconst11*py)));
evalcond[3]=(((sj1*x1490))+(((-1.0)*cj1*x1492))+(((-1.0)*px*x1495))+(((-1.0)*x1493*x1498))+(((-1.0)*x1493*x1499))+(((-0.425485)*cj1))+(((-1.0)*x1491*x1497))+(((-1.0)*x1491*x1496))+(((-1.0)*py*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1500=((1.0)*cj5);
IkReal x1501=(cj2*sj1);
IkReal x1502=(gconst11*r01);
IkReal x1503=(cj1*sj2);
IkReal x1504=(gconst10*r11);
IkReal x1505=((1.0)*sj5);
IkReal x1506=(gconst11*r00);
IkReal x1507=(gconst10*r10);
IkReal x1508=(cj1*cj2);
IkReal x1509=(sj1*sj2);
IkReal x1510=(cj5*x1509);
if( IKabs(((((-1.0)*r20*x1501*x1505))+(((-1.0)*x1500*x1502*x1508))+((x1504*x1510))+(((-1.0)*r21*x1500*x1503))+(((-1.0)*r21*x1500*x1501))+(((-1.0)*x1505*x1506*x1508))+((sj5*x1506*x1509))+(((-1.0)*x1500*x1504*x1508))+(((-1.0)*r20*x1503*x1505))+((x1502*x1510))+(((-1.0)*x1505*x1507*x1508))+((sj5*x1507*x1509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1508))+(((-1.0)*x1501*x1505*x1507))+(((-1.0)*x1501*x1505*x1506))+(((-1.0)*x1500*x1502*x1503))+(((-1.0)*x1500*x1503*x1504))+(((-1.0)*r21*x1500*x1509))+(((-1.0)*x1503*x1505*x1506))+(((-1.0)*x1503*x1505*x1507))+(((-1.0)*r20*x1505*x1509))+((r20*sj5*x1508))+(((-1.0)*x1500*x1501*x1504))+(((-1.0)*x1500*x1501*x1502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1501*x1505))+(((-1.0)*x1500*x1502*x1508))+((x1504*x1510))+(((-1.0)*r21*x1500*x1503))+(((-1.0)*r21*x1500*x1501))+(((-1.0)*x1505*x1506*x1508))+((sj5*x1506*x1509))+(((-1.0)*x1500*x1504*x1508))+(((-1.0)*r20*x1503*x1505))+((x1502*x1510))+(((-1.0)*x1505*x1507*x1508))+((sj5*x1507*x1509))))+IKsqr((((cj5*r21*x1508))+(((-1.0)*x1501*x1505*x1507))+(((-1.0)*x1501*x1505*x1506))+(((-1.0)*x1500*x1502*x1503))+(((-1.0)*x1500*x1503*x1504))+(((-1.0)*r21*x1500*x1509))+(((-1.0)*x1503*x1505*x1506))+(((-1.0)*x1503*x1505*x1507))+(((-1.0)*r20*x1505*x1509))+((r20*sj5*x1508))+(((-1.0)*x1500*x1501*x1504))+(((-1.0)*x1500*x1501*x1502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r20*x1501*x1505))+(((-1.0)*x1500*x1502*x1508))+((x1504*x1510))+(((-1.0)*r21*x1500*x1503))+(((-1.0)*r21*x1500*x1501))+(((-1.0)*x1505*x1506*x1508))+((sj5*x1506*x1509))+(((-1.0)*x1500*x1504*x1508))+(((-1.0)*r20*x1503*x1505))+((x1502*x1510))+(((-1.0)*x1505*x1507*x1508))+((sj5*x1507*x1509))), (((cj5*r21*x1508))+(((-1.0)*x1501*x1505*x1507))+(((-1.0)*x1501*x1505*x1506))+(((-1.0)*x1500*x1502*x1503))+(((-1.0)*x1500*x1503*x1504))+(((-1.0)*r21*x1500*x1509))+(((-1.0)*x1503*x1505*x1506))+(((-1.0)*x1503*x1505*x1507))+(((-1.0)*r20*x1505*x1509))+((r20*sj5*x1508))+(((-1.0)*x1500*x1501*x1504))+(((-1.0)*x1500*x1501*x1502))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1511=IKsin(j3);
IkReal x1512=IKcos(j3);
IkReal x1513=(cj1*sj2);
IkReal x1514=(cj1*cj2);
IkReal x1515=(sj1*x1511);
IkReal x1516=(sj1*x1512);
evalcond[0]=(((cj5*r21))+((sj2*x1516))+((cj2*x1515))+(((-1.0)*x1512*x1514))+((r20*sj5))+((x1511*x1513)));
evalcond[1]=(((gconst10*r10*sj5))+((cj5*gconst10*r11))+((cj2*x1516))+((cj5*gconst11*r01))+((gconst11*r00*sj5))+(((-1.0)*sj2*x1515))+((x1511*x1514))+((x1512*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
IkReal x1517=((1.0)*(x1519.value));
IkReal x1518=x1330;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1517)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1517)));
IkReal gconst10=((1.0)*r02*x1518);
IkReal gconst11=((-1.0)*r12*x1518);
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal(r02),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
IkReal x1520=((1.0)*(x1522.value));
IkReal x1521=x1330;
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1520)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1520)));
IkReal gconst10=((1.0)*r02*x1521);
IkReal gconst11=((-1.0)*r12*x1521);
IkReal x1523=r21*r21;
IkReal x1524=cj5*cj5;
IkReal x1525=((((2.0)*cj5*r20*r21*sj5))+((x1523*x1524))+(((-1.0)*(r22*r22)))+(((-1.0)*x1524*(r20*r20)))+(((-1.0)*x1523)));
j4eval[0]=x1525;
j4eval[1]=IKsign(x1525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=(cj3*gconst11);
IkReal x1527=(cj2*sj1);
IkReal x1528=(cj5*sj2);
IkReal x1529=(cj1*r10);
IkReal x1530=(r02*sj2);
IkReal x1531=(cj5*gconst11);
IkReal x1532=(gconst10*sj5);
IkReal x1533=(cj1*cj3);
IkReal x1534=(r01*sj2);
IkReal x1535=((1.0)*sj5);
IkReal x1536=(r11*sj2);
IkReal x1537=(gconst11*sj5);
IkReal x1538=(sj1*sj3);
IkReal x1539=((1.0)*gconst10);
IkReal x1540=(gconst11*r12);
IkReal x1541=(gconst10*x1538);
IkReal x1542=(r00*x1539);
IkReal x1543=(cj1*cj2*sj3);
CheckValue<IkReal> x1544 = IKatan2WithCheck(IkReal((((r00*x1528*x1541))+(((-1.0)*cj3*cj5*x1527*x1542))+((x1536*x1537*x1538))+(((-1.0)*x1528*x1533*x1542))+((x1526*x1528*x1529))+(((-1.0)*cj1*x1526*x1535*x1536))+((x1532*x1533*x1534))+((r01*x1532*x1543))+((cj5*r10*x1526*x1527))+(((-1.0)*x1532*x1534*x1538))+((cj2*sj3*x1529*x1531))+(((-1.0)*gconst11*r10*x1528*x1538))+(((-1.0)*cj5*x1542*x1543))+(((-1.0)*gconst11*r11*x1535*x1543))+((cj3*r01*x1527*x1532))+(((-1.0)*r11*x1526*x1527*x1535)))),IkReal((((r12*x1526*x1527))+((x1530*x1541))+((cj1*r12*sj2*x1526))+(((-1.0)*r02*x1539*x1543))+(((-1.0)*sj2*x1538*x1540))+(((-1.0)*cj3*r02*x1527*x1539))+(((-1.0)*x1530*x1533*x1539))+((x1540*x1543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign((((cj5*gconst10*r11))+((r10*x1532))+((r01*x1531))+((r00*x1537)))),-1);
if(!x1545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1544.value)+(((1.5707963267949)*(x1545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1546=IKsin(j4);
IkReal x1547=IKcos(j4);
IkReal x1548=(gconst10*r00);
IkReal x1549=(r21*sj5);
IkReal x1550=(r01*sj5);
IkReal x1551=(gconst10*r02);
IkReal x1552=(gconst11*r10);
IkReal x1553=(cj2*cj3);
IkReal x1554=(r11*sj5);
IkReal x1555=(gconst11*r00);
IkReal x1556=(cj1*sj3);
IkReal x1557=(gconst10*r10);
IkReal x1558=((1.0)*x1547);
IkReal x1559=(cj5*x1546);
IkReal x1560=(gconst11*x1546);
IkReal x1561=(gconst11*x1547);
IkReal x1562=((1.0)*sj1*sj2);
IkReal x1563=(gconst10*x1547);
IkReal x1564=(gconst10*x1546);
evalcond[0]=((((-1.0)*r22*x1558))+((x1546*x1549))+(((-1.0)*r20*x1559)));
evalcond[1]=((((-1.0)*sj3*x1562))+((cj1*cj3*sj2))+((cj2*x1556))+((x1547*x1549))+((sj1*x1553))+((r22*x1546))+(((-1.0)*cj5*r20*x1558)));
evalcond[2]=(((x1550*x1563))+(((-1.0)*gconst11*x1554*x1558))+((cj5*x1547*x1552))+(((-1.0)*cj5*x1548*x1558))+((x1546*x1551))+(((-1.0)*r12*x1560)));
evalcond[3]=((((-1.0)*x1557*x1559))+((x1550*x1560))+(((-1.0)*x1555*x1559))+((x1554*x1564))+(((-1.0)*gconst11*r02*x1558))+(((-1.0)*gconst10*r12*x1558)));
evalcond[4]=((1.0)+((x1550*x1564))+((x1552*x1559))+(((-1.0)*x1548*x1559))+((r12*x1561))+(((-1.0)*x1554*x1560))+(((-1.0)*x1551*x1558)));
evalcond[5]=(((x1550*x1561))+((cj1*x1553))+((x1554*x1563))+((r12*x1564))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj5*x1557*x1558))+((r02*x1560))+(((-1.0)*cj3*x1562))+(((-1.0)*sj2*x1556))+(((-1.0)*cj5*x1555*x1558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1565=r21*r21;
IkReal x1566=cj5*cj5;
IkReal x1567=(cj5*r20);
IkReal x1568=(cj3*sj2);
IkReal x1569=(cj2*sj3);
IkReal x1570=(r21*sj5);
IkReal x1571=(cj1*r22);
IkReal x1572=((1.0)*cj1);
IkReal x1573=(cj2*cj3*sj1);
IkReal x1574=(cj1*x1570);
IkReal x1575=(sj1*sj2*sj3);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x1567*x1570))+(((-1.0)*x1565))+(((-1.0)*x1566*(r20*r20)))+((x1565*x1566)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((((x1569*x1571))+(((-1.0)*r22*x1575))+((x1568*x1571))+((r22*x1573)))),IkReal((((x1567*x1575))+(((-1.0)*x1567*x1569*x1572))+((x1569*x1574))+(((-1.0)*x1570*x1575))+((x1570*x1573))+(((-1.0)*x1567*x1568*x1572))+((x1568*x1574))+(((-1.0)*x1567*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j4);
IkReal x1579=IKcos(j4);
IkReal x1580=(gconst10*r00);
IkReal x1581=(r21*sj5);
IkReal x1582=(r01*sj5);
IkReal x1583=(gconst10*r02);
IkReal x1584=(gconst11*r10);
IkReal x1585=(cj2*cj3);
IkReal x1586=(r11*sj5);
IkReal x1587=(gconst11*r00);
IkReal x1588=(cj1*sj3);
IkReal x1589=(gconst10*r10);
IkReal x1590=((1.0)*x1579);
IkReal x1591=(cj5*x1578);
IkReal x1592=(gconst11*x1578);
IkReal x1593=(gconst11*x1579);
IkReal x1594=((1.0)*sj1*sj2);
IkReal x1595=(gconst10*x1579);
IkReal x1596=(gconst10*x1578);
evalcond[0]=((((-1.0)*r22*x1590))+((x1578*x1581))+(((-1.0)*r20*x1591)));
evalcond[1]=(((cj1*cj3*sj2))+(((-1.0)*cj5*r20*x1590))+((sj1*x1585))+((cj2*x1588))+((r22*x1578))+(((-1.0)*sj3*x1594))+((x1579*x1581)));
evalcond[2]=((((-1.0)*cj5*x1580*x1590))+((x1582*x1595))+((cj5*x1579*x1584))+(((-1.0)*gconst11*x1586*x1590))+((x1578*x1583))+(((-1.0)*r12*x1592)));
evalcond[3]=((((-1.0)*gconst10*r12*x1590))+(((-1.0)*x1589*x1591))+((x1586*x1596))+(((-1.0)*x1587*x1591))+(((-1.0)*gconst11*r02*x1590))+((x1582*x1592)));
evalcond[4]=((1.0)+(((-1.0)*x1583*x1590))+((x1584*x1591))+((r12*x1593))+((x1582*x1596))+(((-1.0)*x1580*x1591))+(((-1.0)*x1586*x1592)));
evalcond[5]=(((x1586*x1595))+(((-1.0)*cj3*x1594))+((cj1*x1585))+(((-1.0)*cj5*x1589*x1590))+((r12*x1596))+(((-1.0)*cj2*sj1*sj3))+((x1582*x1593))+(((-1.0)*cj5*x1587*x1590))+((r02*x1592))+(((-1.0)*sj2*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign((((gconst10*r10*sj5))+((cj5*gconst10*r11))+((cj5*gconst11*r01))+((gconst11*r00*sj5)))),-1);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1597.value)))+(x1598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1599=IKsin(j4);
IkReal x1600=IKcos(j4);
IkReal x1601=(gconst10*r00);
IkReal x1602=(r21*sj5);
IkReal x1603=(r01*sj5);
IkReal x1604=(gconst10*r02);
IkReal x1605=(gconst11*r10);
IkReal x1606=(cj2*cj3);
IkReal x1607=(r11*sj5);
IkReal x1608=(gconst11*r00);
IkReal x1609=(cj1*sj3);
IkReal x1610=(gconst10*r10);
IkReal x1611=((1.0)*x1600);
IkReal x1612=(cj5*x1599);
IkReal x1613=(gconst11*x1599);
IkReal x1614=(gconst11*x1600);
IkReal x1615=((1.0)*sj1*sj2);
IkReal x1616=(gconst10*x1600);
IkReal x1617=(gconst10*x1599);
evalcond[0]=((((-1.0)*r20*x1612))+((x1599*x1602))+(((-1.0)*r22*x1611)));
evalcond[1]=(((cj1*cj3*sj2))+((x1600*x1602))+((sj1*x1606))+((r22*x1599))+((cj2*x1609))+(((-1.0)*cj5*r20*x1611))+(((-1.0)*sj3*x1615)));
evalcond[2]=((((-1.0)*r12*x1613))+((x1599*x1604))+((cj5*x1600*x1605))+(((-1.0)*gconst11*x1607*x1611))+(((-1.0)*cj5*x1601*x1611))+((x1603*x1616)));
evalcond[3]=((((-1.0)*x1608*x1612))+(((-1.0)*gconst11*r02*x1611))+(((-1.0)*x1610*x1612))+(((-1.0)*gconst10*r12*x1611))+((x1607*x1617))+((x1603*x1613)));
evalcond[4]=((1.0)+(((-1.0)*x1601*x1612))+((r12*x1614))+((x1605*x1612))+(((-1.0)*x1607*x1613))+((x1603*x1617))+(((-1.0)*x1604*x1611)));
evalcond[5]=((((-1.0)*cj3*x1615))+((cj1*x1606))+((r12*x1617))+(((-1.0)*cj2*sj1*sj3))+((x1607*x1616))+(((-1.0)*cj5*x1610*x1611))+(((-1.0)*sj2*x1609))+((x1603*x1614))+((r02*x1613))+(((-1.0)*cj5*x1608*x1611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x1618=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1618);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1618);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x1619=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1619);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1619);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j3eval[0]=((IKabs(((((-1.0)*cj1*cj2))+((sj1*sj2)))))+(IKabs((((cj2*sj1))+((cj1*sj2))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*cj2))+((sj1*sj2)))),IkReal((((cj2*sj1))+((cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
IkReal x1620=x1621.value;
j3array[0]=((-1.0)*x1620);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x1620)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j5eval[2];
IkReal x1622=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1622);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1622);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1623=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1623);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1623);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1628=IKPowWithIntegerCheck(r22,-1);
if(!x1628.valid){
continue;
}
IkReal x1624=x1628.value;
IkReal x1625=(sj1*x1624);
IkReal x1626=((1.0)*cj2);
IkReal x1627=(cj1*x1624);
sj4array[0]=(((sj2*sj3*x1625))+(((-1.0)*cj3*x1625*x1626))+(((-1.0)*cj3*sj2*x1627))+(((-1.0)*sj3*x1626*x1627)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x1629=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1629);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1629);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=sj4;
j5eval[1]=((cj0*cj0)+(sj0*sj0));
j5eval[2]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
IkReal x1630=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1630);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1630);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1631=((((-1.0)*r22))+((r22*(cj4*cj4))));
j5eval[0]=x1631;
j5eval[1]=IKsign(x1631);
j5eval[2]=sj4;
j5eval[3]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1632=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1632);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1632);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1633=cj0*cj0;
IkReal x1634=(cj4*px);
IkReal x1635=(cj4*py);
IkReal x1636=((0.1323165)*cj4*sj0);
IkReal x1637=((1.0)*cj0*sj0);
IkReal x1638=((1.0)*x1633);
IkReal x1639=((0.1323165)*cj0*cj4);
CheckValue<IkReal> x1640 = IKatan2WithCheck(IkReal((((r10*x1639))+(((-1.0)*r00*x1636))+(((-1.0)*r10*x1634*x1637))+((r00*x1634))+(((-1.0)*r00*x1635*x1637))+((r10*x1633*x1635))+(((-1.0)*r00*x1634*x1638)))),IkReal(((((-1.0)*r01*x1636))+((r11*x1639))+(((-1.0)*r11*x1634*x1637))+(((-1.0)*r01*x1635*x1637))+(((-1.0)*r01*x1634*x1638))+((r01*x1634))+((r11*x1633*x1635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1640.valid){
continue;
}
CheckValue<IkReal> x1641=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1641.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1640.value)+(((-1.5707963267949)*(x1641.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1642=IKsin(j5);
IkReal x1643=IKcos(j5);
IkReal x1644=((1.0)*cj0);
IkReal x1645=((0.099784)*sj0);
IkReal x1646=(cj2*cj3);
IkReal x1647=(sj1*sj2);
IkReal x1648=((1.0)*sj0);
IkReal x1649=((0.099784)*cj0);
IkReal x1650=((1.0)*sj3);
IkReal x1651=(cj0*r01);
IkReal x1652=(cj1*cj2);
IkReal x1653=(cj1*sj2);
IkReal x1654=(cj0*r10);
IkReal x1655=(r01*sj0);
IkReal x1656=(r00*x1642);
IkReal x1657=(r10*x1642);
IkReal x1658=(cj4*x1643);
IkReal x1659=(r11*x1643);
IkReal x1660=(sj4*x1642);
IkReal x1661=(sj4*x1643);
IkReal x1662=(cj4*x1642);
IkReal x1663=(r01*x1643);
IkReal x1664=(r11*x1662);
IkReal x1665=(sj0*x1657);
evalcond[0]=(((sj0*x1656))+(((-1.0)*x1644*x1659))+(((-1.0)*x1644*x1657))+((x1643*x1655)));
evalcond[1]=((((-1.0)*x1644*x1664))+((x1654*x1658))+((x1655*x1662))+(((-1.0)*r00*x1648*x1658)));
evalcond[2]=((((-1.0)*r10*x1648*x1661))+((r11*sj0*x1660))+((x1651*x1660))+(((-1.0)*r00*x1644*x1661)));
evalcond[3]=((1.0)+((x1654*x1661))+((x1655*x1660))+(((-1.0)*r11*x1644*x1660))+(((-1.0)*r00*x1648*x1661)));
evalcond[4]=((0.1323165)+(((-1.0)*px*x1648))+(((-1.0)*x1645*x1656))+(((-1.0)*x1645*x1663))+((x1649*x1659))+((x1649*x1657))+((cj0*py)));
evalcond[5]=(((sj0*x1659))+((sj1*x1646))+x1665+(((-1.0)*x1647*x1650))+((cj3*x1653))+((cj0*x1656))+((sj3*x1652))+((x1643*x1651)));
evalcond[6]=((((-1.0)*py*x1648))+(((0.39276097)*x1647))+(((-1.0)*px*x1644))+(((-1.0)*x1645*x1657))+(((-1.0)*x1645*x1659))+(((-0.425485)*cj1))+(((-0.39276097)*x1652))+(((-1.0)*x1649*x1656))+(((-1.0)*x1649*x1663)));
evalcond[7]=(((sj0*x1664))+(((-1.0)*cj2*sj1*x1650))+((cj1*x1646))+(((-1.0)*cj3*x1647))+(((-1.0)*r10*x1648*x1658))+(((-1.0)*x1650*x1653))+((x1651*x1662))+(((-1.0)*r00*x1644*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1666=((1.0)*sj0*sj4);
IkReal x1667=((1.0)*cj0*sj4);
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign((r22*(((-1.0)+(cj4*cj4))))),-1);
if(!x1668.valid){
continue;
}
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1667))+(((-1.0)*r10*x1666)))),IkReal(((((-1.0)*r01*x1667))+(((-1.0)*r11*x1666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1668.value)))+(x1669.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1670=IKsin(j5);
IkReal x1671=IKcos(j5);
IkReal x1672=((1.0)*cj0);
IkReal x1673=((0.099784)*sj0);
IkReal x1674=(cj2*cj3);
IkReal x1675=(sj1*sj2);
IkReal x1676=((1.0)*sj0);
IkReal x1677=((0.099784)*cj0);
IkReal x1678=((1.0)*sj3);
IkReal x1679=(cj0*r01);
IkReal x1680=(cj1*cj2);
IkReal x1681=(cj1*sj2);
IkReal x1682=(cj0*r10);
IkReal x1683=(r01*sj0);
IkReal x1684=(r00*x1670);
IkReal x1685=(r10*x1670);
IkReal x1686=(cj4*x1671);
IkReal x1687=(r11*x1671);
IkReal x1688=(sj4*x1670);
IkReal x1689=(sj4*x1671);
IkReal x1690=(cj4*x1670);
IkReal x1691=(r01*x1671);
IkReal x1692=(r11*x1690);
IkReal x1693=(sj0*x1685);
evalcond[0]=(((x1671*x1683))+(((-1.0)*x1672*x1685))+(((-1.0)*x1672*x1687))+((sj0*x1684)));
evalcond[1]=((((-1.0)*r00*x1676*x1686))+((x1683*x1690))+(((-1.0)*x1672*x1692))+((x1682*x1686)));
evalcond[2]=((((-1.0)*r10*x1676*x1689))+((r11*sj0*x1688))+((x1679*x1688))+(((-1.0)*r00*x1672*x1689)));
evalcond[3]=((1.0)+(((-1.0)*r00*x1676*x1689))+(((-1.0)*r11*x1672*x1688))+((x1682*x1689))+((x1683*x1688)));
evalcond[4]=((0.1323165)+((x1677*x1687))+((x1677*x1685))+(((-1.0)*px*x1676))+(((-1.0)*x1673*x1684))+(((-1.0)*x1673*x1691))+((cj0*py)));
evalcond[5]=(((sj1*x1674))+x1693+((sj0*x1687))+((cj0*x1684))+((cj3*x1681))+((x1671*x1679))+((sj3*x1680))+(((-1.0)*x1675*x1678)));
evalcond[6]=((((-1.0)*x1677*x1684))+(((-1.0)*px*x1672))+(((-1.0)*x1673*x1687))+(((-1.0)*x1673*x1685))+(((-1.0)*py*x1676))+(((0.39276097)*x1675))+(((-0.425485)*cj1))+(((-1.0)*x1677*x1691))+(((-0.39276097)*x1680)));
evalcond[7]=((((-1.0)*r10*x1676*x1686))+((sj0*x1692))+(((-1.0)*cj3*x1675))+(((-1.0)*x1678*x1681))+((cj1*x1674))+((x1679*x1690))+(((-1.0)*r00*x1672*x1686))+(((-1.0)*cj2*sj1*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1694.valid){
continue;
}
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal((((r01*sj0))+(((-1.0)*cj0*r11)))),IkReal(((((-1.0)*r00*sj0))+((cj0*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1694.value)))+(x1695.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1696=IKsin(j5);
IkReal x1697=IKcos(j5);
IkReal x1698=((1.0)*cj0);
IkReal x1699=((0.099784)*sj0);
IkReal x1700=(cj2*cj3);
IkReal x1701=(sj1*sj2);
IkReal x1702=((1.0)*sj0);
IkReal x1703=((0.099784)*cj0);
IkReal x1704=((1.0)*sj3);
IkReal x1705=(cj0*r01);
IkReal x1706=(cj1*cj2);
IkReal x1707=(cj1*sj2);
IkReal x1708=(cj0*r10);
IkReal x1709=(r01*sj0);
IkReal x1710=(r00*x1696);
IkReal x1711=(r10*x1696);
IkReal x1712=(cj4*x1697);
IkReal x1713=(r11*x1697);
IkReal x1714=(sj4*x1696);
IkReal x1715=(sj4*x1697);
IkReal x1716=(cj4*x1696);
IkReal x1717=(r01*x1697);
IkReal x1718=(r11*x1716);
IkReal x1719=(sj0*x1711);
evalcond[0]=(((x1697*x1709))+((sj0*x1710))+(((-1.0)*x1698*x1713))+(((-1.0)*x1698*x1711)));
evalcond[1]=(((x1709*x1716))+(((-1.0)*r00*x1702*x1712))+((x1708*x1712))+(((-1.0)*x1698*x1718)));
evalcond[2]=((((-1.0)*r00*x1698*x1715))+((r11*sj0*x1714))+((x1705*x1714))+(((-1.0)*r10*x1702*x1715)));
evalcond[3]=((1.0)+((x1709*x1714))+(((-1.0)*r00*x1702*x1715))+(((-1.0)*r11*x1698*x1714))+((x1708*x1715)));
evalcond[4]=((0.1323165)+((x1703*x1713))+((x1703*x1711))+(((-1.0)*px*x1702))+(((-1.0)*x1699*x1717))+(((-1.0)*x1699*x1710))+((cj0*py)));
evalcond[5]=(((x1697*x1705))+x1719+((cj0*x1710))+((sj3*x1706))+((cj3*x1707))+(((-1.0)*x1701*x1704))+((sj1*x1700))+((sj0*x1713)));
evalcond[6]=((((-1.0)*py*x1702))+(((-0.39276097)*x1706))+(((-1.0)*x1699*x1711))+(((-1.0)*x1699*x1713))+(((-0.425485)*cj1))+(((-1.0)*x1703*x1717))+(((-1.0)*x1703*x1710))+(((0.39276097)*x1701))+(((-1.0)*px*x1698)));
evalcond[7]=(((cj1*x1700))+(((-1.0)*cj2*sj1*x1704))+(((-1.0)*r00*x1698*x1712))+(((-1.0)*cj3*x1701))+(((-1.0)*x1704*x1707))+((x1705*x1716))+(((-1.0)*r10*x1702*x1712))+((sj0*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1720=(cj1*sj0);
IkReal x1721=((0.03919126063048)*cj0);
IkReal x1722=(sj1*sj2);
IkReal x1723=((0.03919126063048)*sj0*x1722);
IkReal x1724=(((x1721*x1722))+(((0.013203069636)*sj0)));
IkReal x1725=((((0.04245659524)*cj0*cj1))+((cj1*cj2*x1721)));
IkReal x1726=((((0.04245659524)*x1720))+(((0.013203069636)*cj0))+(((0.03919126063048)*cj2*x1720)));
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(((((-0.099784)*rxp1_2))+((r11*((x1725+(((-1.0)*x1724))))))+((r01*((x1723+(((-1.0)*x1726)))))))),IkReal((((r10*((x1724+(((-1.0)*x1725))))))+(((0.099784)*rxp0_2))+((r00*((x1726+(((-1.0)*x1723)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1728.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1727.value)+(((-1.5707963267949)*(x1728.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1729=IKsin(j5);
IkReal x1730=IKcos(j5);
IkReal x1731=(cj1*cj2);
IkReal x1732=(sj1*sj2);
IkReal x1733=((1.0)*cj0);
IkReal x1734=((1.0)*sj0);
IkReal x1735=((0.099784)*cj0);
IkReal x1736=(r10*x1729);
IkReal x1737=(r01*x1730);
IkReal x1738=(r11*x1730);
IkReal x1739=((0.099784)*sj0*x1729);
IkReal x1740=(cj0*r00*x1729);
IkReal x1741=((0.099784)*x1738);
evalcond[0]=((((-1.0)*x1733*x1736))+(((-1.0)*x1733*x1738))+((sj0*x1737))+((r00*sj0*x1729)));
evalcond[1]=((0.1323165)+(((-0.099784)*sj0*x1737))+(((-1.0)*r00*x1739))+((x1735*x1736))+((x1735*x1738))+(((-1.0)*px*x1734))+((cj0*py)));
evalcond[2]=(((cj0*x1737))+(((-1.0)*sj3*x1732))+((cj1*cj3*sj2))+x1740+((sj0*x1736))+((sj0*x1738))+((cj2*cj3*sj1))+((sj3*x1731)));
evalcond[3]=((((-0.099784)*sj0*x1736))+(((-1.0)*py*x1734))+(((0.39276097)*x1732))+(((-1.0)*sj0*x1741))+(((-0.425485)*cj1))+(((-1.0)*px*x1733))+(((-1.0)*x1735*x1737))+(((-1.0)*r00*x1729*x1735))+(((-0.39276097)*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1742=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1742);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1742);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1743=(r01*sj5);
IkReal x1744=(cj5*r10);
IkReal x1745=(r11*sj5);
IkReal x1746=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*sj0*x1746))+((sj0*x1743))+(((-1.0)*cj0*x1745))+((cj0*x1744)));
j4eval[1]=((((-1.0)*cj0*x1746))+(((-1.0)*sj0*x1744))+((sj0*x1745))+((cj0*x1743)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1747=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1748=((1.0)*cj5);
j4eval[0]=r22;
j4eval[1]=(((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1748))+(((-1.0)*r10*sj0*x1748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1749=(cj2*sj1);
IkReal x1750=(sj1*sj2);
IkReal x1751=((1.0)*cj5);
IkReal x1752=(cj1*sj3);
IkReal x1753=((1.0)*cj1*cj3);
CheckValue<IkReal> x1754=IKPowWithIntegerCheck(r22,-1);
if(!x1754.valid){
continue;
}
CheckValue<IkReal> x1755=IKPowWithIntegerCheck((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1751))+(((-1.0)*r10*sj0*x1751))),-1);
if(!x1755.valid){
continue;
}
if( IKabs(((x1754.value)*(((((-1.0)*cj2*x1752))+(((-1.0)*sj2*x1753))+((sj3*x1750))+(((-1.0)*cj3*x1749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1755.value)*((((cj3*x1750))+(((-1.0)*cj2*x1753))+((sj2*x1752))+((sj3*x1749)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1754.value)*(((((-1.0)*cj2*x1752))+(((-1.0)*sj2*x1753))+((sj3*x1750))+(((-1.0)*cj3*x1749))))))+IKsqr(((x1755.value)*((((cj3*x1750))+(((-1.0)*cj2*x1753))+((sj2*x1752))+((sj3*x1749))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1754.value)*(((((-1.0)*cj2*x1752))+(((-1.0)*sj2*x1753))+((sj3*x1750))+(((-1.0)*cj3*x1749))))), ((x1755.value)*((((cj3*x1750))+(((-1.0)*cj2*x1753))+((sj2*x1752))+((sj3*x1749))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1756=IKcos(j4);
IkReal x1757=IKsin(j4);
IkReal x1758=((1.0)*cj0);
IkReal x1759=((1.0)*sj0);
IkReal x1760=(cj2*cj3);
IkReal x1761=(cj1*sj3);
IkReal x1762=((1.0)*sj1*sj2);
IkReal x1763=(r11*sj5*x1757);
IkReal x1764=(cj5*r10*x1756);
IkReal x1765=(cj5*r00*x1757);
IkReal x1766=(r11*sj5*x1756);
IkReal x1767=(cj5*r00*x1756);
IkReal x1768=(cj5*r10*x1757);
IkReal x1769=(r01*sj5*x1756);
IkReal x1770=(r01*sj5*x1757);
evalcond[0]=((-1.0)*r22*x1756);
evalcond[1]=(((sj1*x1760))+(((-1.0)*sj3*x1762))+((cj1*cj3*sj2))+((r22*x1757))+((cj2*x1761)));
evalcond[2]=(((sj0*x1769))+((cj0*x1764))+(((-1.0)*x1759*x1767))+(((-1.0)*x1758*x1766)));
evalcond[3]=(((sj0*x1763))+(((-1.0)*x1759*x1768))+((cj0*x1770))+(((-1.0)*x1758*x1765)));
evalcond[4]=((1.0)+((cj0*x1768))+(((-1.0)*x1759*x1765))+(((-1.0)*x1758*x1763))+((sj0*x1770)));
evalcond[5]=(((sj0*x1766))+(((-1.0)*cj3*x1762))+((cj0*x1769))+(((-1.0)*x1759*x1764))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*x1758*x1767))+(((-1.0)*sj2*x1761))+((cj1*x1760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1771=((1.0)*cj5);
IkReal x1772=(r01*sj5);
IkReal x1773=(r11*sj5);
CheckValue<IkReal> x1774=IKPowWithIntegerCheck((((cj0*cj5*r10))+(((-1.0)*cj0*x1773))+((sj0*x1772))+(((-1.0)*r00*sj0*x1771))),-1);
if(!x1774.valid){
continue;
}
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(((((-1.0)*cj0*r00*x1771))+((cj0*x1772))+(((-1.0)*r10*sj0*x1771))+((sj0*x1773))),-1);
if(!x1775.valid){
continue;
}
if( IKabs(((-1.0)*(x1774.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1775.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x1774.value)))+IKsqr(((x1775.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x1774.value)), ((x1775.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1776=IKcos(j4);
IkReal x1777=IKsin(j4);
IkReal x1778=((1.0)*cj0);
IkReal x1779=((1.0)*sj0);
IkReal x1780=(cj2*cj3);
IkReal x1781=(cj1*sj3);
IkReal x1782=((1.0)*sj1*sj2);
IkReal x1783=(r11*sj5*x1777);
IkReal x1784=(cj5*r10*x1776);
IkReal x1785=(cj5*r00*x1777);
IkReal x1786=(r11*sj5*x1776);
IkReal x1787=(cj5*r00*x1776);
IkReal x1788=(cj5*r10*x1777);
IkReal x1789=(r01*sj5*x1776);
IkReal x1790=(r01*sj5*x1777);
evalcond[0]=((-1.0)*r22*x1776);
evalcond[1]=(((r22*x1777))+((cj1*cj3*sj2))+((sj1*x1780))+((cj2*x1781))+(((-1.0)*sj3*x1782)));
evalcond[2]=(((sj0*x1789))+(((-1.0)*x1779*x1787))+(((-1.0)*x1778*x1786))+((cj0*x1784)));
evalcond[3]=(((sj0*x1783))+(((-1.0)*x1779*x1788))+(((-1.0)*x1778*x1785))+((cj0*x1790)));
evalcond[4]=((1.0)+((sj0*x1790))+(((-1.0)*x1779*x1785))+(((-1.0)*x1778*x1783))+((cj0*x1788)));
evalcond[5]=((((-1.0)*sj2*x1781))+((sj0*x1786))+((cj1*x1780))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj3*x1782))+(((-1.0)*x1779*x1784))+(((-1.0)*x1778*x1787))+((cj0*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1791=(cj1*sj0);
IkReal x1792=((0.03919126063048)*cj0);
IkReal x1793=(sj1*sj2);
IkReal x1794=((0.03919126063048)*sj0*x1793);
IkReal x1795=((((0.013203069636)*sj0))+((x1792*x1793)));
IkReal x1796=((((0.04245659524)*cj0*cj1))+((cj1*cj2*x1792)));
IkReal x1797=((((0.04245659524)*x1791))+(((0.013203069636)*cj0))+(((0.03919126063048)*cj2*x1791)));
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1798.valid){
continue;
}
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal(((((-0.099784)*rxp1_2))+((r11*(((((-1.0)*x1795))+x1796))))+((r01*(((((-1.0)*x1797))+x1794)))))),IkReal((((r00*(((((-1.0)*x1794))+x1797))))+(((0.099784)*rxp0_2))+((r10*(((((-1.0)*x1796))+x1795)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1798.value)))+(x1799.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1800=IKsin(j5);
IkReal x1801=IKcos(j5);
IkReal x1802=((0.099784)*r10);
IkReal x1803=((0.099784)*r01);
IkReal x1804=((0.099784)*r11);
IkReal x1805=((1.0)*sj0);
IkReal x1806=((0.099784)*r00);
IkReal x1807=((1.0)*cj0);
IkReal x1808=(sj0*x1800);
IkReal x1809=(cj0*x1801);
IkReal x1810=(sj0*x1801);
IkReal x1811=(cj0*x1800);
evalcond[0]=((((-1.0)*r11*x1801*x1807))+(((-1.0)*r10*x1800*x1807))+((r01*x1810))+((r00*x1808)));
evalcond[1]=((0.1323165)+((x1802*x1811))+(((-1.0)*x1803*x1810))+(((-1.0)*x1806*x1808))+((cj0*py))+(((-1.0)*px*x1805))+((x1804*x1809)));
evalcond[2]=((((-0.39276097)*cj1*cj2))+(((-1.0)*x1804*x1810))+(((0.39276097)*sj1*sj2))+(((-1.0)*x1802*x1808))+(((-1.0)*py*x1805))+(((-0.425485)*cj1))+(((-1.0)*x1806*x1811))+(((-1.0)*px*x1807))+(((-1.0)*x1803*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1812=(r10*sj5);
IkReal x1813=((1.0)*sj2);
IkReal x1814=(cj5*sj1);
IkReal x1815=(sj1*sj2);
IkReal x1816=(cj1*cj5);
IkReal x1817=((1.0)*cj2);
IkReal x1818=(cj0*r01);
IkReal x1819=(sj0*x1817);
IkReal x1820=(r11*x1816);
IkReal x1821=(cj0*r00*sj5);
IkReal x1822=(x1817*x1818);
if( IKabs(((((-1.0)*cj1*x1812*x1819))+(((-1.0)*x1819*x1820))+(((-1.0)*cj1*x1817*x1821))+(((-1.0)*x1816*x1822))+((sj2*x1814*x1818))+((r11*sj0*sj2*x1814))+((sj0*x1812*x1815))+((x1815*x1821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1817*x1821))+(((-1.0)*sj0*x1813*x1820))+(((-1.0)*sj1*x1812*x1819))+(((-1.0)*r11*x1814*x1819))+(((-1.0)*cj1*sj0*x1812*x1813))+(((-1.0)*cj1*x1813*x1821))+(((-1.0)*x1813*x1816*x1818))+(((-1.0)*x1814*x1822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1812*x1819))+(((-1.0)*x1819*x1820))+(((-1.0)*cj1*x1817*x1821))+(((-1.0)*x1816*x1822))+((sj2*x1814*x1818))+((r11*sj0*sj2*x1814))+((sj0*x1812*x1815))+((x1815*x1821))))+IKsqr(((((-1.0)*sj1*x1817*x1821))+(((-1.0)*sj0*x1813*x1820))+(((-1.0)*sj1*x1812*x1819))+(((-1.0)*r11*x1814*x1819))+(((-1.0)*cj1*sj0*x1812*x1813))+(((-1.0)*cj1*x1813*x1821))+(((-1.0)*x1813*x1816*x1818))+(((-1.0)*x1814*x1822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj1*x1812*x1819))+(((-1.0)*x1819*x1820))+(((-1.0)*cj1*x1817*x1821))+(((-1.0)*x1816*x1822))+((sj2*x1814*x1818))+((r11*sj0*sj2*x1814))+((sj0*x1812*x1815))+((x1815*x1821))), ((((-1.0)*sj1*x1817*x1821))+(((-1.0)*sj0*x1813*x1820))+(((-1.0)*sj1*x1812*x1819))+(((-1.0)*r11*x1814*x1819))+(((-1.0)*cj1*sj0*x1812*x1813))+(((-1.0)*cj1*x1813*x1821))+(((-1.0)*x1813*x1816*x1818))+(((-1.0)*x1814*x1822))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1823=IKsin(j3);
IkReal x1824=IKcos(j3);
IkReal x1825=(sj2*x1823);
IkReal x1826=(cj2*x1823);
IkReal x1827=(sj2*x1824);
IkReal x1828=(cj2*x1824);
evalcond[0]=((((-1.0)*cj1*x1828))+((cj1*x1825))+((sj1*x1826))+((sj1*x1827)));
evalcond[1]=(((cj0*cj5*r01))+((cj5*r11*sj0))+(((-1.0)*sj1*x1825))+((cj1*x1827))+((cj1*x1826))+((sj1*x1828))+((cj0*r00*sj5))+((r10*sj0*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1829=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1829);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1829);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1830=(r01*sj5);
IkReal x1831=(cj5*r10);
IkReal x1832=(r11*sj5);
IkReal x1833=((1.0)*cj5*r00);
j4eval[0]=(((sj0*x1830))+(((-1.0)*sj0*x1833))+((cj0*x1831))+(((-1.0)*cj0*x1832)));
j4eval[1]=(((sj0*x1832))+(((-1.0)*cj0*x1833))+((cj0*x1830))+(((-1.0)*sj0*x1831)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1834=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1834);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1834);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1835=((1.0)*cj5);
j4eval[0]=r22;
j4eval[1]=(((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1835))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1835)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=(cj2*sj1);
IkReal x1837=(sj1*sj2);
IkReal x1838=((1.0)*cj5);
IkReal x1839=(cj1*sj3);
IkReal x1840=((1.0)*cj1*cj3);
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(r22,-1);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1838))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1838))),-1);
if(!x1842.valid){
continue;
}
if( IKabs(((x1841.value)*(((((-1.0)*sj2*x1840))+((sj3*x1837))+(((-1.0)*cj3*x1836))+(((-1.0)*cj2*x1839)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1842.value)*((((sj3*x1836))+((sj2*x1839))+(((-1.0)*cj2*x1840))+((cj3*x1837)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1841.value)*(((((-1.0)*sj2*x1840))+((sj3*x1837))+(((-1.0)*cj3*x1836))+(((-1.0)*cj2*x1839))))))+IKsqr(((x1842.value)*((((sj3*x1836))+((sj2*x1839))+(((-1.0)*cj2*x1840))+((cj3*x1837))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1841.value)*(((((-1.0)*sj2*x1840))+((sj3*x1837))+(((-1.0)*cj3*x1836))+(((-1.0)*cj2*x1839))))), ((x1842.value)*((((sj3*x1836))+((sj2*x1839))+(((-1.0)*cj2*x1840))+((cj3*x1837))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1843=IKcos(j4);
IkReal x1844=IKsin(j4);
IkReal x1845=((1.0)*cj0);
IkReal x1846=((1.0)*sj0);
IkReal x1847=(cj2*cj3);
IkReal x1848=(cj1*sj3);
IkReal x1849=((1.0)*sj1*sj2);
IkReal x1850=(r11*sj5*x1844);
IkReal x1851=(cj5*r10*x1843);
IkReal x1852=(cj5*r00*x1844);
IkReal x1853=(r11*sj5*x1843);
IkReal x1854=(cj5*r00*x1843);
IkReal x1855=(cj5*r10*x1844);
IkReal x1856=(r01*sj5*x1843);
IkReal x1857=(r01*sj5*x1844);
evalcond[0]=((-1.0)*r22*x1843);
evalcond[1]=(((r22*x1844))+((cj1*cj3*sj2))+(((-1.0)*sj3*x1849))+((sj1*x1847))+((cj2*x1848)));
evalcond[2]=((((-1.0)*x1845*x1853))+((sj0*x1856))+(((-1.0)*x1846*x1854))+((cj0*x1851)));
evalcond[3]=((((-1.0)*x1845*x1852))+((sj0*x1850))+(((-1.0)*x1846*x1855))+((cj0*x1857)));
evalcond[4]=((1.0)+(((-1.0)*x1845*x1850))+((sj0*x1857))+(((-1.0)*x1846*x1852))+((cj0*x1855)));
evalcond[5]=((((-1.0)*x1845*x1854))+(((-1.0)*cj3*x1849))+(((-1.0)*cj2*sj1*sj3))+((cj1*x1847))+((sj0*x1853))+(((-1.0)*sj2*x1848))+(((-1.0)*x1846*x1851))+((cj0*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1858=((1.0)*cj5);
IkReal x1859=(r01*sj5);
IkReal x1860=(r11*sj5);
CheckValue<IkReal> x1861=IKPowWithIntegerCheck((((cj0*cj5*r10))+(((-1.0)*cj0*x1860))+(((-1.0)*r00*sj0*x1858))+((sj0*x1859))),-1);
if(!x1861.valid){
continue;
}
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(((((-1.0)*cj0*r00*x1858))+((sj0*x1860))+(((-1.0)*r10*sj0*x1858))+((cj0*x1859))),-1);
if(!x1862.valid){
continue;
}
if( IKabs(((-1.0)*(x1861.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1862.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x1861.value)))+IKsqr(((x1862.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x1861.value)), ((x1862.value)*(((((-1.0)*cj1*cj2*cj3))+((cj3*sj1*sj2))+((cj1*sj2*sj3))+((cj2*sj1*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1863=IKcos(j4);
IkReal x1864=IKsin(j4);
IkReal x1865=((1.0)*cj0);
IkReal x1866=((1.0)*sj0);
IkReal x1867=(cj2*cj3);
IkReal x1868=(cj1*sj3);
IkReal x1869=((1.0)*sj1*sj2);
IkReal x1870=(r11*sj5*x1864);
IkReal x1871=(cj5*r10*x1863);
IkReal x1872=(cj5*r00*x1864);
IkReal x1873=(r11*sj5*x1863);
IkReal x1874=(cj5*r00*x1863);
IkReal x1875=(cj5*r10*x1864);
IkReal x1876=(r01*sj5*x1863);
IkReal x1877=(r01*sj5*x1864);
evalcond[0]=((-1.0)*r22*x1863);
evalcond[1]=(((cj1*cj3*sj2))+((r22*x1864))+(((-1.0)*sj3*x1869))+((sj1*x1867))+((cj2*x1868)));
evalcond[2]=(((sj0*x1876))+(((-1.0)*x1866*x1874))+(((-1.0)*x1865*x1873))+((cj0*x1871)));
evalcond[3]=(((sj0*x1870))+(((-1.0)*x1866*x1875))+(((-1.0)*x1865*x1872))+((cj0*x1877)));
evalcond[4]=((1.0)+((sj0*x1877))+(((-1.0)*x1866*x1872))+(((-1.0)*x1865*x1870))+((cj0*x1875)));
evalcond[5]=(((cj1*x1867))+((sj0*x1873))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*x1866*x1871))+(((-1.0)*sj2*x1868))+(((-1.0)*cj3*x1869))+(((-1.0)*x1865*x1874))+((cj0*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1878=cj0*cj0;
IkReal x1879=((0.39276097)*cj0);
IkReal x1880=(cj1*cj2);
IkReal x1881=((1.0)*r10);
IkReal x1882=(sj1*sj2);
IkReal x1883=((0.39276097)*sj0);
IkReal x1884=(cj0*sj0);
IkReal x1885=((0.425485)*cj1);
IkReal x1886=((1.0)*r01);
IkReal x1887=(py*x1878);
IkReal x1888=(px*x1878);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1880*x1883))+((r11*x1879*x1880))+((cj0*r11*x1885))+(((-1.0)*r11*x1879*x1882))+((r01*x1887))+((py*r11*x1884))+((r01*x1882*x1883))+(((-1.0)*px*x1884*x1886))+(((-1.0)*r01*sj0*x1885))+((r11*x1888))+(((-1.0)*py*x1886)))),IkReal(((((-1.0)*py*x1881*x1884))+((r00*sj0*x1885))+(((-1.0)*r10*x1879*x1880))+(((-1.0)*r00*x1882*x1883))+(((-1.0)*cj0*r10*x1885))+((px*r00*x1884))+((r00*x1880*x1883))+((r10*x1879*x1882))+((py*r00))+(((-1.0)*r00*x1887))+(((-1.0)*x1881*x1888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1890.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1889.value)+(((-1.5707963267949)*(x1890.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1891=IKsin(j5);
IkReal x1892=IKcos(j5);
IkReal x1893=((0.39276097)*sj2);
IkReal x1894=((0.39276097)*cj2);
IkReal x1895=((1.0)*cj0);
IkReal x1896=((1.0)*sj0);
IkReal x1897=((0.099784)*sj0);
IkReal x1898=((0.099784)*cj0);
IkReal x1899=(r10*x1891);
IkReal x1900=(r01*x1892);
IkReal x1901=((0.099784)*r00*x1891);
IkReal x1902=((0.099784)*r11*x1892);
evalcond[0]=((((-1.0)*r11*x1892*x1895))+((sj0*x1900))+(((-1.0)*x1895*x1899))+((r00*sj0*x1891)));
evalcond[1]=((((-1.0)*sj1*x1894))+(((-0.099784)*r20*x1891))+(((-1.0)*cj1*x1893))+(((-0.425485)*sj1))+(((-1.0)*pz))+(((-0.099784)*r21*x1892)));
evalcond[2]=((0.1323165)+(((-1.0)*px*x1896))+((x1898*x1899))+(((-1.0)*r00*x1891*x1897))+((r11*x1892*x1898))+((cj0*py))+(((-1.0)*x1897*x1900)));
evalcond[3]=((((-1.0)*x1897*x1899))+(((-1.0)*px*x1895))+(((-1.0)*r11*x1892*x1897))+(((-1.0)*cj1*x1894))+(((-1.0)*x1898*x1900))+(((-0.425485)*cj1))+(((-1.0)*r00*x1891*x1898))+((sj1*x1893))+(((-1.0)*py*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1903=((1.0)*sj0);
IkReal x1904=((1.0)*r21);
IkReal x1905=(sj1*sj2);
IkReal x1906=(cj2*cj5);
IkReal x1907=(r10*sj5);
IkReal x1908=(cj1*sj2);
IkReal x1909=(r20*sj5);
IkReal x1910=(cj1*cj2);
IkReal x1911=(cj2*x1907);
IkReal x1912=(cj5*x1908);
IkReal x1913=(cj0*r00*sj5);
IkReal x1914=((1.0)*cj0*r01);
IkReal x1915=((1.0)*cj2*sj1);
if( IKabs((((cj5*r11*sj0*x1905))+((x1905*x1913))+(((-1.0)*x1904*x1912))+(((-1.0)*x1910*x1913))+(((-1.0)*x1903*x1907*x1910))+(((-1.0)*cj1*x1906*x1914))+((sj0*x1905*x1907))+(((-1.0)*x1908*x1909))+(((-1.0)*cj1*r11*x1903*x1906))+(((-1.0)*x1909*x1915))+((cj0*cj5*r01*x1905))+(((-1.0)*sj1*x1904*x1906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1908*x1913))+((cj1*r21*x1906))+(((-1.0)*x1905*x1909))+(((-1.0)*sj1*x1906*x1914))+(((-1.0)*r11*sj1*x1903*x1906))+(((-1.0)*x1903*x1907*x1908))+(((-1.0)*r11*x1903*x1912))+((x1909*x1910))+(((-1.0)*x1913*x1915))+(((-1.0)*x1912*x1914))+(((-1.0)*cj5*x1904*x1905))+(((-1.0)*sj1*x1903*x1911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj0*x1905))+((x1905*x1913))+(((-1.0)*x1904*x1912))+(((-1.0)*x1910*x1913))+(((-1.0)*x1903*x1907*x1910))+(((-1.0)*cj1*x1906*x1914))+((sj0*x1905*x1907))+(((-1.0)*x1908*x1909))+(((-1.0)*cj1*r11*x1903*x1906))+(((-1.0)*x1909*x1915))+((cj0*cj5*r01*x1905))+(((-1.0)*sj1*x1904*x1906))))+IKsqr(((((-1.0)*x1908*x1913))+((cj1*r21*x1906))+(((-1.0)*x1905*x1909))+(((-1.0)*sj1*x1906*x1914))+(((-1.0)*r11*sj1*x1903*x1906))+(((-1.0)*x1903*x1907*x1908))+(((-1.0)*r11*x1903*x1912))+((x1909*x1910))+(((-1.0)*x1913*x1915))+(((-1.0)*x1912*x1914))+(((-1.0)*cj5*x1904*x1905))+(((-1.0)*sj1*x1903*x1911))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r11*sj0*x1905))+((x1905*x1913))+(((-1.0)*x1904*x1912))+(((-1.0)*x1910*x1913))+(((-1.0)*x1903*x1907*x1910))+(((-1.0)*cj1*x1906*x1914))+((sj0*x1905*x1907))+(((-1.0)*x1908*x1909))+(((-1.0)*cj1*r11*x1903*x1906))+(((-1.0)*x1909*x1915))+((cj0*cj5*r01*x1905))+(((-1.0)*sj1*x1904*x1906))), ((((-1.0)*x1908*x1913))+((cj1*r21*x1906))+(((-1.0)*x1905*x1909))+(((-1.0)*sj1*x1906*x1914))+(((-1.0)*r11*sj1*x1903*x1906))+(((-1.0)*x1903*x1907*x1908))+(((-1.0)*r11*x1903*x1912))+((x1909*x1910))+(((-1.0)*x1913*x1915))+(((-1.0)*x1912*x1914))+(((-1.0)*cj5*x1904*x1905))+(((-1.0)*sj1*x1903*x1911))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1916=IKsin(j3);
IkReal x1917=IKcos(j3);
IkReal x1918=(sj2*x1916);
IkReal x1919=(cj2*x1916);
IkReal x1920=(sj2*x1917);
IkReal x1921=(cj2*x1917);
evalcond[0]=(((cj5*r21))+((cj1*x1918))+((sj1*x1919))+(((-1.0)*cj1*x1921))+((r20*sj5))+((sj1*x1920)));
evalcond[1]=(((cj1*x1920))+((cj0*cj5*r01))+((cj5*r11*sj0))+((cj1*x1919))+((cj0*r00*sj5))+((r10*sj0*sj5))+(((-1.0)*sj1*x1918))+((sj1*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1922=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1922;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1923=r21*r21;
IkReal x1924=cj5*cj5;
IkReal x1925=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1923))+((x1923*x1924))+(((-1.0)*(r22*r22)))+(((-1.0)*x1924*(r20*r20))));
j4eval[0]=x1925;
j4eval[1]=IKsign(x1925);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1926=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1926;
j4eval[1]=IKsign(x1926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1927=(sj0*sj5);
IkReal x1928=(cj5*r00);
IkReal x1929=(sj2*sj3);
IkReal x1930=(cj2*cj3);
IkReal x1931=(cj0*cj5);
IkReal x1932=(r10*sj1);
IkReal x1933=((1.0)*sj0);
IkReal x1934=(r01*sj1);
IkReal x1935=(cj0*r12);
IkReal x1936=(cj1*cj2*sj3);
IkReal x1937=(cj1*cj3*sj2);
IkReal x1938=(sj0*sj1*x1929);
IkReal x1939=(cj0*r11*sj1*sj5);
IkReal x1940=((1.0)*cj0*r11*sj5);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(((((-1.0)*x1928*x1933*x1936))+(((-1.0)*x1928*x1933*x1937))+(((-1.0)*x1930*x1939))+(((-1.0)*x1937*x1940))+((r10*x1931*x1937))+((r10*x1931*x1936))+((r01*x1927*x1937))+((r01*x1927*x1936))+(((-1.0)*x1929*x1931*x1932))+(((-1.0)*x1927*x1929*x1934))+((x1929*x1939))+((x1927*x1930*x1934))+(((-1.0)*x1936*x1940))+(((-1.0)*sj1*x1928*x1930*x1933))+((x1930*x1931*x1932))+((x1928*x1938)))),IkReal((((r02*x1938))+(((-1.0)*r02*sj1*x1930*x1933))+(((-1.0)*sj1*x1929*x1935))+((sj1*x1930*x1935))+((x1935*x1936))+((x1935*x1937))+(((-1.0)*r02*x1933*x1936))+(((-1.0)*r02*x1933*x1937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((r01*x1931))+((cj0*r00*sj5))+((r10*x1927)))),-1);
if(!x1942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1941.value)+(((1.5707963267949)*(x1942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1943=IKsin(j4);
IkReal x1944=IKcos(j4);
IkReal x1945=(cj5*r10);
IkReal x1946=(r11*sj5);
IkReal x1947=(r21*sj5);
IkReal x1948=(cj2*cj3);
IkReal x1949=(cj5*r00);
IkReal x1950=(r01*sj5);
IkReal x1951=(cj1*sj3);
IkReal x1952=(cj5*r20);
IkReal x1953=((1.0)*x1944);
IkReal x1954=(cj0*x1943);
IkReal x1955=(cj0*x1944);
IkReal x1956=(sj0*x1943);
IkReal x1957=((1.0)*x1949);
IkReal x1958=(sj0*x1944);
IkReal x1959=((1.0)*sj1*sj2);
evalcond[0]=(((x1943*x1947))+(((-1.0)*r22*x1953))+(((-1.0)*x1943*x1952)));
evalcond[1]=(((cj1*cj3*sj2))+((cj2*x1951))+(((-1.0)*x1952*x1953))+(((-1.0)*sj3*x1959))+((x1944*x1947))+((r22*x1943))+((sj1*x1948)));
evalcond[2]=(((x1945*x1955))+((x1950*x1958))+(((-1.0)*r12*x1954))+(((-1.0)*cj0*x1946*x1953))+(((-1.0)*sj0*x1949*x1953))+((r02*x1956)));
evalcond[3]=((((-1.0)*x1954*x1957))+((x1950*x1954))+(((-1.0)*r12*sj0*x1953))+((x1946*x1956))+(((-1.0)*x1945*x1956))+(((-1.0)*cj0*r02*x1953)));
evalcond[4]=((1.0)+((x1945*x1954))+(((-1.0)*r02*sj0*x1953))+((x1950*x1956))+((r12*x1955))+(((-1.0)*x1946*x1954))+(((-1.0)*x1956*x1957)));
evalcond[5]=(((x1950*x1955))+(((-1.0)*sj0*x1945*x1953))+((r12*x1956))+((x1946*x1958))+((cj1*x1948))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj0*x1949*x1953))+(((-1.0)*cj3*x1959))+((r02*x1954))+(((-1.0)*sj2*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1960=r21*r21;
IkReal x1961=cj5*cj5;
IkReal x1962=(cj5*r20);
IkReal x1963=(cj3*sj2);
IkReal x1964=(cj2*sj3);
IkReal x1965=(r21*sj5);
IkReal x1966=(cj1*r22);
IkReal x1967=((1.0)*cj1);
IkReal x1968=(cj2*cj3*sj1);
IkReal x1969=(cj1*x1965);
IkReal x1970=(sj1*sj2*sj3);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1970))+((x1964*x1966))+((r22*x1968))+((x1963*x1966)))),IkReal(((((-1.0)*x1962*x1963*x1967))+((x1964*x1969))+((x1965*x1968))+((x1962*x1970))+((x1963*x1969))+(((-1.0)*x1962*x1964*x1967))+(((-1.0)*x1965*x1970))+(((-1.0)*x1962*x1968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((2.0)*x1962*x1965))+(((-1.0)*x1961*(r20*r20)))+(((-1.0)*x1960))+(((-1.0)*(r22*r22)))+((x1960*x1961)))),-1);
if(!x1972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1971.value)+(((1.5707963267949)*(x1972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1973=IKsin(j4);
IkReal x1974=IKcos(j4);
IkReal x1975=(cj5*r10);
IkReal x1976=(r11*sj5);
IkReal x1977=(r21*sj5);
IkReal x1978=(cj2*cj3);
IkReal x1979=(cj5*r00);
IkReal x1980=(r01*sj5);
IkReal x1981=(cj1*sj3);
IkReal x1982=(cj5*r20);
IkReal x1983=((1.0)*x1974);
IkReal x1984=(cj0*x1973);
IkReal x1985=(cj0*x1974);
IkReal x1986=(sj0*x1973);
IkReal x1987=((1.0)*x1979);
IkReal x1988=(sj0*x1974);
IkReal x1989=((1.0)*sj1*sj2);
evalcond[0]=(((x1973*x1977))+(((-1.0)*x1973*x1982))+(((-1.0)*r22*x1983)));
evalcond[1]=(((cj2*x1981))+((cj1*cj3*sj2))+(((-1.0)*sj3*x1989))+((sj1*x1978))+((r22*x1973))+((x1974*x1977))+(((-1.0)*x1982*x1983)));
evalcond[2]=(((x1975*x1985))+((x1980*x1988))+(((-1.0)*r12*x1984))+(((-1.0)*sj0*x1979*x1983))+(((-1.0)*cj0*x1976*x1983))+((r02*x1986)));
evalcond[3]=((((-1.0)*r12*sj0*x1983))+((x1976*x1986))+(((-1.0)*x1984*x1987))+((x1980*x1984))+(((-1.0)*cj0*r02*x1983))+(((-1.0)*x1975*x1986)));
evalcond[4]=((1.0)+(((-1.0)*x1986*x1987))+((x1975*x1984))+((x1980*x1986))+((r12*x1985))+(((-1.0)*r02*sj0*x1983))+(((-1.0)*x1976*x1984)));
evalcond[5]=((((-1.0)*sj2*x1981))+((cj1*x1978))+((x1976*x1988))+(((-1.0)*cj3*x1989))+(((-1.0)*sj0*x1975*x1983))+((x1980*x1985))+((r12*x1986))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*cj0*x1979*x1983))+((r02*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
CheckValue<IkReal> x1991=IKPowWithIntegerCheck(IKsign((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),-1);
if(!x1991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1990.value)+(((1.5707963267949)*(x1991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1992=IKsin(j4);
IkReal x1993=IKcos(j4);
IkReal x1994=(cj5*r10);
IkReal x1995=(r11*sj5);
IkReal x1996=(r21*sj5);
IkReal x1997=(cj2*cj3);
IkReal x1998=(cj5*r00);
IkReal x1999=(r01*sj5);
IkReal x2000=(cj1*sj3);
IkReal x2001=(cj5*r20);
IkReal x2002=((1.0)*x1993);
IkReal x2003=(cj0*x1992);
IkReal x2004=(cj0*x1993);
IkReal x2005=(sj0*x1992);
IkReal x2006=((1.0)*x1998);
IkReal x2007=(sj0*x1993);
IkReal x2008=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2002))+(((-1.0)*x1992*x2001))+((x1992*x1996)));
evalcond[1]=(((sj1*x1997))+((cj1*cj3*sj2))+(((-1.0)*x2001*x2002))+(((-1.0)*sj3*x2008))+((cj2*x2000))+((x1993*x1996))+((r22*x1992)));
evalcond[2]=((((-1.0)*cj0*x1995*x2002))+(((-1.0)*sj0*x1998*x2002))+((x1999*x2007))+((r02*x2005))+((x1994*x2004))+(((-1.0)*r12*x2003)));
evalcond[3]=((((-1.0)*cj0*r02*x2002))+(((-1.0)*x2003*x2006))+((x1999*x2003))+((x1995*x2005))+(((-1.0)*r12*sj0*x2002))+(((-1.0)*x1994*x2005)));
evalcond[4]=((1.0)+(((-1.0)*x2005*x2006))+((r12*x2004))+(((-1.0)*r02*sj0*x2002))+((x1999*x2005))+(((-1.0)*x1995*x2003))+((x1994*x2003)));
evalcond[5]=((((-1.0)*sj0*x1994*x2002))+(((-1.0)*cj0*x1998*x2002))+((r12*x2005))+((x1999*x2004))+((r02*x2003))+(((-1.0)*sj2*x2000))+(((-1.0)*cj2*sj1*sj3))+((x1995*x2007))+((cj1*x1997))+(((-1.0)*cj3*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2009=((4898.90757881)*sj2);
IkReal x2010=((4898.90757881)*cj2);
IkReal x2011=(sj0*sj1);
IkReal x2012=((12473.0)*cj0);
IkReal x2013=(cj0*sj1);
IkReal x2014=((12473.0)*sj0);
IkReal x2015=(sj1*x2009);
IkReal x2016=(((cj1*x2010))+(((5307.074405)*cj1)));
IkReal x2017=(((x2010*x2013))+((cj0*cj1*x2009))+(((5307.074405)*x2013)));
IkReal x2018=(((x2010*x2011))+((cj1*sj0*x2009))+(((5307.074405)*x2011)));
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign(((((1244.605832)*r02*sj0))+(((-1244.605832)*cj0*r12)))),-1);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal((((r01*x2017))+(((-1.0)*rxp1_1*x2012))+((r11*x2018))+((rxp1_0*x2014))+((r21*(((((-1.0)*x2016))+x2015)))))),IkReal((((r20*(((((-1.0)*x2015))+x2016))))+((rxp0_1*x2012))+(((-1.0)*rxp0_0*x2014))+(((-1.0)*r00*x2017))+(((-1.0)*r10*x2018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2019.value)))+(x2020.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x2021=IKsin(j5);
IkReal x2022=IKcos(j5);
IkReal x2023=((0.39276097)*sj2);
IkReal x2024=((0.39276097)*cj2);
IkReal x2025=((1.0)*cj0);
IkReal x2026=((1.0)*sj0);
IkReal x2027=((0.099784)*sj0);
IkReal x2028=((0.099784)*cj0);
IkReal x2029=(r10*x2021);
IkReal x2030=(r01*x2022);
IkReal x2031=((0.099784)*r00*x2021);
IkReal x2032=((0.099784)*r11*x2022);
evalcond[0]=(((r00*sj0*x2021))+(((-1.0)*x2025*x2029))+((sj0*x2030))+(((-1.0)*r11*x2022*x2025)));
evalcond[1]=((((-0.099784)*r21*x2022))+(((-1.0)*cj1*x2023))+(((-0.425485)*sj1))+(((-1.0)*pz))+(((-1.0)*sj1*x2024))+(((-0.099784)*r20*x2021)));
evalcond[2]=((0.1323165)+((r11*x2022*x2028))+(((-1.0)*px*x2026))+((x2028*x2029))+(((-1.0)*r00*x2021*x2027))+((cj0*py))+(((-1.0)*x2027*x2030)));
evalcond[3]=((((-1.0)*px*x2025))+(((-1.0)*cj1*x2024))+(((-1.0)*py*x2026))+((sj1*x2023))+(((-0.425485)*cj1))+(((-1.0)*r00*x2021*x2028))+(((-1.0)*x2028*x2030))+(((-1.0)*x2027*x2029))+(((-1.0)*r11*x2022*x2027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2033=((1.0)*sj0);
IkReal x2034=((1.0)*r21);
IkReal x2035=(sj1*sj2);
IkReal x2036=(cj2*cj5);
IkReal x2037=(r10*sj5);
IkReal x2038=(cj1*sj2);
IkReal x2039=(r20*sj5);
IkReal x2040=(cj1*cj2);
IkReal x2041=(cj2*x2037);
IkReal x2042=(cj5*x2038);
IkReal x2043=(cj0*r00*sj5);
IkReal x2044=((1.0)*cj0*r01);
IkReal x2045=((1.0)*cj2*sj1);
if( IKabs((((cj5*r11*sj0*x2035))+(((-1.0)*cj1*r11*x2033*x2036))+(((-1.0)*x2040*x2043))+(((-1.0)*x2039*x2045))+((cj0*cj5*r01*x2035))+(((-1.0)*x2038*x2039))+(((-1.0)*cj1*x2036*x2044))+(((-1.0)*x2034*x2042))+(((-1.0)*x2033*x2037*x2040))+((sj0*x2035*x2037))+(((-1.0)*sj1*x2034*x2036))+((x2035*x2043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x2034*x2035))+(((-1.0)*r11*sj1*x2033*x2036))+(((-1.0)*x2035*x2039))+(((-1.0)*x2038*x2043))+(((-1.0)*r11*x2033*x2042))+((x2039*x2040))+(((-1.0)*sj1*x2036*x2044))+(((-1.0)*sj1*x2033*x2041))+((cj1*r21*x2036))+(((-1.0)*x2043*x2045))+(((-1.0)*x2033*x2037*x2038))+(((-1.0)*x2042*x2044)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj0*x2035))+(((-1.0)*cj1*r11*x2033*x2036))+(((-1.0)*x2040*x2043))+(((-1.0)*x2039*x2045))+((cj0*cj5*r01*x2035))+(((-1.0)*x2038*x2039))+(((-1.0)*cj1*x2036*x2044))+(((-1.0)*x2034*x2042))+(((-1.0)*x2033*x2037*x2040))+((sj0*x2035*x2037))+(((-1.0)*sj1*x2034*x2036))+((x2035*x2043))))+IKsqr(((((-1.0)*cj5*x2034*x2035))+(((-1.0)*r11*sj1*x2033*x2036))+(((-1.0)*x2035*x2039))+(((-1.0)*x2038*x2043))+(((-1.0)*r11*x2033*x2042))+((x2039*x2040))+(((-1.0)*sj1*x2036*x2044))+(((-1.0)*sj1*x2033*x2041))+((cj1*r21*x2036))+(((-1.0)*x2043*x2045))+(((-1.0)*x2033*x2037*x2038))+(((-1.0)*x2042*x2044))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r11*sj0*x2035))+(((-1.0)*cj1*r11*x2033*x2036))+(((-1.0)*x2040*x2043))+(((-1.0)*x2039*x2045))+((cj0*cj5*r01*x2035))+(((-1.0)*x2038*x2039))+(((-1.0)*cj1*x2036*x2044))+(((-1.0)*x2034*x2042))+(((-1.0)*x2033*x2037*x2040))+((sj0*x2035*x2037))+(((-1.0)*sj1*x2034*x2036))+((x2035*x2043))), ((((-1.0)*cj5*x2034*x2035))+(((-1.0)*r11*sj1*x2033*x2036))+(((-1.0)*x2035*x2039))+(((-1.0)*x2038*x2043))+(((-1.0)*r11*x2033*x2042))+((x2039*x2040))+(((-1.0)*sj1*x2036*x2044))+(((-1.0)*sj1*x2033*x2041))+((cj1*r21*x2036))+(((-1.0)*x2043*x2045))+(((-1.0)*x2033*x2037*x2038))+(((-1.0)*x2042*x2044))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2046=IKsin(j3);
IkReal x2047=IKcos(j3);
IkReal x2048=(sj2*x2046);
IkReal x2049=(cj2*x2046);
IkReal x2050=(sj2*x2047);
IkReal x2051=(cj2*x2047);
evalcond[0]=(((cj5*r21))+(((-1.0)*cj1*x2051))+((sj1*x2050))+((sj1*x2049))+((cj1*x2048))+((r20*sj5)));
evalcond[1]=((((-1.0)*sj1*x2048))+((cj0*cj5*r01))+((cj5*r11*sj0))+((sj1*x2051))+((cj0*r00*sj5))+((r10*sj0*sj5))+((cj1*x2050))+((cj1*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2052=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x2052;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2053=r21*r21;
IkReal x2054=cj5*cj5;
IkReal x2055=((((2.0)*cj5*r20*r21*sj5))+((x2053*x2054))+(((-1.0)*x2053))+(((-1.0)*(r22*r22)))+(((-1.0)*x2054*(r20*r20))));
j4eval[0]=x2055;
j4eval[1]=IKsign(x2055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2056=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x2056;
j4eval[1]=IKsign(x2056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2057=(sj0*sj5);
IkReal x2058=(cj5*r00);
IkReal x2059=(sj2*sj3);
IkReal x2060=(cj2*cj3);
IkReal x2061=(cj0*cj5);
IkReal x2062=(r10*sj1);
IkReal x2063=((1.0)*sj0);
IkReal x2064=(r01*sj1);
IkReal x2065=(cj0*r12);
IkReal x2066=(cj1*cj2*sj3);
IkReal x2067=(cj1*cj3*sj2);
IkReal x2068=(sj0*sj1*x2059);
IkReal x2069=(cj0*r11*sj1*sj5);
IkReal x2070=((1.0)*cj0*r11*sj5);
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal((((x2060*x2061*x2062))+(((-1.0)*sj1*x2058*x2060*x2063))+(((-1.0)*x2057*x2059*x2064))+(((-1.0)*x2059*x2061*x2062))+((x2059*x2069))+(((-1.0)*x2060*x2069))+((x2057*x2060*x2064))+((x2058*x2068))+((r10*x2061*x2066))+((r10*x2061*x2067))+((r01*x2057*x2066))+((r01*x2057*x2067))+(((-1.0)*x2067*x2070))+(((-1.0)*x2058*x2063*x2066))+(((-1.0)*x2058*x2063*x2067))+(((-1.0)*x2066*x2070)))),IkReal(((((-1.0)*r02*sj1*x2060*x2063))+((r02*x2068))+(((-1.0)*r02*x2063*x2066))+(((-1.0)*r02*x2063*x2067))+(((-1.0)*sj1*x2059*x2065))+((x2065*x2066))+((x2065*x2067))+((sj1*x2060*x2065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(IKsign((((r10*x2057))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r01*x2061)))),-1);
if(!x2072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2071.value)+(((1.5707963267949)*(x2072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2073=IKsin(j4);
IkReal x2074=IKcos(j4);
IkReal x2075=(cj5*r10);
IkReal x2076=(r11*sj5);
IkReal x2077=(r21*sj5);
IkReal x2078=(cj2*cj3);
IkReal x2079=(cj5*r00);
IkReal x2080=(r01*sj5);
IkReal x2081=(cj1*sj3);
IkReal x2082=(cj5*r20);
IkReal x2083=((1.0)*x2074);
IkReal x2084=(cj0*x2073);
IkReal x2085=(cj0*x2074);
IkReal x2086=(sj0*x2073);
IkReal x2087=((1.0)*x2079);
IkReal x2088=(sj0*x2074);
IkReal x2089=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2083))+(((-1.0)*x2073*x2082))+((x2073*x2077)));
evalcond[1]=(((r22*x2073))+((cj1*cj3*sj2))+(((-1.0)*sj3*x2089))+((sj1*x2078))+(((-1.0)*x2082*x2083))+((x2074*x2077))+((cj2*x2081)));
evalcond[2]=(((r02*x2086))+(((-1.0)*sj0*x2079*x2083))+(((-1.0)*r12*x2084))+(((-1.0)*cj0*x2076*x2083))+((x2075*x2085))+((x2080*x2088)));
evalcond[3]=((((-1.0)*x2075*x2086))+(((-1.0)*x2084*x2087))+(((-1.0)*cj0*r02*x2083))+((x2076*x2086))+((x2080*x2084))+(((-1.0)*r12*sj0*x2083)));
evalcond[4]=((1.0)+(((-1.0)*x2086*x2087))+((x2075*x2084))+((x2080*x2086))+(((-1.0)*r02*sj0*x2083))+(((-1.0)*x2076*x2084))+((r12*x2085)));
evalcond[5]=(((r02*x2084))+(((-1.0)*sj2*x2081))+(((-1.0)*cj0*x2079*x2083))+(((-1.0)*cj2*sj1*sj3))+((x2076*x2088))+(((-1.0)*sj0*x2075*x2083))+(((-1.0)*cj3*x2089))+((cj1*x2078))+((x2080*x2085))+((r12*x2086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2090=r21*r21;
IkReal x2091=cj5*cj5;
IkReal x2092=(cj5*r20);
IkReal x2093=(cj3*sj2);
IkReal x2094=(cj2*sj3);
IkReal x2095=(r21*sj5);
IkReal x2096=(cj1*r22);
IkReal x2097=((1.0)*cj1);
IkReal x2098=(cj2*cj3*sj1);
IkReal x2099=(cj1*x2095);
IkReal x2100=(sj1*sj2*sj3);
CheckValue<IkReal> x2101=IKPowWithIntegerCheck(IKsign(((((2.0)*x2092*x2095))+((x2090*x2091))+(((-1.0)*(r22*r22)))+(((-1.0)*x2090))+(((-1.0)*x2091*(r20*r20))))),-1);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2100))+((x2094*x2096))+((r22*x2098))+((x2093*x2096)))),IkReal((((x2094*x2099))+(((-1.0)*x2095*x2100))+((x2092*x2100))+(((-1.0)*x2092*x2093*x2097))+(((-1.0)*x2092*x2094*x2097))+((x2093*x2099))+(((-1.0)*x2092*x2098))+((x2095*x2098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2101.value)))+(x2102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=(cj5*r10);
IkReal x2106=(r11*sj5);
IkReal x2107=(r21*sj5);
IkReal x2108=(cj2*cj3);
IkReal x2109=(cj5*r00);
IkReal x2110=(r01*sj5);
IkReal x2111=(cj1*sj3);
IkReal x2112=(cj5*r20);
IkReal x2113=((1.0)*x2104);
IkReal x2114=(cj0*x2103);
IkReal x2115=(cj0*x2104);
IkReal x2116=(sj0*x2103);
IkReal x2117=((1.0)*x2109);
IkReal x2118=(sj0*x2104);
IkReal x2119=((1.0)*sj1*sj2);
evalcond[0]=(((x2103*x2107))+(((-1.0)*x2103*x2112))+(((-1.0)*r22*x2113)));
evalcond[1]=((((-1.0)*sj3*x2119))+((cj1*cj3*sj2))+(((-1.0)*x2112*x2113))+((x2104*x2107))+((r22*x2103))+((sj1*x2108))+((cj2*x2111)));
evalcond[2]=((((-1.0)*sj0*x2109*x2113))+(((-1.0)*r12*x2114))+((x2105*x2115))+((r02*x2116))+((x2110*x2118))+(((-1.0)*cj0*x2106*x2113)));
evalcond[3]=((((-1.0)*x2114*x2117))+(((-1.0)*cj0*r02*x2113))+(((-1.0)*x2105*x2116))+((x2106*x2116))+((x2110*x2114))+(((-1.0)*r12*sj0*x2113)));
evalcond[4]=((1.0)+((r12*x2115))+(((-1.0)*x2106*x2114))+(((-1.0)*x2116*x2117))+(((-1.0)*r02*sj0*x2113))+((x2105*x2114))+((x2110*x2116)));
evalcond[5]=(((r12*x2116))+((x2106*x2118))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*sj0*x2105*x2113))+((r02*x2114))+((x2110*x2115))+((cj1*x2108))+(((-1.0)*cj0*x2109*x2113))+(((-1.0)*sj2*x2111))+(((-1.0)*cj3*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),-1);
if(!x2121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2120.value)+(((1.5707963267949)*(x2121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2122=IKsin(j4);
IkReal x2123=IKcos(j4);
IkReal x2124=(cj5*r10);
IkReal x2125=(r11*sj5);
IkReal x2126=(r21*sj5);
IkReal x2127=(cj2*cj3);
IkReal x2128=(cj5*r00);
IkReal x2129=(r01*sj5);
IkReal x2130=(cj1*sj3);
IkReal x2131=(cj5*r20);
IkReal x2132=((1.0)*x2123);
IkReal x2133=(cj0*x2122);
IkReal x2134=(cj0*x2123);
IkReal x2135=(sj0*x2122);
IkReal x2136=((1.0)*x2128);
IkReal x2137=(sj0*x2123);
IkReal x2138=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2132))+((x2122*x2126))+(((-1.0)*x2122*x2131)));
evalcond[1]=(((x2123*x2126))+(((-1.0)*sj3*x2138))+((cj1*cj3*sj2))+((sj1*x2127))+((cj2*x2130))+((r22*x2122))+(((-1.0)*x2131*x2132)));
evalcond[2]=((((-1.0)*sj0*x2128*x2132))+((r02*x2135))+(((-1.0)*r12*x2133))+((x2124*x2134))+(((-1.0)*cj0*x2125*x2132))+((x2129*x2137)));
evalcond[3]=((((-1.0)*cj0*r02*x2132))+(((-1.0)*x2133*x2136))+(((-1.0)*r12*sj0*x2132))+((x2129*x2133))+((x2125*x2135))+(((-1.0)*x2124*x2135)));
evalcond[4]=((1.0)+((r12*x2134))+(((-1.0)*x2125*x2133))+((x2124*x2133))+(((-1.0)*x2135*x2136))+(((-1.0)*r02*sj0*x2132))+((x2129*x2135)));
evalcond[5]=(((r12*x2135))+((r02*x2133))+(((-1.0)*sj0*x2124*x2132))+(((-1.0)*cj3*x2138))+(((-1.0)*sj2*x2130))+(((-1.0)*cj2*sj1*sj3))+((cj1*x2127))+(((-1.0)*cj0*x2128*x2132))+((x2129*x2134))+((x2125*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2139=(r01*sj0);
IkReal x2140=((125000.0)*pz);
IkReal x2141=(r00*sj0);
IkReal x2142=((53185.625)*sj1);
IkReal x2143=(cj0*r11);
IkReal x2144=(cj0*r10);
IkReal x2145=((49095.12125)*cj1*sj2);
IkReal x2146=((49095.12125)*cj2*sj1);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((((12473.0)*r12*sj0))+(((12473.0)*cj0*r02)))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal((((x2143*x2146))+((x2143*x2145))+((x2142*x2143))+((x2140*x2143))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2145))+(((-1.0)*x2139*x2146))+(((-1.0)*x2139*x2142)))),IkReal(((((-1.0)*x2144*x2146))+(((-1.0)*x2144*x2145))+(((-1.0)*x2142*x2144))+((x2140*x2141))+(((-1.0)*x2140*x2144))+((x2141*x2142))+((x2141*x2145))+((x2141*x2146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x2149=IKsin(j5);
IkReal x2150=IKcos(j5);
IkReal x2151=((0.39276097)*sj2);
IkReal x2152=((0.39276097)*cj2);
IkReal x2153=((1.0)*cj0);
IkReal x2154=((1.0)*sj0);
IkReal x2155=((0.099784)*sj0);
IkReal x2156=((0.099784)*cj0);
IkReal x2157=(r10*x2149);
IkReal x2158=(r01*x2150);
IkReal x2159=((0.099784)*r00*x2149);
IkReal x2160=((0.099784)*r11*x2150);
evalcond[0]=((((-1.0)*r11*x2150*x2153))+(((-1.0)*x2153*x2157))+((sj0*x2158))+((r00*sj0*x2149)));
evalcond[1]=((((-0.099784)*r21*x2150))+(((-0.425485)*sj1))+(((-1.0)*sj1*x2152))+(((-1.0)*pz))+(((-0.099784)*r20*x2149))+(((-1.0)*cj1*x2151)));
evalcond[2]=((0.1323165)+(((-1.0)*px*x2154))+((x2156*x2157))+((r11*x2150*x2156))+(((-1.0)*x2155*x2158))+((cj0*py))+(((-1.0)*r00*x2149*x2155)));
evalcond[3]=((((-1.0)*px*x2153))+(((-1.0)*r11*x2150*x2155))+(((-0.425485)*cj1))+((sj1*x2151))+(((-1.0)*py*x2154))+(((-1.0)*cj1*x2152))+(((-1.0)*x2155*x2157))+(((-1.0)*x2156*x2158))+(((-1.0)*r00*x2149*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2161=((1.0)*sj0);
IkReal x2162=((1.0)*r21);
IkReal x2163=(sj1*sj2);
IkReal x2164=(cj2*cj5);
IkReal x2165=(r10*sj5);
IkReal x2166=(cj1*sj2);
IkReal x2167=(r20*sj5);
IkReal x2168=(cj1*cj2);
IkReal x2169=(cj2*x2165);
IkReal x2170=(cj5*x2166);
IkReal x2171=(cj0*r00*sj5);
IkReal x2172=((1.0)*cj0*r01);
IkReal x2173=((1.0)*cj2*sj1);
if( IKabs((((x2163*x2171))+((sj0*x2163*x2165))+(((-1.0)*x2168*x2171))+(((-1.0)*sj1*x2162*x2164))+((cj5*r11*sj0*x2163))+(((-1.0)*x2166*x2167))+(((-1.0)*cj1*x2164*x2172))+((cj0*cj5*r01*x2163))+(((-1.0)*x2162*x2170))+(((-1.0)*x2161*x2165*x2168))+(((-1.0)*cj1*r11*x2161*x2164))+(((-1.0)*x2167*x2173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2171*x2173))+(((-1.0)*x2170*x2172))+((cj1*r21*x2164))+(((-1.0)*x2166*x2171))+(((-1.0)*r11*x2161*x2170))+(((-1.0)*cj5*x2162*x2163))+(((-1.0)*r11*sj1*x2161*x2164))+(((-1.0)*sj1*x2164*x2172))+((x2167*x2168))+(((-1.0)*sj1*x2161*x2169))+(((-1.0)*x2163*x2167))+(((-1.0)*x2161*x2165*x2166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2163*x2171))+((sj0*x2163*x2165))+(((-1.0)*x2168*x2171))+(((-1.0)*sj1*x2162*x2164))+((cj5*r11*sj0*x2163))+(((-1.0)*x2166*x2167))+(((-1.0)*cj1*x2164*x2172))+((cj0*cj5*r01*x2163))+(((-1.0)*x2162*x2170))+(((-1.0)*x2161*x2165*x2168))+(((-1.0)*cj1*r11*x2161*x2164))+(((-1.0)*x2167*x2173))))+IKsqr(((((-1.0)*x2171*x2173))+(((-1.0)*x2170*x2172))+((cj1*r21*x2164))+(((-1.0)*x2166*x2171))+(((-1.0)*r11*x2161*x2170))+(((-1.0)*cj5*x2162*x2163))+(((-1.0)*r11*sj1*x2161*x2164))+(((-1.0)*sj1*x2164*x2172))+((x2167*x2168))+(((-1.0)*sj1*x2161*x2169))+(((-1.0)*x2163*x2167))+(((-1.0)*x2161*x2165*x2166))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x2163*x2171))+((sj0*x2163*x2165))+(((-1.0)*x2168*x2171))+(((-1.0)*sj1*x2162*x2164))+((cj5*r11*sj0*x2163))+(((-1.0)*x2166*x2167))+(((-1.0)*cj1*x2164*x2172))+((cj0*cj5*r01*x2163))+(((-1.0)*x2162*x2170))+(((-1.0)*x2161*x2165*x2168))+(((-1.0)*cj1*r11*x2161*x2164))+(((-1.0)*x2167*x2173))), ((((-1.0)*x2171*x2173))+(((-1.0)*x2170*x2172))+((cj1*r21*x2164))+(((-1.0)*x2166*x2171))+(((-1.0)*r11*x2161*x2170))+(((-1.0)*cj5*x2162*x2163))+(((-1.0)*r11*sj1*x2161*x2164))+(((-1.0)*sj1*x2164*x2172))+((x2167*x2168))+(((-1.0)*sj1*x2161*x2169))+(((-1.0)*x2163*x2167))+(((-1.0)*x2161*x2165*x2166))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2174=IKsin(j3);
IkReal x2175=IKcos(j3);
IkReal x2176=(sj2*x2174);
IkReal x2177=(cj2*x2174);
IkReal x2178=(sj2*x2175);
IkReal x2179=(cj2*x2175);
evalcond[0]=(((sj1*x2178))+((sj1*x2177))+((cj5*r21))+(((-1.0)*cj1*x2179))+((cj1*x2176))+((r20*sj5)));
evalcond[1]=(((sj1*x2179))+((cj0*cj5*r01))+((cj5*r11*sj0))+(((-1.0)*sj1*x2176))+((cj0*r00*sj5))+((r10*sj0*sj5))+((cj1*x2178))+((cj1*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2180=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x2180;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2181=r21*r21;
IkReal x2182=cj5*cj5;
IkReal x2183=((((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x2181))+(((-1.0)*x2182*(r20*r20)))+((x2181*x2182))+(((-1.0)*(r22*r22))));
j4eval[0]=x2183;
j4eval[1]=IKsign(x2183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2184=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x2184;
j4eval[1]=IKsign(x2184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2185=(sj0*sj5);
IkReal x2186=(cj5*r00);
IkReal x2187=(sj2*sj3);
IkReal x2188=(cj2*cj3);
IkReal x2189=(cj0*cj5);
IkReal x2190=(r10*sj1);
IkReal x2191=((1.0)*sj0);
IkReal x2192=(r01*sj1);
IkReal x2193=(cj0*r12);
IkReal x2194=(cj1*cj2*sj3);
IkReal x2195=(cj1*cj3*sj2);
IkReal x2196=(sj0*sj1*x2187);
IkReal x2197=(cj0*r11*sj1*sj5);
IkReal x2198=((1.0)*cj0*r11*sj5);
CheckValue<IkReal> x2199=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj0))+((cj0*r00*sj5))+((r01*x2189))+((r10*x2185)))),-1);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(((((-1.0)*x2188*x2197))+(((-1.0)*x2186*x2191*x2194))+(((-1.0)*x2186*x2191*x2195))+(((-1.0)*x2195*x2198))+((x2186*x2196))+((x2188*x2189*x2190))+(((-1.0)*sj1*x2186*x2188*x2191))+((r01*x2185*x2194))+((r01*x2185*x2195))+(((-1.0)*x2194*x2198))+(((-1.0)*x2185*x2187*x2192))+((x2187*x2197))+(((-1.0)*x2187*x2189*x2190))+((r10*x2189*x2195))+((r10*x2189*x2194))+((x2185*x2188*x2192)))),IkReal((((sj1*x2188*x2193))+((x2193*x2194))+((x2193*x2195))+(((-1.0)*sj1*x2187*x2193))+(((-1.0)*r02*sj1*x2188*x2191))+(((-1.0)*r02*x2191*x2195))+(((-1.0)*r02*x2191*x2194))+((r02*x2196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2199.value)))+(x2200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2201=IKsin(j4);
IkReal x2202=IKcos(j4);
IkReal x2203=(cj5*r10);
IkReal x2204=(r11*sj5);
IkReal x2205=(r21*sj5);
IkReal x2206=(cj2*cj3);
IkReal x2207=(cj5*r00);
IkReal x2208=(r01*sj5);
IkReal x2209=(cj1*sj3);
IkReal x2210=(cj5*r20);
IkReal x2211=((1.0)*x2202);
IkReal x2212=(cj0*x2201);
IkReal x2213=(cj0*x2202);
IkReal x2214=(sj0*x2201);
IkReal x2215=((1.0)*x2207);
IkReal x2216=(sj0*x2202);
IkReal x2217=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2211))+((x2201*x2205))+(((-1.0)*x2201*x2210)));
evalcond[1]=(((x2202*x2205))+(((-1.0)*x2210*x2211))+(((-1.0)*sj3*x2217))+((cj1*cj3*sj2))+((cj2*x2209))+((sj1*x2206))+((r22*x2201)));
evalcond[2]=(((x2203*x2213))+(((-1.0)*sj0*x2207*x2211))+(((-1.0)*cj0*x2204*x2211))+(((-1.0)*r12*x2212))+((x2208*x2216))+((r02*x2214)));
evalcond[3]=((((-1.0)*r12*sj0*x2211))+(((-1.0)*cj0*r02*x2211))+((x2204*x2214))+(((-1.0)*x2203*x2214))+(((-1.0)*x2212*x2215))+((x2208*x2212)));
evalcond[4]=((1.0)+(((-1.0)*r02*sj0*x2211))+(((-1.0)*x2214*x2215))+((r12*x2213))+((x2203*x2212))+(((-1.0)*x2204*x2212))+((x2208*x2214)));
evalcond[5]=((((-1.0)*sj2*x2209))+((r12*x2214))+((cj1*x2206))+(((-1.0)*cj0*x2207*x2211))+(((-1.0)*cj2*sj1*sj3))+((x2204*x2216))+(((-1.0)*sj0*x2203*x2211))+(((-1.0)*cj3*x2217))+((x2208*x2213))+((r02*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2218=r21*r21;
IkReal x2219=cj5*cj5;
IkReal x2220=(cj5*r20);
IkReal x2221=(cj3*sj2);
IkReal x2222=(cj2*sj3);
IkReal x2223=(r21*sj5);
IkReal x2224=(cj1*r22);
IkReal x2225=((1.0)*cj1);
IkReal x2226=(cj2*cj3*sj1);
IkReal x2227=(cj1*x2223);
IkReal x2228=(sj1*sj2*sj3);
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2218))+(((2.0)*x2220*x2223))+(((-1.0)*x2219*(r20*r20)))+(((-1.0)*(r22*r22)))+((x2218*x2219)))),-1);
if(!x2229.valid){
continue;
}
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal((((r22*x2226))+((x2222*x2224))+(((-1.0)*r22*x2228))+((x2221*x2224)))),IkReal(((((-1.0)*x2223*x2228))+(((-1.0)*x2220*x2226))+((x2222*x2227))+(((-1.0)*x2220*x2221*x2225))+((x2220*x2228))+(((-1.0)*x2220*x2222*x2225))+((x2223*x2226))+((x2221*x2227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2229.value)))+(x2230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2231=IKsin(j4);
IkReal x2232=IKcos(j4);
IkReal x2233=(cj5*r10);
IkReal x2234=(r11*sj5);
IkReal x2235=(r21*sj5);
IkReal x2236=(cj2*cj3);
IkReal x2237=(cj5*r00);
IkReal x2238=(r01*sj5);
IkReal x2239=(cj1*sj3);
IkReal x2240=(cj5*r20);
IkReal x2241=((1.0)*x2232);
IkReal x2242=(cj0*x2231);
IkReal x2243=(cj0*x2232);
IkReal x2244=(sj0*x2231);
IkReal x2245=((1.0)*x2237);
IkReal x2246=(sj0*x2232);
IkReal x2247=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2241))+((x2231*x2235))+(((-1.0)*x2231*x2240)));
evalcond[1]=(((x2232*x2235))+((cj1*cj3*sj2))+((r22*x2231))+(((-1.0)*sj3*x2247))+((sj1*x2236))+(((-1.0)*x2240*x2241))+((cj2*x2239)));
evalcond[2]=((((-1.0)*cj0*x2234*x2241))+((x2233*x2243))+((x2238*x2246))+(((-1.0)*r12*x2242))+((r02*x2244))+(((-1.0)*sj0*x2237*x2241)));
evalcond[3]=((((-1.0)*r12*sj0*x2241))+((x2234*x2244))+(((-1.0)*cj0*r02*x2241))+(((-1.0)*x2242*x2245))+(((-1.0)*x2233*x2244))+((x2238*x2242)));
evalcond[4]=((1.0)+(((-1.0)*r02*sj0*x2241))+(((-1.0)*x2234*x2242))+((x2233*x2242))+(((-1.0)*x2244*x2245))+((x2238*x2244))+((r12*x2243)));
evalcond[5]=((((-1.0)*cj0*x2237*x2241))+((x2234*x2246))+(((-1.0)*cj2*sj1*sj3))+(((-1.0)*sj2*x2239))+(((-1.0)*cj3*x2247))+(((-1.0)*sj0*x2233*x2241))+((x2238*x2243))+((cj1*x2236))+((r12*x2244))+((r02*x2242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2248 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2248.valid){
continue;
}
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(IKsign((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),-1);
if(!x2249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2248.value)+(((1.5707963267949)*(x2249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2250=IKsin(j4);
IkReal x2251=IKcos(j4);
IkReal x2252=(cj5*r10);
IkReal x2253=(r11*sj5);
IkReal x2254=(r21*sj5);
IkReal x2255=(cj2*cj3);
IkReal x2256=(cj5*r00);
IkReal x2257=(r01*sj5);
IkReal x2258=(cj1*sj3);
IkReal x2259=(cj5*r20);
IkReal x2260=((1.0)*x2251);
IkReal x2261=(cj0*x2250);
IkReal x2262=(cj0*x2251);
IkReal x2263=(sj0*x2250);
IkReal x2264=((1.0)*x2256);
IkReal x2265=(sj0*x2251);
IkReal x2266=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2260))+(((-1.0)*x2250*x2259))+((x2250*x2254)));
evalcond[1]=(((cj1*cj3*sj2))+((cj2*x2258))+(((-1.0)*x2259*x2260))+(((-1.0)*sj3*x2266))+((sj1*x2255))+((r22*x2250))+((x2251*x2254)));
evalcond[2]=(((x2252*x2262))+((x2257*x2265))+(((-1.0)*sj0*x2256*x2260))+(((-1.0)*r12*x2261))+((r02*x2263))+(((-1.0)*cj0*x2253*x2260)));
evalcond[3]=(((x2257*x2261))+(((-1.0)*r12*sj0*x2260))+(((-1.0)*x2252*x2263))+(((-1.0)*x2261*x2264))+((x2253*x2263))+(((-1.0)*cj0*r02*x2260)));
evalcond[4]=((1.0)+((x2252*x2261))+((x2257*x2263))+(((-1.0)*x2263*x2264))+(((-1.0)*x2253*x2261))+(((-1.0)*r02*sj0*x2260))+((r12*x2262)));
evalcond[5]=(((x2257*x2262))+(((-1.0)*cj2*sj1*sj3))+((cj1*x2255))+(((-1.0)*cj0*x2256*x2260))+(((-1.0)*sj2*x2258))+((r02*x2261))+((x2253*x2265))+(((-1.0)*sj0*x2252*x2260))+((r12*x2263))+(((-1.0)*cj3*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (ca6e28526818dd65381969f072568115)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
